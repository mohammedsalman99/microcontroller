

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Jun 04 18:54:56 2024

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1
    54                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    55                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    56  0000                     
    57                           ; Version 1.45
    58                           ; Generated 16/11/2017 GMT
    59                           ; 
    60                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    61                           ; All rights reserved.
    62                           ; 
    63                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    64                           ; 
    65                           ; Redistribution and use in source and binary forms, with or without modification, are
    66                           ; permitted provided that the following conditions are met:
    67                           ; 
    68                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    69                           ;        conditions and the following disclaimer.
    70                           ; 
    71                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    72                           ;        of conditions and the following disclaimer in the documentation and/or other
    73                           ;        materials provided with the distribution.
    74                           ; 
    75                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    76                           ;        software without specific prior written permission.
    77                           ; 
    78                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    79                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    80                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    81                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    82                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    83                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    84                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    85                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    86                           ; 
    87                           ; 
    88                           ; Code-generator required, PIC18F4620 Definitions
    89                           ; 
    90                           ; SFR Addresses
    91  0000                     
    92                           	psect	idataCOMRAM
    93  003018                     __pidataCOMRAM:
    94                           	opt stack 0
    95                           
    96                           ;initializer for _LCD_INIT_STRING
    97  003018  28                 	db	40
    98  003019  0C                 	db	12
    99  00301A  01                 	db	1
   100  00301B  06                 	db	6
   101                           
   102                           ;initializer for _columnForLCD
   103  00301C  0001               	dw	1
   104                           
   105                           	psect	smallconst
   106  001000                     __psmallconst:
   107                           	opt stack 0
   108  001000  00                 	db	0
   109  001001                     _dpowers:
   110                           	opt stack 0
   111  001001  0001               	dw	1
   112  001003  0000               	dw	0
   113  001005  000A               	dw	10
   114  001007  0000               	dw	0
   115  001009  0064               	dw	100
   116  00100B  0000               	dw	0
   117  00100D  03E8               	dw	1000
   118  00100F  0000               	dw	0
   119  001011  2710               	dw	10000
   120  001013  0000               	dw	0
   121  001015  86A0               	dw	34464
   122  001017  0001               	dw	1
   123  001019  4240               	dw	16960
   124  00101B  000F               	dw	15
   125  00101D  9680               	dw	38528
   126  00101F  0098               	dw	152
   127  001021  E100               	dw	57600
   128  001023  05F5               	dw	1525
   129  001025  CA00               	dw	51712
   130  001027  3B9A               	dw	15258
   131  001029                     __end_of_dpowers:
   132                           	opt stack 0
   133  001029                     __powers_:
   134                           	opt stack 0
   135  001029  00                 	db	0
   136  00102A  80                 	db	128
   137  00102B  3F                 	db	63
   138  00102C  00                 	db	0
   139  00102D  20                 	db	32
   140  00102E  41                 	db	65
   141  00102F  00                 	db	0
   142  001030  C8                 	db	200
   143  001031  42                 	db	66
   144  001032  00                 	db	0
   145  001033  7A                 	db	122
   146  001034  44                 	db	68
   147  001035  40                 	db	64
   148  001036  1C                 	db	28
   149  001037  46                 	db	70
   150  001038  50                 	db	80
   151  001039  C3                 	db	195
   152  00103A  47                 	db	71
   153  00103B  24                 	db	36
   154  00103C  74                 	db	116
   155  00103D  49                 	db	73
   156  00103E  97                 	db	151
   157  00103F  18                 	db	24
   158  001040  4B                 	db	75
   159  001041  BC                 	db	188
   160  001042  BE                 	db	190
   161  001043  4C                 	db	76
   162  001044  6B                 	db	107
   163  001045  6E                 	db	110
   164  001046  4E                 	db	78
   165  001047  03                 	db	3
   166  001048  15                 	db	21
   167  001049  50                 	db	80
   168  00104A  79                 	db	121
   169  00104B  AD                 	db	173
   170  00104C  60                 	db	96
   171  00104D  F3                 	db	243
   172  00104E  49                 	db	73
   173  00104F  71                 	db	113
   174  001050                     __end_of__powers_:
   175                           	opt stack 0
   176  001050                     __npowers_:
   177                           	opt stack 0
   178  001050  00                 	db	0
   179  001051  80                 	db	128
   180  001052  3F                 	db	63
   181  001053  CD                 	db	205
   182  001054  CC                 	db	204
   183  001055  3D                 	db	61
   184  001056  D7                 	db	215
   185  001057  23                 	db	35
   186  001058  3C                 	db	60
   187  001059  12                 	db	18
   188  00105A  83                 	db	131
   189  00105B  3A                 	db	58
   190  00105C  B7                 	db	183
   191  00105D  D1                 	db	209
   192  00105E  38                 	db	56
   193  00105F  C6                 	db	198
   194  001060  27                 	db	39
   195  001061  37                 	db	55
   196  001062  38                 	db	56
   197  001063  86                 	db	134
   198  001064  35                 	db	53
   199  001065  C0                 	db	192
   200  001066  D6                 	db	214
   201  001067  33                 	db	51
   202  001068  CC                 	db	204
   203  001069  2B                 	db	43
   204  00106A  32                 	db	50
   205  00106B  70                 	db	112
   206  00106C  89                 	db	137
   207  00106D  30                 	db	48
   208  00106E  E7                 	db	231
   209  00106F  DB                 	db	219
   210  001070  2E                 	db	46
   211  001071  E5                 	db	229
   212  001072  3C                 	db	60
   213  001073  1E                 	db	30
   214  001074  42                 	db	66
   215  001075  A2                 	db	162
   216  001076  0D                 	db	13
   217  001077                     __end_of__npowers_:
   218                           	opt stack 0
   219  0000                     _TXREG	set	4013
   220  0000                     _PIR1bits	set	3998
   221  0000                     _RCREG	set	4014
   222  0000                     _RCSTAbits	set	4011
   223  0000                     _RCSTA	set	4011
   224  0000                     _TXSTAbits	set	4012
   225  0000                     _SPBRGH	set	4016
   226  0000                     _SPBRG	set	4015
   227  0000                     _TXSTA	set	4012
   228  0000                     _BAUDCONbits	set	4024
   229  0000                     _ADRESL	set	4035
   230  0000                     _ADRESH	set	4036
   231  0000                     _ADCON2	set	4032
   232  0000                     _ADCON0bits	set	4034
   233  0000                     _ADCON0	set	4034
   234  0000                     _TRISC	set	3988
   235  0000                     _TRISE	set	3990
   236  0000                     _TRISD	set	3989
   237  0000                     _TRISB	set	3987
   238  0000                     _TRISA	set	3986
   239  0000                     _LATE	set	3981
   240  0000                     _LATD	set	3980
   241  0000                     _LATC	set	3979
   242  0000                     _LATB	set	3978
   243  0000                     _LATA	set	3977
   244  0000                     _ADCON1	set	4033
   245  0000                     _INTCON	set	4082
   246  001077                     STR_1:
   247  001077  4D                 	db	77	;'M'
   248  001078  6F                 	db	111	;'o'
   249  001079  68                 	db	104	;'h'
   250  00107A  61                 	db	97	;'a'
   251  00107B  6D                 	db	109	;'m'
   252  00107C  6D                 	db	109	;'m'
   253  00107D  61                 	db	97	;'a'
   254  00107E  64                 	db	100	;'d'
   255  00107F  20                 	db	32
   256  001080  4E                 	db	78	;'N'
   257  001081  61                 	db	97	;'a'
   258  001082  6A                 	db	106	;'j'
   259  001083  6A                 	db	106	;'j'
   260  001084  61                 	db	97	;'a'
   261  001085  72                 	db	114	;'r'
   262  001086  20                 	db	32
   263  001087  2C                 	db	44
   264  001088  20                 	db	32
   265  001089  4D                 	db	77	;'M'
   266  00108A  6F                 	db	111	;'o'
   267  00108B  68                 	db	104	;'h'
   268  00108C  61                 	db	97	;'a'
   269  00108D  6D                 	db	109	;'m'
   270  00108E  6D                 	db	109	;'m'
   271  00108F  61                 	db	97	;'a'
   272  001090  64                 	db	100	;'d'
   273  001091  20                 	db	32
   274  001092  41                 	db	65	;'A'
   275  001093  6E                 	db	110	;'n'
   276  001094  77                 	db	119	;'w'
   277  001095  61                 	db	97	;'a'
   278  001096  72                 	db	114	;'r'
   279  001097  20                 	db	32
   280  001098  00                 	db	0
   281  001099                     STR_2:
   282  001099  4D                 	db	77	;'M'
   283  00109A  6F                 	db	111	;'o'
   284  00109B  68                 	db	104	;'h'
   285  00109C  61                 	db	97	;'a'
   286  00109D  6D                 	db	109	;'m'
   287  00109E  6D                 	db	109	;'m'
   288  00109F  61                 	db	97	;'a'
   289  0010A0  64                 	db	100	;'d'
   290  0010A1  20                 	db	32
   291  0010A2  4E                 	db	78	;'N'
   292  0010A3  61                 	db	97	;'a'
   293  0010A4  6A                 	db	106	;'j'
   294  0010A5  6A                 	db	106	;'j'
   295  0010A6  61                 	db	97	;'a'
   296  0010A7  72                 	db	114	;'r'
   297  0010A8  20                 	db	32
   298  0010A9  2C                 	db	44
   299  0010AA  20                 	db	32
   300  0010AB  4D                 	db	77	;'M'
   301  0010AC  6F                 	db	111	;'o'
   302  0010AD  68                 	db	104	;'h'
   303  0010AE  61                 	db	97	;'a'
   304  0010AF  6D                 	db	109	;'m'
   305  0010B0  6D                 	db	109	;'m'
   306  0010B1  61                 	db	97	;'a'
   307  0010B2  64                 	db	100	;'d'
   308  0010B3  20                 	db	32
   309  0010B4  41                 	db	65	;'A'
   310  0010B5  6E                 	db	110	;'n'
   311  0010B6  77                 	db	119	;'w'
   312  0010B7  61                 	db	97	;'a'
   313  0010B8  72                 	db	114	;'r'
   314  0010B9  00                 	db	0
   315  0010BA                     STR_4:
   316  0010BA  56                 	db	86	;'V'
   317  0010BB  31                 	db	49	;'1'
   318  0010BC  3D                 	db	61	;'='
   319  0010BD  25                 	db	37
   320  0010BE  34                 	db	52	;'4'
   321  0010BF  2E                 	db	46
   322  0010C0  32                 	db	50	;'2'
   323  0010C1  66                 	db	102	;'f'
   324  0010C2  56                 	db	86	;'V'
   325  0010C3  20                 	db	32
   326  0010C4  00                 	db	0
   327  0010C5                     STR_3:
   328  0010C5  54                 	db	84	;'T'
   329  0010C6  3D                 	db	61	;'='
   330  0010C7  25                 	db	37
   331  0010C8  34                 	db	52	;'4'
   332  0010C9  2E                 	db	46
   333  0010CA  32                 	db	50	;'2'
   334  0010CB  66                 	db	102	;'f'
   335  0010CC  00                 	db	0
   336                           
   337                           ; #config settings
   338  0010CD  00                 	db	0	; dummy byte at the end
   339  0000                     
   340                           	psect	cinit
   341  002DF2                     __pcinit:
   342                           	opt stack 0
   343  002DF2                     start_initialization:
   344                           	opt stack 0
   345  002DF2                     __initialization:
   346                           	opt stack 0
   347                           
   348                           ; Initialize objects allocated to COMRAM (6 bytes)
   349                           ; load TBLPTR registers with __pidataCOMRAM
   350  002DF2  0E18               	movlw	low __pidataCOMRAM
   351  002DF4  6EF6               	movwf	tblptrl,c
   352  002DF6  0E30               	movlw	high __pidataCOMRAM
   353  002DF8  6EF7               	movwf	tblptrh,c
   354  002DFA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   355  002DFC  6EF8               	movwf	tblptru,c
   356  002DFE  EE00  F06C         	lfsr	0,__pdataCOMRAM
   357  002E02  EE10 F006          	lfsr	1,6
   358  002E06                     copy_data0:
   359  002E06  0009               	tblrd		*+
   360  002E08  CFF5 FFEE          	movff	tablat,postinc0
   361  002E0C  50E5               	movf	postdec1,w,c
   362  002E0E  50E1               	movf	fsr1l,w,c
   363  002E10  E1FA               	bnz	copy_data0
   364                           
   365                           ; Clear objects allocated to BANK0 (100 bytes)
   366  002E12  EE00  F080         	lfsr	0,__pbssBANK0
   367  002E16  0E64               	movlw	100
   368  002E18                     clear_0:
   369  002E18  6AEE               	clrf	postinc0,c
   370  002E1A  06E8               	decf	wreg,f,c
   371  002E1C  E1FD               	bnz	clear_0
   372                           
   373                           ; Clear objects allocated to COMRAM (1 bytes)
   374  002E1E  6A72               	clrf	__pbssCOMRAM& (0+255),c
   375  002E20                     end_of_initialization:
   376                           	opt stack 0
   377  002E20                     __end_of__initialization:
   378                           	opt stack 0
   379  002E20  0E00               	movlw	low (__Lmediumconst shr (0+16))
   380  002E22  6EF8               	movwf	tblptru,c
   381  002E24  0100               	movlb	0
   382  002E26  EF98  F017         	goto	_main	;jump to C main() function
   383                           tblptru	equ	0xFF8
   384                           tblptrh	equ	0xFF7
   385                           tblptrl	equ	0xFF6
   386                           tablat	equ	0xFF5
   387                           postinc0	equ	0xFEE
   388                           wreg	equ	0xFE8
   389                           postdec1	equ	0xFE5
   390                           fsr1l	equ	0xFE1
   391                           
   392                           	psect	bssCOMRAM
   393  000072                     __pbssCOMRAM:
   394                           	opt stack 0
   395  000072                     _lastReceivedChar:
   396                           	opt stack 0
   397  000072                     	ds	1
   398                           tblptru	equ	0xFF8
   399                           tblptrh	equ	0xFF7
   400                           tblptrl	equ	0xFF6
   401                           tablat	equ	0xFF5
   402                           postinc0	equ	0xFEE
   403                           wreg	equ	0xFE8
   404                           postdec1	equ	0xFE5
   405                           fsr1l	equ	0xFE1
   406                           
   407                           	psect	dataCOMRAM
   408  00006C                     __pdataCOMRAM:
   409                           	opt stack 0
   410  00006C                     _LCD_INIT_STRING:
   411                           	opt stack 0
   412  00006C                     	ds	4
   413  000070                     _columnForLCD:
   414                           	opt stack 0
   415  000070                     	ds	2
   416                           tblptru	equ	0xFF8
   417                           tblptrh	equ	0xFF7
   418                           tblptrl	equ	0xFF6
   419                           tablat	equ	0xFF5
   420                           postinc0	equ	0xFEE
   421                           wreg	equ	0xFE8
   422                           postdec1	equ	0xFE5
   423                           fsr1l	equ	0xFE1
   424                           
   425                           	psect	bssBANK0
   426  000080                     __pbssBANK0:
   427                           	opt stack 0
   428  000080                     _displayBuffer:
   429                           	opt stack 0
   430  000080                     	ds	100
   431                           tblptru	equ	0xFF8
   432                           tblptrh	equ	0xFF7
   433                           tblptrl	equ	0xFF6
   434                           tablat	equ	0xFF5
   435                           postinc0	equ	0xFEE
   436                           wreg	equ	0xFE8
   437                           postdec1	equ	0xFE5
   438                           fsr1l	equ	0xFE1
   439                           
   440                           	psect	cstackCOMRAM
   441  000001                     __pcstackCOMRAM:
   442                           	opt stack 0
   443  000001                     ??_isdigit:
   444  000001                     ??_delay_cycles:
   445  000001                     ?_read_adc_raw_no_lib:
   446                           	opt stack 0
   447  000001                     ?___awmod:
   448                           	opt stack 0
   449  000001                     ?___ftpack:
   450                           	opt stack 0
   451  000001                     ?___ftneg:
   452                           	opt stack 0
   453  000001                     ?__tdiv_to_l_:
   454                           	opt stack 0
   455  000001                     ?__div_to_l_:
   456                           	opt stack 0
   457  000001                     ?___lldiv:
   458                           	opt stack 0
   459  000001                     ?___llmod:
   460                           	opt stack 0
   461  000001                     setupSerial@dummy:
   462                           	opt stack 0
   463  000001                     read_byte_no_lib@c:
   464                           	opt stack 0
   465  000001                     send_byte_no_lib@c:
   466                           	opt stack 0
   467  000001                     delay_ms@n:
   468                           	opt stack 0
   469  000001                     ___awmod@dividend:
   470                           	opt stack 0
   471  000001                     __div_to_l_@f1:
   472                           	opt stack 0
   473  000001                     ___ftpack@arg:
   474                           	opt stack 0
   475  000001                     __tdiv_to_l_@f1:
   476                           	opt stack 0
   477  000001                     ___ftge@ff1:
   478                           	opt stack 0
   479  000001                     ___ftneg@f1:
   480                           	opt stack 0
   481  000001                     ___lldiv@dividend:
   482                           	opt stack 0
   483  000001                     ___llmod@dividend:
   484                           	opt stack 0
   485                           
   486                           ; 4 bytes @ 0x0
   487  000001                     	ds	1
   488  000002                     _isdigit$768:
   489                           	opt stack 0
   490  000002                     send_string_no_lib@p:
   491                           	opt stack 0
   492                           
   493                           ; 2 bytes @ 0x1
   494  000002                     	ds	1
   495  000003                     ??_read_adc_raw_no_lib:
   496  000003                     isdigit@c:
   497                           	opt stack 0
   498  000003                     delay_ms@i:
   499                           	opt stack 0
   500  000003                     ___awmod@divisor:
   501                           	opt stack 0
   502                           
   503                           ; 2 bytes @ 0x2
   504  000003                     	ds	1
   505  000004                     delay_cycles@n:
   506                           	opt stack 0
   507  000004                     ___ftpack@exp:
   508                           	opt stack 0
   509  000004                     __div_to_l_@f2:
   510                           	opt stack 0
   511  000004                     __tdiv_to_l_@f2:
   512                           	opt stack 0
   513  000004                     ___ftge@ff2:
   514                           	opt stack 0
   515                           
   516                           ; 3 bytes @ 0x3
   517  000004                     	ds	1
   518  000005                     ___awmod@counter:
   519                           	opt stack 0
   520  000005                     ___ftpack@sign:
   521                           	opt stack 0
   522  000005                     delay_cycles@x:
   523                           	opt stack 0
   524  000005                     read_adc_raw_no_lib@raw_value:
   525                           	opt stack 0
   526  000005                     ___lldiv@divisor:
   527                           	opt stack 0
   528  000005                     ___llmod@divisor:
   529                           	opt stack 0
   530                           
   531                           ; 4 bytes @ 0x4
   532  000005                     	ds	1
   533  000006                     ??___ftpack:
   534  000006                     ___awmod@sign:
   535                           	opt stack 0
   536                           
   537                           ; 1 bytes @ 0x5
   538  000006                     	ds	1
   539  000007                     ??__tdiv_to_l_:
   540  000007                     ??_lcd_send_nibble:
   541  000007                     ??___ftge:
   542  000007                     ?___awdiv:
   543                           	opt stack 0
   544  000007                     read_adc_raw_no_lib@channel:
   545                           	opt stack 0
   546  000007                     ___awdiv@dividend:
   547                           	opt stack 0
   548  000007                     __div_to_l_@quot:
   549                           	opt stack 0
   550                           
   551                           ; 4 bytes @ 0x6
   552  000007                     	ds	1
   553  000008                     lcd_send_nibble@n:
   554                           	opt stack 0
   555                           
   556                           ; 1 bytes @ 0x7
   557  000008                     	ds	1
   558  000009                     ?___lltoft:
   559                           	opt stack 0
   560  000009                     lcd_send_byte@n:
   561                           	opt stack 0
   562  000009                     ___llmod@counter:
   563                           	opt stack 0
   564  000009                     ___awdiv@divisor:
   565                           	opt stack 0
   566  000009                     ___lldiv@quotient:
   567                           	opt stack 0
   568  000009                     ___lltoft@c:
   569                           	opt stack 0
   570                           
   571                           ; 4 bytes @ 0x8
   572  000009                     	ds	1
   573  00000A                     lcd_send_byte@cm_data:
   574                           	opt stack 0
   575  00000A                     __tdiv_to_l_@quot:
   576                           	opt stack 0
   577                           
   578                           ; 4 bytes @ 0x9
   579  00000A                     	ds	1
   580  00000B                     lcd_init@i:
   581                           	opt stack 0
   582  00000B                     lcd_gotoxy@y:
   583                           	opt stack 0
   584  00000B                     ___awdiv@counter:
   585                           	opt stack 0
   586  00000B                     __div_to_l_@cntr:
   587                           	opt stack 0
   588                           
   589                           ; 1 bytes @ 0xA
   590  00000B                     	ds	1
   591  00000C                     lcd_gotoxy@x:
   592                           	opt stack 0
   593  00000C                     ___awdiv@sign:
   594                           	opt stack 0
   595  00000C                     __div_to_l_@exp1:
   596                           	opt stack 0
   597                           
   598                           ; 1 bytes @ 0xB
   599  00000C                     	ds	1
   600  00000D                     ??___lltoft:
   601  00000D                     lcd_gotoxy@address:
   602                           	opt stack 0
   603  00000D                     ___lldiv@counter:
   604                           	opt stack 0
   605  00000D                     ___awdiv@quotient:
   606                           	opt stack 0
   607                           
   608                           ; 2 bytes @ 0xC
   609  00000D                     	ds	1
   610  00000E                     lcd_putc@c:
   611                           	opt stack 0
   612  00000E                     __tdiv_to_l_@cntr:
   613                           	opt stack 0
   614                           
   615                           ; 1 bytes @ 0xD
   616  00000E                     	ds	1
   617  00000F                     ?___wmul:
   618                           	opt stack 0
   619  00000F                     __tdiv_to_l_@exp1:
   620                           	opt stack 0
   621  00000F                     lcd_puts@s:
   622                           	opt stack 0
   623  00000F                     ___wmul@multiplier:
   624                           	opt stack 0
   625                           
   626                           ; 2 bytes @ 0xE
   627  00000F                     	ds	2
   628  000011                     ___lltoft@exp:
   629                           	opt stack 0
   630  000011                     ___wmul@multiplicand:
   631                           	opt stack 0
   632                           
   633                           ; 2 bytes @ 0x10
   634  000011                     	ds	2
   635  000013                     ___wmul@product:
   636                           	opt stack 0
   637                           
   638                           ; 2 bytes @ 0x12
   639  000013                     	ds	2
   640  000015                     ?___ftmul:
   641                           	opt stack 0
   642  000015                     ?___awtoft:
   643                           	opt stack 0
   644  000015                     ___awtoft@c:
   645                           	opt stack 0
   646  000015                     ___ftmul@f1:
   647                           	opt stack 0
   648                           
   649                           ; 3 bytes @ 0x14
   650  000015                     	ds	3
   651  000018                     ___awtoft@sign:
   652                           	opt stack 0
   653  000018                     ___ftmul@f2:
   654                           	opt stack 0
   655                           
   656                           ; 3 bytes @ 0x17
   657  000018                     	ds	3
   658  00001B                     ??___ftmul:
   659                           
   660                           ; 1 bytes @ 0x1A
   661  00001B                     	ds	3
   662  00001E                     ___ftmul@exp:
   663                           	opt stack 0
   664                           
   665                           ; 1 bytes @ 0x1D
   666  00001E                     	ds	1
   667  00001F                     ___ftmul@f3_as_product:
   668                           	opt stack 0
   669                           
   670                           ; 3 bytes @ 0x1E
   671  00001F                     	ds	3
   672  000022                     ___ftmul@cntr:
   673                           	opt stack 0
   674                           
   675                           ; 1 bytes @ 0x21
   676  000022                     	ds	1
   677  000023                     ___ftmul@sign:
   678                           	opt stack 0
   679                           
   680                           ; 1 bytes @ 0x22
   681  000023                     	ds	1
   682  000024                     ?___ftdiv:
   683                           	opt stack 0
   684  000024                     ?_fround:
   685                           	opt stack 0
   686  000024                     ?_scale:
   687                           	opt stack 0
   688  000024                     ___ftdiv@f1:
   689                           	opt stack 0
   690                           
   691                           ; 3 bytes @ 0x23
   692  000024                     	ds	3
   693  000027                     ___ftdiv@f2:
   694                           	opt stack 0
   695  000027                     _fround$1115:
   696                           	opt stack 0
   697  000027                     _scale$1116:
   698                           	opt stack 0
   699                           
   700                           ; 3 bytes @ 0x26
   701  000027                     	ds	3
   702  00002A                     ??___ftdiv:
   703  00002A                     scale@scl:
   704                           	opt stack 0
   705  00002A                     _fround$1114:
   706                           	opt stack 0
   707                           
   708                           ; 3 bytes @ 0x29
   709  00002A                     	ds	1
   710  00002B                     ?___fttol:
   711                           	opt stack 0
   712  00002B                     ___fttol@f1:
   713                           	opt stack 0
   714                           
   715                           ; 3 bytes @ 0x2A
   716  00002B                     	ds	2
   717  00002D                     fround@prec:
   718                           	opt stack 0
   719  00002D                     ___ftdiv@cntr:
   720                           	opt stack 0
   721                           
   722                           ; 1 bytes @ 0x2C
   723  00002D                     	ds	1
   724  00002E                     ?___ftadd:
   725                           	opt stack 0
   726  00002E                     ___ftadd@f1:
   727                           	opt stack 0
   728  00002E                     ___ftdiv@f3:
   729                           	opt stack 0
   730                           
   731                           ; 3 bytes @ 0x2D
   732  00002E                     	ds	1
   733  00002F                     ??___fttol:
   734                           
   735                           ; 1 bytes @ 0x2E
   736  00002F                     	ds	2
   737  000031                     ___ftdiv@exp:
   738                           	opt stack 0
   739  000031                     ___ftadd@f2:
   740                           	opt stack 0
   741                           
   742                           ; 3 bytes @ 0x30
   743  000031                     	ds	1
   744  000032                     ___ftdiv@sign:
   745                           	opt stack 0
   746                           
   747                           ; 1 bytes @ 0x31
   748  000032                     	ds	1
   749  000033                     ?_read_adc_voltage:
   750                           	opt stack 0
   751                           
   752                           ; 3 bytes @ 0x32
   753  000033                     	ds	1
   754  000034                     ??___ftadd:
   755  000034                     ___fttol@sign1:
   756                           	opt stack 0
   757                           
   758                           ; 1 bytes @ 0x33
   759  000034                     	ds	1
   760  000035                     ___fttol@lval:
   761                           	opt stack 0
   762                           
   763                           ; 4 bytes @ 0x34
   764  000035                     	ds	1
   765  000036                     read_adc_voltage@temp:
   766                           	opt stack 0
   767                           
   768                           ; 3 bytes @ 0x35
   769  000036                     	ds	1
   770  000037                     ___ftadd@sign:
   771                           	opt stack 0
   772                           
   773                           ; 1 bytes @ 0x36
   774  000037                     	ds	1
   775  000038                     ___ftadd@exp2:
   776                           	opt stack 0
   777                           
   778                           ; 1 bytes @ 0x37
   779  000038                     	ds	1
   780  000039                     ___ftadd@exp1:
   781                           	opt stack 0
   782  000039                     ___fttol@exp1:
   783                           	opt stack 0
   784  000039                     read_adc_voltage@voltage:
   785                           	opt stack 0
   786                           
   787                           ; 3 bytes @ 0x38
   788  000039                     	ds	1
   789  00003A                     ?___ftsub:
   790                           	opt stack 0
   791  00003A                     ___ftsub@f1:
   792                           	opt stack 0
   793                           
   794                           ; 3 bytes @ 0x39
   795  00003A                     	ds	2
   796  00003C                     read_adc_voltage@raw_value:
   797                           	opt stack 0
   798                           
   799                           ; 2 bytes @ 0x3B
   800  00003C                     	ds	1
   801  00003D                     ___ftsub@f2:
   802                           	opt stack 0
   803                           
   804                           ; 3 bytes @ 0x3C
   805  00003D                     	ds	1
   806  00003E                     read_adc_voltage@channel:
   807                           	opt stack 0
   808                           
   809                           ; 1 bytes @ 0x3D
   810  00003E                     	ds	2
   811  000040                     ?_sprintf:
   812                           	opt stack 0
   813  000040                     sprintf@sp:
   814                           	opt stack 0
   815                           
   816                           ; 2 bytes @ 0x3F
   817  000040                     	ds	2
   818  000042                     sprintf@f:
   819                           	opt stack 0
   820                           
   821                           ; 2 bytes @ 0x41
   822  000042                     	ds	5
   823  000047                     ??_sprintf:
   824                           
   825                           ; 1 bytes @ 0x46
   826  000047                     	ds	6
   827  00004D                     _sprintf$1117:
   828                           	opt stack 0
   829                           
   830                           ; 3 bytes @ 0x4C
   831  00004D                     	ds	3
   832  000050                     sprintf@ap:
   833                           	opt stack 0
   834                           
   835                           ; 2 bytes @ 0x4F
   836  000050                     	ds	2
   837  000052                     sprintf@val:
   838                           	opt stack 0
   839                           
   840                           ; 4 bytes @ 0x51
   841  000052                     	ds	4
   842  000056                     sprintf@flag:
   843                           	opt stack 0
   844                           
   845                           ; 2 bytes @ 0x55
   846  000056                     	ds	2
   847  000058                     sprintf@width:
   848                           	opt stack 0
   849                           
   850                           ; 2 bytes @ 0x57
   851  000058                     	ds	2
   852  00005A                     sprintf@tmpval:
   853                           	opt stack 0
   854                           
   855                           ; 4 bytes @ 0x59
   856  00005A                     	ds	4
   857  00005E                     sprintf@exp:
   858                           	opt stack 0
   859                           
   860                           ; 2 bytes @ 0x5D
   861  00005E                     	ds	2
   862  000060                     sprintf@fval:
   863                           	opt stack 0
   864                           
   865                           ; 3 bytes @ 0x5F
   866  000060                     	ds	3
   867  000063                     sprintf@prec:
   868                           	opt stack 0
   869                           
   870                           ; 2 bytes @ 0x62
   871  000063                     	ds	2
   872  000065                     sprintf@c:
   873                           	opt stack 0
   874                           
   875                           ; 1 bytes @ 0x64
   876  000065                     	ds	1
   877  000066                     _processADCValues$1113:
   878                           	opt stack 0
   879                           
   880                           ; 3 bytes @ 0x65
   881  000066                     	ds	3
   882  000069                     processADCValues@voltage:
   883                           	opt stack 0
   884                           
   885                           ; 3 bytes @ 0x68
   886  000069                     	ds	3
   887  00006C                     tblptru	equ	0xFF8
   888                           tblptrh	equ	0xFF7
   889                           tblptrl	equ	0xFF6
   890                           tablat	equ	0xFF5
   891                           postinc0	equ	0xFEE
   892                           wreg	equ	0xFE8
   893                           postdec1	equ	0xFE5
   894                           fsr1l	equ	0xFE1
   895                           
   896                           ; 1 bytes @ 0x6B
   897 ;;
   898 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   899 ;;
   900 ;; *************** function _main *****************
   901 ;; Defined at:
   902 ;;		line 80 in file "basic.c"
   903 ;; Parameters:    Size  Location     Type
   904 ;;		None
   905 ;; Auto vars:     Size  Location     Type
   906 ;;		None
   907 ;; Return value:  Size  Location     Type
   908 ;;                  1    wreg      void 
   909 ;; Registers used:
   910 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   911 ;; Tracked objects:
   912 ;;		On entry : 0/0
   913 ;;		On exit  : 0/0
   914 ;;		Unchanged: 0/0
   915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   917 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   919 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   920 ;;Total ram usage:        0 bytes
   921 ;; Hardware stack levels required when called:    7
   922 ;; This function calls:
   923 ;;		_displayWelcomeMessage
   924 ;;		_initPorts
   925 ;;		_init_adc_no_lib
   926 ;;		_lcd_init
   927 ;;		_processADCValues
   928 ;;		_processReceivedChar
   929 ;;		_setupSerial
   930 ;; This function is called by:
   931 ;;		Startup code after reset
   932 ;; This function uses a non-reentrant model
   933 ;;
   934                           
   935                           	psect	text0
   936  002F30                     __ptext0:
   937                           	opt stack 0
   938  002F30                     _main:
   939                           	opt stack 24
   940                           
   941                           ;basic.c: 82: INTCON = 0;
   942                           
   943                           ;incstack = 0
   944  002F30  0E00               	movlw	0
   945  002F32  6EF2               	movwf	intcon,c	;volatile
   946                           
   947                           ;basic.c: 83: initPorts();
   948  002F34  EC48  F017         	call	_initPorts	;wreg free
   949                           
   950                           ;basic.c: 84: setupSerial();
   951  002F38  ECAA  F017         	call	_setupSerial	;wreg free
   952                           
   953                           ;basic.c: 85: lcd_init();
   954  002F3C  EC85  F015         	call	_lcd_init	;wreg free
   955                           
   956                           ;basic.c: 86: init_adc_no_lib();
   957  002F40  EC02  F018         	call	_init_adc_no_lib	;wreg free
   958                           
   959                           ;basic.c: 89: displayWelcomeMessage();
   960  002F44  ECBE  F016         	call	_displayWelcomeMessage	;wreg free
   961  002F48                     l69:
   962  002F48  0004               	clrwdt		;# 
   963                           
   964                           ;basic.c: 95: processADCValues();
   965  002F4A  EC9D  F013         	call	_processADCValues	;wreg free
   966                           
   967                           ;basic.c: 98: processReceivedChar();
   968  002F4E  EC9F  F016         	call	_processReceivedChar	;wreg free
   969  002F52  D7FA               	goto	l69
   970  002F54                     __end_of_main:
   971                           	opt stack 0
   972                           tblptru	equ	0xFF8
   973                           tblptrh	equ	0xFF7
   974                           tblptrl	equ	0xFF6
   975                           tablat	equ	0xFF5
   976                           intcon	equ	0xFF2
   977                           postinc0	equ	0xFEE
   978                           wreg	equ	0xFE8
   979                           postdec1	equ	0xFE5
   980                           fsr1l	equ	0xFE1
   981                           
   982 ;; *************** function _setupSerial *****************
   983 ;; Defined at:
   984 ;;		line 3 in file "my_ser.c"
   985 ;; Parameters:    Size  Location     Type
   986 ;;		None
   987 ;; Auto vars:     Size  Location     Type
   988 ;;  dummy           1    0[COMRAM] unsigned char 
   989 ;; Return value:  Size  Location     Type
   990 ;;                  1    wreg      void 
   991 ;; Registers used:
   992 ;;		wreg, status,2
   993 ;; Tracked objects:
   994 ;;		On entry : 0/0
   995 ;;		On exit  : 0/0
   996 ;;		Unchanged: 0/0
   997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   999 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1001 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1002 ;;Total ram usage:        1 bytes
  1003 ;; Hardware stack levels used:    1
  1004 ;; This function calls:
  1005 ;;		Nothing
  1006 ;; This function is called by:
  1007 ;;		_main
  1008 ;; This function uses a non-reentrant model
  1009 ;;
  1010                           
  1011                           	psect	text1
  1012  002F54                     __ptext1:
  1013                           	opt stack 0
  1014  002F54                     _setupSerial:
  1015                           	opt stack 30
  1016                           
  1017                           ;my_ser.c: 4: unsigned char dummy;
  1018                           ;my_ser.c: 5: BAUDCONbits.BRG16 = 1;
  1019                           
  1020                           ;incstack = 0
  1021  002F54  86B8               	bsf	4024,3,c	;volatile
  1022                           
  1023                           ;my_ser.c: 6: TXSTA = 0;
  1024  002F56  0E00               	movlw	0
  1025  002F58  6EAC               	movwf	4012,c	;volatile
  1026                           
  1027                           ;my_ser.c: 7: SPBRG = 0x67;
  1028  002F5A  0E67               	movlw	103
  1029  002F5C  6EAF               	movwf	4015,c	;volatile
  1030                           
  1031                           ;my_ser.c: 8: SPBRGH = 0;
  1032  002F5E  0E00               	movlw	0
  1033  002F60  6EB0               	movwf	4016,c	;volatile
  1034                           
  1035                           ;my_ser.c: 9: TXSTAbits.BRGH = 1;
  1036  002F62  84AC               	bsf	4012,2,c	;volatile
  1037                           
  1038                           ;my_ser.c: 10: TXSTAbits.TXEN = 1;
  1039  002F64  8AAC               	bsf	4012,5,c	;volatile
  1040                           
  1041                           ;my_ser.c: 13: RCSTA = 0;
  1042  002F66  0E00               	movlw	0
  1043  002F68  6EAB               	movwf	4011,c	;volatile
  1044                           
  1045                           ;my_ser.c: 14: RCSTAbits.CREN = 1;
  1046  002F6A  88AB               	bsf	4011,4,c	;volatile
  1047                           
  1048                           ;my_ser.c: 15: RCSTAbits.SPEN = 1;
  1049  002F6C  8EAB               	bsf	4011,7,c	;volatile
  1050                           
  1051                           ;my_ser.c: 16: ;
  1052                           ;my_ser.c: 17: dummy = RCREG;
  1053  002F6E  CFAE F001          	movff	4014,setupSerial@dummy	;volatile
  1054                           
  1055                           ;my_ser.c: 18: dummy = RCREG;
  1056  002F72  CFAE F001          	movff	4014,setupSerial@dummy	;volatile
  1057  002F76  0012               	return	
  1058  002F78                     __end_of_setupSerial:
  1059                           	opt stack 0
  1060                           tblptru	equ	0xFF8
  1061                           tblptrh	equ	0xFF7
  1062                           tblptrl	equ	0xFF6
  1063                           tablat	equ	0xFF5
  1064                           intcon	equ	0xFF2
  1065                           postinc0	equ	0xFEE
  1066                           wreg	equ	0xFE8
  1067                           postdec1	equ	0xFE5
  1068                           fsr1l	equ	0xFE1
  1069                           
  1070 ;; *************** function _processReceivedChar *****************
  1071 ;; Defined at:
  1072 ;;		line 137 in file "basic.c"
  1073 ;; Parameters:    Size  Location     Type
  1074 ;;		None
  1075 ;; Auto vars:     Size  Location     Type
  1076 ;;		None
  1077 ;; Return value:  Size  Location     Type
  1078 ;;                  1    wreg      void 
  1079 ;; Registers used:
  1080 ;;		wreg, status,2, status,0, cstack
  1081 ;; Tracked objects:
  1082 ;;		On entry : 0/0
  1083 ;;		On exit  : 0/0
  1084 ;;		Unchanged: 0/0
  1085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1086 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1087 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1088 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1089 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1090 ;;Total ram usage:        0 bytes
  1091 ;; Hardware stack levels used:    1
  1092 ;; Hardware stack levels required when called:    5
  1093 ;; This function calls:
  1094 ;;		_is_byte_available
  1095 ;;		_lcd_gotoxy
  1096 ;;		_lcd_putc
  1097 ;;		_read_byte_no_lib
  1098 ;; This function is called by:
  1099 ;;		_main
  1100 ;; This function uses a non-reentrant model
  1101 ;;
  1102                           
  1103                           	psect	text2
  1104  002D3E                     __ptext2:
  1105                           	opt stack 0
  1106  002D3E                     _processReceivedChar:
  1107                           	opt stack 25
  1108                           
  1109                           ;basic.c: 138: if (is_byte_available()) {
  1110                           
  1111                           ;incstack = 0
  1112  002D3E  ECEE  F017         	call	_is_byte_available	;wreg free
  1113  002D42  0900               	iorlw	0
  1114  002D44  B4D8               	btfsc	status,2,c
  1115  002D46  0012               	return	
  1116                           
  1117                           ;basic.c: 139: lastReceivedChar = read_byte_no_lib();
  1118  002D48  EC08  F018         	call	_read_byte_no_lib	;wreg free
  1119  002D4C  6E72               	movwf	_lastReceivedChar,c
  1120                           
  1121                           ;basic.c: 140: lcd_gotoxy(columnForLCD, 2);
  1122  002D4E  0E02               	movlw	2
  1123  002D50  6E0B               	movwf	lcd_gotoxy@y,c
  1124  002D52  5070               	movf	_columnForLCD,w,c
  1125  002D54  EC5E  F016         	call	_lcd_gotoxy
  1126                           
  1127                           ;basic.c: 141: lcd_putc(lastReceivedChar);
  1128  002D58  5072               	movf	_lastReceivedChar,w,c
  1129  002D5A  EC0F  F016         	call	_lcd_putc
  1130                           
  1131                           ;basic.c: 142: columnForLCD++;
  1132  002D5E  4A70               	infsnz	_columnForLCD,f,c
  1133  002D60  2A71               	incf	_columnForLCD+1,f,c
  1134                           
  1135                           ;basic.c: 143: if (columnForLCD == 16) {
  1136  002D62  0E10               	movlw	16
  1137  002D64  1870               	xorwf	_columnForLCD,w,c
  1138  002D66  1071               	iorwf	_columnForLCD+1,w,c
  1139  002D68  A4D8               	btfss	status,2,c
  1140  002D6A  0012               	return	
  1141                           
  1142                           ;basic.c: 144: columnForLCD = 1;
  1143  002D6C  0E00               	movlw	0
  1144  002D6E  6E71               	movwf	_columnForLCD+1,c
  1145  002D70  0E01               	movlw	1
  1146  002D72  6E70               	movwf	_columnForLCD,c
  1147                           
  1148                           ;basic.c: 145: lcd_putc('\f');
  1149  002D74  0E0C               	movlw	12
  1150  002D76  EC0F  F016         	call	_lcd_putc
  1151  002D7A  0012               	return	
  1152  002D7C                     __end_of_processReceivedChar:
  1153                           	opt stack 0
  1154                           tblptru	equ	0xFF8
  1155                           tblptrh	equ	0xFF7
  1156                           tblptrl	equ	0xFF6
  1157                           tablat	equ	0xFF5
  1158                           intcon	equ	0xFF2
  1159                           postinc0	equ	0xFEE
  1160                           wreg	equ	0xFE8
  1161                           postdec1	equ	0xFE5
  1162                           fsr1l	equ	0xFE1
  1163                           status	equ	0xFD8
  1164                           
  1165 ;; *************** function _read_byte_no_lib *****************
  1166 ;; Defined at:
  1167 ;;		line 32 in file "my_ser.c"
  1168 ;; Parameters:    Size  Location     Type
  1169 ;;		None
  1170 ;; Auto vars:     Size  Location     Type
  1171 ;;  c               1    0[COMRAM] unsigned char 
  1172 ;; Return value:  Size  Location     Type
  1173 ;;                  1    wreg      unsigned char 
  1174 ;; Registers used:
  1175 ;;		wreg, status,2
  1176 ;; Tracked objects:
  1177 ;;		On entry : 0/0
  1178 ;;		On exit  : 0/0
  1179 ;;		Unchanged: 0/0
  1180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1181 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1182 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1183 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1184 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1185 ;;Total ram usage:        1 bytes
  1186 ;; Hardware stack levels used:    1
  1187 ;; This function calls:
  1188 ;;		Nothing
  1189 ;; This function is called by:
  1190 ;;		_processReceivedChar
  1191 ;; This function uses a non-reentrant model
  1192 ;;
  1193                           
  1194                           	psect	text3
  1195  003010                     __ptext3:
  1196                           	opt stack 0
  1197  003010                     _read_byte_no_lib:
  1198                           	opt stack 29
  1199                           
  1200                           ;my_ser.c: 33: unsigned char c;
  1201                           ;my_ser.c: 34: c = RCREG;
  1202                           
  1203                           ;incstack = 0
  1204  003010  CFAE F001          	movff	4014,read_byte_no_lib@c	;volatile
  1205                           
  1206                           ;my_ser.c: 35: return c;
  1207  003014  5001               	movf	read_byte_no_lib@c,w,c
  1208  003016  0012               	return	
  1209  003018                     __end_of_read_byte_no_lib:
  1210                           	opt stack 0
  1211                           tblptru	equ	0xFF8
  1212                           tblptrh	equ	0xFF7
  1213                           tblptrl	equ	0xFF6
  1214                           tablat	equ	0xFF5
  1215                           intcon	equ	0xFF2
  1216                           postinc0	equ	0xFEE
  1217                           wreg	equ	0xFE8
  1218                           postdec1	equ	0xFE5
  1219                           fsr1l	equ	0xFE1
  1220                           status	equ	0xFD8
  1221                           
  1222 ;; *************** function _is_byte_available *****************
  1223 ;; Defined at:
  1224 ;;		line 22 in file "my_ser.c"
  1225 ;; Parameters:    Size  Location     Type
  1226 ;;		None
  1227 ;; Auto vars:     Size  Location     Type
  1228 ;;		None
  1229 ;; Return value:  Size  Location     Type
  1230 ;;                  1    wreg      unsigned char 
  1231 ;; Registers used:
  1232 ;;		wreg
  1233 ;; Tracked objects:
  1234 ;;		On entry : 0/0
  1235 ;;		On exit  : 0/0
  1236 ;;		Unchanged: 0/0
  1237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1239 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1241 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1242 ;;Total ram usage:        0 bytes
  1243 ;; Hardware stack levels used:    1
  1244 ;; This function calls:
  1245 ;;		Nothing
  1246 ;; This function is called by:
  1247 ;;		_processReceivedChar
  1248 ;; This function uses a non-reentrant model
  1249 ;;
  1250                           
  1251                           	psect	text4
  1252  002FDC                     __ptext4:
  1253                           	opt stack 0
  1254  002FDC                     _is_byte_available:
  1255                           	opt stack 29
  1256                           
  1257                           ;my_ser.c: 24: if (RCSTAbits.FERR || RCSTAbits.OERR) {
  1258                           
  1259                           ;incstack = 0
  1260  002FDC  B4AB               	btfsc	4011,2,c	;volatile
  1261  002FDE  D002               	goto	u1560
  1262  002FE0  A2AB               	btfss	4011,1,c	;volatile
  1263  002FE2  D002               	goto	l201
  1264  002FE4                     u1560:
  1265                           
  1266                           ;my_ser.c: 25: RCSTAbits.CREN = 0;
  1267  002FE4  98AB               	bcf	4011,4,c	;volatile
  1268                           
  1269                           ;my_ser.c: 26: RCSTAbits.CREN = 1;
  1270  002FE6  88AB               	bsf	4011,4,c	;volatile
  1271  002FE8                     l201:
  1272                           
  1273                           ;my_ser.c: 27: }
  1274                           ;my_ser.c: 28: if (PIR1bits.RCIF) return 1;
  1275  002FE8  AA9E               	btfss	3998,5,c	;volatile
  1276  002FEA  D002               	goto	l204
  1277  002FEC  0E01               	movlw	1
  1278  002FEE  0012               	return	
  1279  002FF0                     l204:
  1280                           
  1281                           ;my_ser.c: 29: else return 0;
  1282  002FF0  0E00               	movlw	0
  1283  002FF2  0012               	return	
  1284  002FF4                     __end_of_is_byte_available:
  1285                           	opt stack 0
  1286                           tblptru	equ	0xFF8
  1287                           tblptrh	equ	0xFF7
  1288                           tblptrl	equ	0xFF6
  1289                           tablat	equ	0xFF5
  1290                           intcon	equ	0xFF2
  1291                           postinc0	equ	0xFEE
  1292                           wreg	equ	0xFE8
  1293                           postdec1	equ	0xFE5
  1294                           fsr1l	equ	0xFE1
  1295                           status	equ	0xFD8
  1296                           
  1297 ;; *************** function _processADCValues *****************
  1298 ;; Defined at:
  1299 ;;		line 129 in file "basic.c"
  1300 ;; Parameters:    Size  Location     Type
  1301 ;;		None
  1302 ;; Auto vars:     Size  Location     Type
  1303 ;;  voltage         3  104[COMRAM] float 
  1304 ;; Return value:  Size  Location     Type
  1305 ;;                  1    wreg      void 
  1306 ;; Registers used:
  1307 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1308 ;; Tracked objects:
  1309 ;;		On entry : 0/0
  1310 ;;		On exit  : 0/0
  1311 ;;		Unchanged: 0/0
  1312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1314 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1315 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1316 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1317 ;;Total ram usage:        6 bytes
  1318 ;; Hardware stack levels used:    1
  1319 ;; Hardware stack levels required when called:    6
  1320 ;; This function calls:
  1321 ;;		___ftdiv
  1322 ;;		___ftmul
  1323 ;;		_lcd_puts
  1324 ;;		_read_adc_voltage
  1325 ;;		_sprintf
  1326 ;; This function is called by:
  1327 ;;		_main
  1328 ;; This function uses a non-reentrant model
  1329 ;;
  1330                           
  1331                           	psect	text5
  1332  00273A                     __ptext5:
  1333                           	opt stack 0
  1334  00273A                     _processADCValues:
  1335                           	opt stack 24
  1336                           
  1337                           ;basic.c: 130: float voltage = read_adc_voltage(1);
  1338                           
  1339                           ;incstack = 0
  1340  00273A  0E01               	movlw	1
  1341  00273C  EC35  F013         	call	_read_adc_voltage
  1342  002740  C033  F069         	movff	?_read_adc_voltage,processADCValues@voltage
  1343  002744  C034  F06A         	movff	?_read_adc_voltage+1,processADCValues@voltage+1
  1344  002748  C035  F06B         	movff	?_read_adc_voltage+2,processADCValues@voltage+2
  1345                           
  1346                           ;basic.c: 131: sprintf(displayBuffer, "T=%4.2f", ((voltage * 100) / 5));
  1347  00274C  0E00               	movlw	0
  1348  00274E  6E18               	movwf	___ftmul@f2,c
  1349  002750  0EC8               	movlw	200
  1350  002752  6E19               	movwf	___ftmul@f2+1,c
  1351  002754  0E42               	movlw	66
  1352  002756  6E1A               	movwf	___ftmul@f2+2,c
  1353  002758  C069  F015         	movff	processADCValues@voltage,___ftmul@f1
  1354  00275C  C06A  F016         	movff	processADCValues@voltage+1,___ftmul@f1+1
  1355  002760  C06B  F017         	movff	processADCValues@voltage+2,___ftmul@f1+2
  1356  002764  ECCE  F011         	call	___ftmul	;wreg free
  1357  002768  C015  F024         	movff	?___ftmul,___ftdiv@f1
  1358  00276C  C016  F025         	movff	?___ftmul+1,___ftdiv@f1+1
  1359  002770  C017  F026         	movff	?___ftmul+2,___ftdiv@f1+2
  1360  002774  0E00               	movlw	0
  1361  002776  6E27               	movwf	___ftdiv@f2,c
  1362  002778  0EA0               	movlw	160
  1363  00277A  6E28               	movwf	___ftdiv@f2+1,c
  1364  00277C  0E40               	movlw	64
  1365  00277E  6E29               	movwf	___ftdiv@f2+2,c
  1366  002780  ECC2  F012         	call	___ftdiv	;wreg free
  1367  002784  C024  F066         	movff	?___ftdiv,_processADCValues$1113
  1368  002788  C025  F067         	movff	?___ftdiv+1,_processADCValues$1113+1
  1369  00278C  C026  F068         	movff	?___ftdiv+2,_processADCValues$1113+2
  1370                           
  1371                           ;basic.c: 131: sprintf(displayBuffer, "T=%4.2f", ((voltage * 100) / 5));
  1372  002790  0E80               	movlw	low _displayBuffer
  1373  002792  6E40               	movwf	sprintf@sp,c
  1374  002794  0E00               	movlw	high _displayBuffer
  1375  002796  6E41               	movwf	sprintf@sp+1,c
  1376  002798  0EC5               	movlw	low STR_3
  1377  00279A  6E42               	movwf	sprintf@f,c
  1378  00279C  0E10               	movlw	high STR_3
  1379  00279E  6E43               	movwf	sprintf@f+1,c
  1380  0027A0  C066  F044         	movff	_processADCValues$1113,?_sprintf+4
  1381  0027A4  C067  F045         	movff	_processADCValues$1113+1,?_sprintf+5
  1382  0027A8  C068  F046         	movff	_processADCValues$1113+2,?_sprintf+6
  1383  0027AC  EC67  F008         	call	_sprintf	;wreg free
  1384                           
  1385                           ;basic.c: 132: voltage = read_adc_voltage(0);
  1386  0027B0  0E00               	movlw	0
  1387  0027B2  EC35  F013         	call	_read_adc_voltage
  1388  0027B6  C033  F069         	movff	?_read_adc_voltage,processADCValues@voltage
  1389  0027BA  C034  F06A         	movff	?_read_adc_voltage+1,processADCValues@voltage+1
  1390  0027BE  C035  F06B         	movff	?_read_adc_voltage+2,processADCValues@voltage+2
  1391                           
  1392                           ;basic.c: 133: sprintf(displayBuffer, "V1=%4.2fV ", voltage);
  1393  0027C2  0E80               	movlw	low _displayBuffer
  1394  0027C4  6E40               	movwf	sprintf@sp,c
  1395  0027C6  0E00               	movlw	high _displayBuffer
  1396  0027C8  6E41               	movwf	sprintf@sp+1,c
  1397  0027CA  0EBA               	movlw	low STR_4
  1398  0027CC  6E42               	movwf	sprintf@f,c
  1399  0027CE  0E10               	movlw	high STR_4
  1400  0027D0  6E43               	movwf	sprintf@f+1,c
  1401  0027D2  C069  F044         	movff	processADCValues@voltage,?_sprintf+4
  1402  0027D6  C06A  F045         	movff	processADCValues@voltage+1,?_sprintf+5
  1403  0027DA  C06B  F046         	movff	processADCValues@voltage+2,?_sprintf+6
  1404  0027DE  EC67  F008         	call	_sprintf	;wreg free
  1405                           
  1406                           ;basic.c: 134: lcd_puts(displayBuffer);
  1407  0027E2  0E80               	movlw	low _displayBuffer
  1408  0027E4  6E0F               	movwf	lcd_puts@s,c
  1409  0027E6  0E00               	movlw	high _displayBuffer
  1410  0027E8  6E10               	movwf	lcd_puts@s+1,c
  1411  0027EA  ECE4  F015         	call	_lcd_puts	;wreg free
  1412  0027EE  0012               	return		;funcret
  1413  0027F0                     __end_of_processADCValues:
  1414                           	opt stack 0
  1415                           tblptru	equ	0xFF8
  1416                           tblptrh	equ	0xFF7
  1417                           tblptrl	equ	0xFF6
  1418                           tablat	equ	0xFF5
  1419                           intcon	equ	0xFF2
  1420                           postinc0	equ	0xFEE
  1421                           wreg	equ	0xFE8
  1422                           postdec1	equ	0xFE5
  1423                           fsr1l	equ	0xFE1
  1424                           status	equ	0xFD8
  1425                           
  1426 ;; *************** function _sprintf *****************
  1427 ;; Defined at:
  1428 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  1429 ;; Parameters:    Size  Location     Type
  1430 ;;  sp              2   63[COMRAM] PTR unsigned char 
  1431 ;;		 -> displayBuffer(100), 
  1432 ;;  f               2   65[COMRAM] PTR const unsigned char 
  1433 ;;		 -> STR_4(11), STR_3(8), 
  1434 ;; Auto vars:     Size  Location     Type
  1435 ;;  tmpval          4   89[COMRAM] struct .
  1436 ;;  val             4   81[COMRAM] unsigned long 
  1437 ;;  fval            3   95[COMRAM] unsigned long 
  1438 ;;  cp              3    0        PTR const unsigned char 
  1439 ;;  prec            2   98[COMRAM] int 
  1440 ;;  exp             2   93[COMRAM] int 
  1441 ;;  width           2   87[COMRAM] int 
  1442 ;;  flag            2   85[COMRAM] unsigned short 
  1443 ;;  ap              2   79[COMRAM] PTR void [1]
  1444 ;;		 -> ?_sprintf(2), 
  1445 ;;  len             2    0        unsigned int 
  1446 ;;  c               1  100[COMRAM] char 
  1447 ;;  d               1    0        unsigned char 
  1448 ;; Return value:  Size  Location     Type
  1449 ;;                  2   63[COMRAM] int 
  1450 ;; Registers used:
  1451 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1452 ;; Tracked objects:
  1453 ;;		On entry : 0/0
  1454 ;;		On exit  : 0/0
  1455 ;;		Unchanged: 0/0
  1456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1457 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1458 ;;      Locals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1459 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1460 ;;      Totals:        38       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1461 ;;Total ram usage:       38 bytes
  1462 ;; Hardware stack levels used:    1
  1463 ;; Hardware stack levels required when called:    3
  1464 ;; This function calls:
  1465 ;;		___awdiv
  1466 ;;		___ftadd
  1467 ;;		___ftge
  1468 ;;		___ftmul
  1469 ;;		___ftneg
  1470 ;;		___ftsub
  1471 ;;		___fttol
  1472 ;;		___lldiv
  1473 ;;		___llmod
  1474 ;;		___lltoft
  1475 ;;		___wmul
  1476 ;;		__div_to_l_
  1477 ;;		__tdiv_to_l_
  1478 ;;		_fround
  1479 ;;		_isdigit
  1480 ;;		_scale
  1481 ;; This function is called by:
  1482 ;;		_processADCValues
  1483 ;; This function uses a non-reentrant model
  1484 ;;
  1485                           
  1486                           	psect	text6
  1487  0010CE                     __ptext6:
  1488                           	opt stack 0
  1489  0010CE                     _sprintf:
  1490                           	opt stack 26
  1491                           
  1492                           ;doprnt.c: 494: va_list ap;
  1493                           ;doprnt.c: 499: signed char c;
  1494                           ;doprnt.c: 501: int width;
  1495                           ;doprnt.c: 504: int prec;
  1496                           ;doprnt.c: 508: unsigned short flag;
  1497                           ;doprnt.c: 515: char d;
  1498                           ;doprnt.c: 516: double fval;
  1499                           ;doprnt.c: 517: int exp;
  1500                           ;doprnt.c: 523: union {
  1501                           ;doprnt.c: 524: unsigned long vd;
  1502                           ;doprnt.c: 525: double integ;
  1503                           ;doprnt.c: 526: } tmpval;
  1504                           ;doprnt.c: 528: unsigned long val;
  1505                           ;doprnt.c: 529: unsigned len;
  1506                           ;doprnt.c: 530: const char * cp;
  1507                           ;doprnt.c: 533: *ap = __va_start();
  1508                           
  1509                           ;incstack = 0
  1510  0010CE  0E44               	movlw	low (?_sprintf+4)
  1511  0010D0  6E50               	movwf	sprintf@ap,c
  1512  0010D2  0E00               	movlw	high (?_sprintf+4)
  1513  0010D4  6E51               	movwf	sprintf@ap+1,c
  1514                           
  1515                           ;doprnt.c: 536: while(c = *f++) {
  1516  0010D6  EF8A  F00C         	goto	l329
  1517  0010DA                     
  1518                           ;doprnt.c: 538: if(c != '%')
  1519  0010DA  0E25               	movlw	37
  1520  0010DC  1865               	xorwf	sprintf@c,w,c
  1521  0010DE  B4D8               	btfsc	status,2,c
  1522  0010E0  D008               	goto	l258
  1523                           
  1524                           ;doprnt.c: 540: {
  1525                           ;doprnt.c: 541: ((*sp++ = (c)));
  1526  0010E2  C040  FFD9         	movff	sprintf@sp,fsr2l
  1527  0010E6  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1528  0010EA  C065  FFDF         	movff	sprintf@c,indf2
  1529  0010EE  EF88  F00C         	goto	l3116
  1530  0010F2                     l258:
  1531                           
  1532                           ;doprnt.c: 543: }
  1533                           ;doprnt.c: 546: width = 0;
  1534  0010F2  0E00               	movlw	0
  1535  0010F4  6E59               	movwf	sprintf@width+1,c
  1536  0010F6  0E00               	movlw	0
  1537  0010F8  6E58               	movwf	sprintf@width,c
  1538                           
  1539                           ;doprnt.c: 548: flag = 0;
  1540  0010FA  0E00               	movlw	0
  1541  0010FC  6E57               	movwf	sprintf@flag+1,c
  1542  0010FE  0E00               	movlw	0
  1543  001100  6E56               	movwf	sprintf@flag,c
  1544                           
  1545                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1546  001102  C042  FFF6         	movff	sprintf@f,tblptrl
  1547  001106  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1548  00110A                     	if	0	;tblptru may be non-zero
  1549  00110A                     	endif
  1550  00110A                     	if	0	;tblptru may be non-zero
  1551  00110A                     	endif
  1552  00110A  0008               	tblrd		*
  1553  00110C  50F5               	movf	tablat,w,c
  1554  00110E  ECDF  F017         	call	_isdigit
  1555  001112  A0D8               	btfss	status,0,c
  1556  001114  D032               	goto	u2740
  1557                           
  1558                           ;doprnt.c: 598: width = 0;
  1559  001116  0E00               	movlw	0
  1560  001118  6E59               	movwf	sprintf@width+1,c
  1561  00111A  0E00               	movlw	0
  1562  00111C  6E58               	movwf	sprintf@width,c
  1563  00111E                     
  1564                           ;doprnt.c: 600: width *= 10;
  1565  00111E  C058  F00F         	movff	sprintf@width,___wmul@multiplier
  1566  001122  C059  F010         	movff	sprintf@width+1,___wmul@multiplier+1
  1567  001126  0E00               	movlw	0
  1568  001128  6E12               	movwf	___wmul@multiplicand+1,c
  1569  00112A  0E0A               	movlw	10
  1570  00112C  6E11               	movwf	___wmul@multiplicand,c
  1571  00112E  EC72  F017         	call	___wmul	;wreg free
  1572  001132  C00F  F058         	movff	?___wmul,sprintf@width
  1573  001136  C010  F059         	movff	?___wmul+1,sprintf@width+1
  1574                           
  1575                           ;doprnt.c: 601: width += *f++ - '0';
  1576  00113A  0ED0               	movlw	208
  1577  00113C  6E47               	movwf	??_sprintf& (0+255),c
  1578  00113E  0EFF               	movlw	255
  1579  001140  6E48               	movwf	(??_sprintf+1)& (0+255),c
  1580  001142  C042  FFF6         	movff	sprintf@f,tblptrl
  1581  001146  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1582  00114A                     	if	0	;tblptru may be non-zero
  1583  00114A                     	endif
  1584  00114A                     	if	0	;tblptru may be non-zero
  1585  00114A                     	endif
  1586  00114A  0008               	tblrd		*
  1587  00114C  50F5               	movf	tablat,w,c
  1588  00114E  6E49               	movwf	(??_sprintf+2)& (0+255),c
  1589  001150  6A4A               	clrf	(??_sprintf+3)& (0+255),c
  1590  001152  5047               	movf	??_sprintf,w,c
  1591  001154  2649               	addwf	??_sprintf+2,f,c
  1592  001156  5048               	movf	??_sprintf+1,w,c
  1593  001158  224A               	addwfc	??_sprintf+3,f,c
  1594  00115A  5049               	movf	??_sprintf+2,w,c
  1595  00115C  2658               	addwf	sprintf@width,f,c
  1596  00115E  504A               	movf	??_sprintf+3,w,c
  1597  001160  2259               	addwfc	sprintf@width+1,f,c
  1598  001162  4A42               	infsnz	sprintf@f,f,c
  1599  001164  2A43               	incf	sprintf@f+1,f,c
  1600                           
  1601                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1602  001166  C042  FFF6         	movff	sprintf@f,tblptrl
  1603  00116A  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1604  00116E                     	if	0	;tblptru may be non-zero
  1605  00116E                     	endif
  1606  00116E                     	if	0	;tblptru may be non-zero
  1607  00116E                     	endif
  1608  00116E  0008               	tblrd		*
  1609  001170  50F5               	movf	tablat,w,c
  1610  001172  ECDF  F017         	call	_isdigit
  1611  001176  B0D8               	btfsc	status,0,c
  1612  001178  D7D2               	goto	l260
  1613  00117A                     u2740:
  1614                           
  1615                           ;doprnt.c: 608: }
  1616                           ;doprnt.c: 611: if(*f == '.') {
  1617  00117A  C042  FFF6         	movff	sprintf@f,tblptrl
  1618  00117E  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1619  001182                     	if	0	;tblptru may be non-zero
  1620  001182                     	endif
  1621  001182                     	if	0	;tblptru may be non-zero
  1622  001182                     	endif
  1623  001182  0008               	tblrd		*
  1624  001184  50F5               	movf	tablat,w,c
  1625  001186  0A2E               	xorlw	46
  1626  001188  A4D8               	btfss	status,2,c
  1627  00118A  D02E               	goto	l262
  1628                           
  1629                           ;doprnt.c: 612: flag |= 0x4000;
  1630  00118C  8C57               	bsf	sprintf@flag+1,6,c
  1631                           
  1632                           ;doprnt.c: 613: f++;
  1633  00118E  4A42               	infsnz	sprintf@f,f,c
  1634  001190  2A43               	incf	sprintf@f+1,f,c
  1635                           
  1636                           ;doprnt.c: 620: {
  1637                           ;doprnt.c: 621: prec = 0;
  1638  001192  0E00               	movlw	0
  1639  001194  6E64               	movwf	sprintf@prec+1,c
  1640  001196  0E00               	movlw	0
  1641  001198  6E63               	movwf	sprintf@prec,c
  1642                           
  1643                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1644  00119A  D01B               	goto	l263
  1645  00119C                     
  1646                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1647  00119C  C063  F00F         	movff	sprintf@prec,___wmul@multiplier
  1648  0011A0  C064  F010         	movff	sprintf@prec+1,___wmul@multiplier+1
  1649  0011A4  0E00               	movlw	0
  1650  0011A6  6E12               	movwf	___wmul@multiplicand+1,c
  1651  0011A8  0E0A               	movlw	10
  1652  0011AA  6E11               	movwf	___wmul@multiplicand,c
  1653  0011AC  EC72  F017         	call	___wmul	;wreg free
  1654  0011B0  C042  FFF6         	movff	sprintf@f,tblptrl
  1655  0011B4  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1656  0011B8                     	if	0	;tblptru may be non-zero
  1657  0011B8                     	endif
  1658  0011B8                     	if	0	;tblptru may be non-zero
  1659  0011B8                     	endif
  1660  0011B8  0008               	tblrd		*
  1661  0011BA  50F5               	movf	tablat,w,c
  1662  0011BC  260F               	addwf	?___wmul,f,c
  1663  0011BE  0E00               	movlw	0
  1664  0011C0  2210               	addwfc	?___wmul+1,f,c
  1665  0011C2  0ED0               	movlw	208
  1666  0011C4  240F               	addwf	?___wmul,w,c
  1667  0011C6  6E63               	movwf	sprintf@prec,c
  1668  0011C8  0EFF               	movlw	255
  1669  0011CA  2010               	addwfc	?___wmul+1,w,c
  1670  0011CC  6E64               	movwf	sprintf@prec+1,c
  1671  0011CE  4A42               	infsnz	sprintf@f,f,c
  1672  0011D0  2A43               	incf	sprintf@f+1,f,c
  1673  0011D2                     l263:
  1674  0011D2  C042  FFF6         	movff	sprintf@f,tblptrl
  1675  0011D6  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1676  0011DA                     	if	0	;tblptru may be non-zero
  1677  0011DA                     	endif
  1678  0011DA                     	if	0	;tblptru may be non-zero
  1679  0011DA                     	endif
  1680  0011DA  0008               	tblrd		*
  1681  0011DC  50F5               	movf	tablat,w,c
  1682  0011DE  ECDF  F017         	call	_isdigit
  1683  0011E2  A0D8               	btfss	status,0,c
  1684  0011E4  D009               	goto	l267
  1685  0011E6  D7DA               	goto	l264
  1686  0011E8                     l262:
  1687                           
  1688                           ;doprnt.c: 626: prec = 0;
  1689  0011E8  0E00               	movlw	0
  1690  0011EA  6E64               	movwf	sprintf@prec+1,c
  1691  0011EC  0E00               	movlw	0
  1692  0011EE  6E63               	movwf	sprintf@prec,c
  1693                           
  1694                           ;doprnt.c: 628: flag |= 0x1000;
  1695  0011F0  8857               	bsf	sprintf@flag+1,4,c
  1696                           
  1697                           ;doprnt.c: 630: }
  1698                           ;doprnt.c: 635: switch(c = *f++) {
  1699  0011F2  D002               	goto	l267
  1700  0011F4                     
  1701                           ;doprnt.c: 663: flag |= 0x400;
  1702  0011F4  8457               	bsf	sprintf@flag+1,2,c
  1703                           
  1704                           ;doprnt.c: 664: break;
  1705  0011F6  D011               	goto	l271
  1706  0011F8                     l267:
  1707  0011F8  C042  FFF6         	movff	sprintf@f,tblptrl
  1708  0011FC  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1709  001200  4A42               	infsnz	sprintf@f,f,c
  1710  001202  2A43               	incf	sprintf@f+1,f,c
  1711  001204                     	if	0	;tblptru may be non-zero
  1712  001204                     	endif
  1713  001204                     	if	0	;tblptru may be non-zero
  1714  001204                     	endif
  1715  001204  0008               	tblrd		*
  1716  001206  CFF5 F065          	movff	tablat,sprintf@c
  1717  00120A  5065               	movf	sprintf@c,w,c
  1718                           
  1719                           ; Switch size 1, requested type "space"
  1720                           ; Number of cases is 2, Range of values is 0 to 102
  1721                           ; switch strategies available:
  1722                           ; Name         Instructions Cycles
  1723                           ; simple_byte            7     4 (average)
  1724                           ;	Chosen strategy is simple_byte
  1725  00120C  0A00               	xorlw	0	; case 0
  1726  00120E  B4D8               	btfsc	status,2,c
  1727  001210  D38E               	goto	u3160
  1728  001212  0A66               	xorlw	102	; case 102
  1729  001214  B4D8               	btfsc	status,2,c
  1730  001216  D7EE               	goto	l270
  1731  001218  D37D               	goto	l329
  1732  00121A                     l271:
  1733                           
  1734                           ;doprnt.c: 825: if(flag & (0x700)) {
  1735  00121A  0E07               	movlw	7
  1736  00121C  1457               	andwf	sprintf@flag+1,w,c
  1737  00121E  B4D8               	btfsc	status,2,c
  1738  001220  D2EE               	goto	l273
  1739                           
  1740                           ;doprnt.c: 827: if(flag & 0x1000)
  1741  001222  A857               	btfss	sprintf@flag+1,4,c
  1742  001224  D004               	goto	l274
  1743                           
  1744                           ;doprnt.c: 829: prec = 6;
  1745  001226  0E00               	movlw	0
  1746  001228  6E64               	movwf	sprintf@prec+1,c
  1747  00122A  0E06               	movlw	6
  1748  00122C  6E63               	movwf	sprintf@prec,c
  1749  00122E                     l274:
  1750                           
  1751                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1752  00122E  C050  FFD9         	movff	sprintf@ap,fsr2l
  1753  001232  C051  FFDA         	movff	sprintf@ap+1,fsr2h
  1754  001236  CFDE F060          	movff	postinc2,sprintf@fval
  1755  00123A  CFDE F061          	movff	postinc2,sprintf@fval+1
  1756  00123E  CFDD F062          	movff	postdec2,sprintf@fval+2
  1757  001242  0E03               	movlw	3
  1758  001244  2650               	addwf	sprintf@ap,f,c
  1759  001246  0E00               	movlw	0
  1760  001248  2251               	addwfc	sprintf@ap+1,f,c
  1761                           
  1762                           ;doprnt.c: 831: if(fval < 0.0) {
  1763  00124A  AE62               	btfss	sprintf@fval+2,7,c
  1764  00124C  D010               	goto	l275
  1765                           
  1766                           ;doprnt.c: 832: fval = -fval;
  1767  00124E  C060  F001         	movff	sprintf@fval,___ftneg@f1
  1768  001252  C061  F002         	movff	sprintf@fval+1,___ftneg@f1+1
  1769  001256  C062  F003         	movff	sprintf@fval+2,___ftneg@f1+2
  1770  00125A  ECBC  F017         	call	___ftneg	;wreg free
  1771  00125E  C001  F060         	movff	?___ftneg,sprintf@fval
  1772  001262  C002  F061         	movff	?___ftneg+1,sprintf@fval+1
  1773  001266  C003  F062         	movff	?___ftneg+2,sprintf@fval+2
  1774                           
  1775                           ;doprnt.c: 833: flag |= 0x03;
  1776  00126A  0E03               	movlw	3
  1777  00126C  1256               	iorwf	sprintf@flag,f,c
  1778  00126E                     l275:
  1779                           
  1780                           ;doprnt.c: 834: }
  1781                           ;doprnt.c: 835: exp = 0;
  1782  00126E  0E00               	movlw	0
  1783  001270  6E5F               	movwf	sprintf@exp+1,c
  1784  001272  0E00               	movlw	0
  1785  001274  6E5E               	movwf	sprintf@exp,c
  1786                           
  1787                           ;doprnt.c: 836: if( fval!=0) {
  1788  001276  5060               	movf	sprintf@fval,w,c
  1789  001278  1061               	iorwf	sprintf@fval+1,w,c
  1790  00127A  1062               	iorwf	sprintf@fval+2,w,c
  1791  00127C  B4D8               	btfsc	status,2,c
  1792  00127E  D083               	goto	l280
  1793                           
  1794                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1795  001280  0E82               	movlw	130
  1796  001282  6E47               	movwf	??_sprintf& (0+255),c
  1797  001284  0EFF               	movlw	255
  1798  001286  6E48               	movwf	(??_sprintf+1)& (0+255),c
  1799  001288  C060  F049         	movff	sprintf@fval,??_sprintf+2
  1800  00128C  C061  F04A         	movff	sprintf@fval+1,??_sprintf+3
  1801  001290  C062  F04B         	movff	sprintf@fval+2,??_sprintf+4
  1802  001294  C063  F04C         	movff	sprintf@fval+3,??_sprintf+5
  1803  001298  0E10               	movlw	16
  1804  00129A  D005               	goto	u2810
  1805  00129C                     u2815:
  1806  00129C  90D8               	bcf	status,0,c
  1807  00129E  324C               	rrcf	??_sprintf+5,f,c
  1808  0012A0  324B               	rrcf	??_sprintf+4,f,c
  1809  0012A2  324A               	rrcf	??_sprintf+3,f,c
  1810  0012A4  3249               	rrcf	??_sprintf+2,f,c
  1811  0012A6                     u2810:
  1812  0012A6  2EE8               	decfsz	wreg,f,c
  1813  0012A8  D7F9               	goto	u2815
  1814  0012AA  5049               	movf	??_sprintf+2,w,c
  1815  0012AC  2447               	addwf	??_sprintf,w,c
  1816  0012AE  6E5E               	movwf	sprintf@exp,c
  1817  0012B0  0E00               	movlw	0
  1818  0012B2  2048               	addwfc	??_sprintf+1,w,c
  1819  0012B4  6E5F               	movwf	sprintf@exp+1,c
  1820                           
  1821                           ;doprnt.c: 838: exp--;
  1822  0012B6  065E               	decf	sprintf@exp,f,c
  1823  0012B8  A0D8               	btfss	status,0,c
  1824  0012BA  065F               	decf	sprintf@exp+1,f,c
  1825                           
  1826                           ;doprnt.c: 839: exp *= 3;
  1827  0012BC  C05E  F00F         	movff	sprintf@exp,___wmul@multiplier
  1828  0012C0  C05F  F010         	movff	sprintf@exp+1,___wmul@multiplier+1
  1829  0012C4  0E00               	movlw	0
  1830  0012C6  6E12               	movwf	___wmul@multiplicand+1,c
  1831  0012C8  0E03               	movlw	3
  1832  0012CA  6E11               	movwf	___wmul@multiplicand,c
  1833  0012CC  EC72  F017         	call	___wmul	;wreg free
  1834  0012D0  C00F  F05E         	movff	?___wmul,sprintf@exp
  1835  0012D4  C010  F05F         	movff	?___wmul+1,sprintf@exp+1
  1836                           
  1837                           ;doprnt.c: 840: exp /= 10;
  1838  0012D8  C05E  F007         	movff	sprintf@exp,___awdiv@dividend
  1839  0012DC  C05F  F008         	movff	sprintf@exp+1,___awdiv@dividend+1
  1840  0012E0  0E00               	movlw	0
  1841  0012E2  6E0A               	movwf	___awdiv@divisor+1,c
  1842  0012E4  0E0A               	movlw	10
  1843  0012E6  6E09               	movwf	___awdiv@divisor,c
  1844  0012E8  EC97  F014         	call	___awdiv	;wreg free
  1845  0012EC  C007  F05E         	movff	?___awdiv,sprintf@exp
  1846  0012F0  C008  F05F         	movff	?___awdiv+1,sprintf@exp+1
  1847                           
  1848                           ;doprnt.c: 841: if(exp < 0)
  1849  0012F4  AE5F               	btfss	sprintf@exp+1,7,c
  1850  0012F6  D003               	goto	l277
  1851                           
  1852                           ;doprnt.c: 842: exp--;
  1853  0012F8  065E               	decf	sprintf@exp,f,c
  1854  0012FA  A0D8               	btfss	status,0,c
  1855  0012FC  065F               	decf	sprintf@exp+1,f,c
  1856  0012FE                     l277:
  1857                           
  1858                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1859  0012FE  505E               	movf	sprintf@exp,w,c
  1860  001300  0800               	sublw	0
  1861  001302  EC9E  F00C         	call	_scale
  1862  001306  C024  F05A         	movff	?_scale,sprintf@tmpval
  1863  00130A  C025  F05B         	movff	?_scale+1,sprintf@tmpval+1
  1864  00130E  C026  F05C         	movff	?_scale+2,sprintf@tmpval+2
  1865                           
  1866                           ;doprnt.c: 847: tmpval.integ *= fval;
  1867  001312  C05A  F015         	movff	sprintf@tmpval,___ftmul@f1
  1868  001316  C05B  F016         	movff	sprintf@tmpval+1,___ftmul@f1+1
  1869  00131A  C05C  F017         	movff	sprintf@tmpval+2,___ftmul@f1+2
  1870  00131E  C060  F018         	movff	sprintf@fval,___ftmul@f2
  1871  001322  C061  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  1872  001326  C062  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  1873  00132A  ECCE  F011         	call	___ftmul	;wreg free
  1874  00132E  C015  F05A         	movff	?___ftmul,sprintf@tmpval
  1875  001332  C016  F05B         	movff	?___ftmul+1,sprintf@tmpval+1
  1876  001336  C017  F05C         	movff	?___ftmul+2,sprintf@tmpval+2
  1877                           
  1878                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1879  00133A  C05A  F001         	movff	sprintf@tmpval,___ftge@ff1
  1880  00133E  C05B  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1881  001342  C05C  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1882  001346  0E00               	movlw	0
  1883  001348  6E04               	movwf	___ftge@ff2,c
  1884  00134A  0E80               	movlw	128
  1885  00134C  6E05               	movwf	___ftge@ff2+1,c
  1886  00134E  0E3F               	movlw	63
  1887  001350  6E06               	movwf	___ftge@ff2+2,c
  1888  001352  EC4F  F014         	call	___ftge	;wreg free
  1889  001356  B0D8               	btfsc	status,0,c
  1890  001358  D004               	goto	l278
  1891                           
  1892                           ;doprnt.c: 849: exp--;
  1893  00135A  065E               	decf	sprintf@exp,f,c
  1894  00135C  A0D8               	btfss	status,0,c
  1895  00135E  065F               	decf	sprintf@exp+1,f,c
  1896  001360  D012               	goto	l280
  1897  001362                     l278:
  1898                           
  1899                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1900  001362  C05A  F001         	movff	sprintf@tmpval,___ftge@ff1
  1901  001366  C05B  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1902  00136A  C05C  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1903  00136E  0E00               	movlw	0
  1904  001370  6E04               	movwf	___ftge@ff2,c
  1905  001372  0E20               	movlw	32
  1906  001374  6E05               	movwf	___ftge@ff2+1,c
  1907  001376  0E41               	movlw	65
  1908  001378  6E06               	movwf	___ftge@ff2+2,c
  1909  00137A  EC4F  F014         	call	___ftge	;wreg free
  1910  00137E  A0D8               	btfss	status,0,c
  1911  001380  D002               	goto	l280
  1912                           
  1913                           ;doprnt.c: 851: exp++;
  1914  001382  4A5E               	infsnz	sprintf@exp,f,c
  1915  001384  2A5F               	incf	sprintf@exp+1,f,c
  1916  001386                     l280:
  1917                           
  1918                           ;doprnt.c: 852: }
  1919                           ;doprnt.c: 1112: if(prec <= 12)
  1920  001386  BE64               	btfsc	sprintf@prec+1,7,c
  1921  001388  D006               	goto	u2850
  1922  00138A  5064               	movf	sprintf@prec+1,w,c
  1923  00138C  E11B               	bnz	l2954
  1924  00138E  0E0D               	movlw	13
  1925  001390  5C63               	subwf	sprintf@prec,w,c
  1926  001392  B0D8               	btfsc	status,0,c
  1927  001394  D017               	goto	l281
  1928  001396                     u2850:
  1929                           
  1930                           ;doprnt.c: 1113: fval += fround(prec);
  1931  001396  C060  F02E         	movff	sprintf@fval,___ftadd@f1
  1932  00139A  C061  F02F         	movff	sprintf@fval+1,___ftadd@f1+1
  1933  00139E  C062  F030         	movff	sprintf@fval+2,___ftadd@f1+2
  1934  0013A2  5063               	movf	sprintf@prec,w,c
  1935  0013A4  ECA2  F00E         	call	_fround
  1936  0013A8  C024  F031         	movff	?_fround,___ftadd@f2
  1937  0013AC  C025  F032         	movff	?_fround+1,___ftadd@f2+1
  1938  0013B0  C026  F033         	movff	?_fround+2,___ftadd@f2+2
  1939  0013B4  ECCB  F00F         	call	___ftadd	;wreg free
  1940  0013B8  C02E  F060         	movff	?___ftadd,sprintf@fval
  1941  0013BC  C02F  F061         	movff	?___ftadd+1,sprintf@fval+1
  1942  0013C0  C030  F062         	movff	?___ftadd+2,sprintf@fval+2
  1943  0013C4                     l281:
  1944  0013C4                     l2954:
  1945                           
  1946                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1947  0013C4  BE5F               	btfsc	sprintf@exp+1,7,c
  1948  0013C6  D006               	goto	u2860
  1949  0013C8  505F               	movf	sprintf@exp+1,w,c
  1950  0013CA  E11E               	bnz	l2962
  1951  0013CC  0E0A               	movlw	10
  1952  0013CE  5C5E               	subwf	sprintf@exp,w,c
  1953  0013D0  B0D8               	btfsc	status,0,c
  1954  0013D2  D01A               	goto	u2890
  1955  0013D4                     u2860:
  1956  0013D4  5060               	movf	sprintf@fval,w,c
  1957  0013D6  1061               	iorwf	sprintf@fval+1,w,c
  1958  0013D8  1062               	iorwf	sprintf@fval+2,w,c
  1959  0013DA  B4D8               	btfsc	status,2,c
  1960  0013DC  D051               	goto	l282
  1961  0013DE  C060  F02B         	movff	sprintf@fval,___fttol@f1
  1962  0013E2  C061  F02C         	movff	sprintf@fval+1,___fttol@f1+1
  1963  0013E6  C062  F02D         	movff	sprintf@fval+2,___fttol@f1+2
  1964  0013EA  EC48  F012         	call	___fttol	;wreg free
  1965  0013EE  502B               	movf	?___fttol,w,c
  1966  0013F0  102C               	iorwf	?___fttol+1,w,c
  1967  0013F2  102D               	iorwf	?___fttol+2,w,c
  1968  0013F4  102E               	iorwf	?___fttol+3,w,c
  1969  0013F6  B4D8               	btfsc	status,2,c
  1970  0013F8  BE5F               	btfsc	sprintf@exp+1,7,c
  1971  0013FA  D042               	goto	l282
  1972  0013FC  505F               	movf	sprintf@exp+1,w,c
  1973  0013FE  E104               	bnz	l2962
  1974  001400  0E02               	movlw	2
  1975  001402  5C5E               	subwf	sprintf@exp,w,c
  1976  001404  A0D8               	btfss	status,0,c
  1977  001406  D03C               	goto	l282
  1978  001408                     u2890:
  1979  001408                     l2962:
  1980                           
  1981                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  1982  001408  C05A  F001         	movff	sprintf@tmpval,___ftge@ff1
  1983  00140C  C05B  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1984  001410  C05C  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1985  001414  0E70               	movlw	112
  1986  001416  6E04               	movwf	___ftge@ff2,c
  1987  001418  0E89               	movlw	137
  1988  00141A  6E05               	movwf	___ftge@ff2+1,c
  1989  00141C  0E40               	movlw	64
  1990  00141E  6E06               	movwf	___ftge@ff2+2,c
  1991  001420  EC4F  F014         	call	___ftge	;wreg free
  1992  001424  B0D8               	btfsc	status,0,c
  1993  001426  D002               	goto	l285
  1994                           
  1995                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  1996  001428  0EF7               	movlw	247
  1997  00142A  D001               	goto	L1
  1998  00142C                     l285:
  1999                           
  2000                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2001  00142C  0EF8               	movlw	248
  2002  00142E                     L1:
  2003  00142E  265E               	addwf	sprintf@exp,f,c
  2004  001430  0EFF               	movlw	255
  2005  001432  225F               	addwfc	sprintf@exp+1,f,c
  2006                           
  2007                           ;doprnt.c: 1124: }
  2008                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  2009  001434  505E               	movf	sprintf@exp,w,c
  2010  001436  EC9E  F00C         	call	_scale
  2011  00143A  C024  F05A         	movff	?_scale,sprintf@tmpval
  2012  00143E  C025  F05B         	movff	?_scale+1,sprintf@tmpval+1
  2013  001442  C026  F05C         	movff	?_scale+2,sprintf@tmpval+2
  2014                           
  2015                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2016  001446  C060  F001         	movff	sprintf@fval,__tdiv_to_l_@f1
  2017  00144A  C061  F002         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  2018  00144E  C062  F003         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  2019  001452  C05A  F004         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  2020  001456  C05B  F005         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  2021  00145A  C05C  F006         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  2022  00145E  ECA1  F010         	call	__tdiv_to_l_	;wreg free
  2023  001462  C001  F052         	movff	?__tdiv_to_l_,sprintf@val
  2024  001466  C002  F053         	movff	?__tdiv_to_l_+1,sprintf@val+1
  2025  00146A  C003  F054         	movff	?__tdiv_to_l_+2,sprintf@val+2
  2026  00146E  C004  F055         	movff	?__tdiv_to_l_+3,sprintf@val+3
  2027                           
  2028                           ;doprnt.c: 1129: fval = 0.0;
  2029  001472  0E00               	movlw	0
  2030  001474  6E60               	movwf	sprintf@fval,c
  2031  001476  0E00               	movlw	0
  2032  001478  6E61               	movwf	sprintf@fval+1,c
  2033  00147A  0E00               	movlw	0
  2034  00147C  6E62               	movwf	sprintf@fval+2,c
  2035                           
  2036                           ;doprnt.c: 1130: } else {
  2037  00147E  D032               	goto	l291
  2038  001480                     l282:
  2039                           
  2040                           ;doprnt.c: 1131: val = (unsigned long)fval;
  2041  001480  C060  F02B         	movff	sprintf@fval,___fttol@f1
  2042  001484  C061  F02C         	movff	sprintf@fval+1,___fttol@f1+1
  2043  001488  C062  F02D         	movff	sprintf@fval+2,___fttol@f1+2
  2044  00148C  EC48  F012         	call	___fttol	;wreg free
  2045  001490  C02B  F052         	movff	?___fttol,sprintf@val
  2046  001494  C02C  F053         	movff	?___fttol+1,sprintf@val+1
  2047  001498  C02D  F054         	movff	?___fttol+2,sprintf@val+2
  2048  00149C  C02E  F055         	movff	?___fttol+3,sprintf@val+3
  2049                           
  2050                           ;doprnt.c: 1132: fval -= (double)val;
  2051  0014A0  C060  F03A         	movff	sprintf@fval,___ftsub@f1
  2052  0014A4  C061  F03B         	movff	sprintf@fval+1,___ftsub@f1+1
  2053  0014A8  C062  F03C         	movff	sprintf@fval+2,___ftsub@f1+2
  2054  0014AC  C052  F009         	movff	sprintf@val,___lltoft@c
  2055  0014B0  C053  F00A         	movff	sprintf@val+1,___lltoft@c+1
  2056  0014B4  C054  F00B         	movff	sprintf@val+2,___lltoft@c+2
  2057  0014B8  C055  F00C         	movff	sprintf@val+3,___lltoft@c+3
  2058  0014BC  ECB6  F015         	call	___lltoft	;wreg free
  2059  0014C0  C009  F03D         	movff	?___lltoft,___ftsub@f2
  2060  0014C4  C00A  F03E         	movff	?___lltoft+1,___ftsub@f2+1
  2061  0014C8  C00B  F03F         	movff	?___lltoft+2,___ftsub@f2+2
  2062  0014CC  EC7F  F016         	call	___ftsub	;wreg free
  2063  0014D0  C03A  F060         	movff	?___ftsub,sprintf@fval
  2064  0014D4  C03B  F061         	movff	?___ftsub+1,sprintf@fval+1
  2065  0014D8  C03C  F062         	movff	?___ftsub+2,sprintf@fval+2
  2066                           
  2067                           ;doprnt.c: 1133: exp = 0;
  2068  0014DC  0E00               	movlw	0
  2069  0014DE  6E5F               	movwf	sprintf@exp+1,c
  2070  0014E0  0E00               	movlw	0
  2071  0014E2  6E5E               	movwf	sprintf@exp,c
  2072  0014E4                     l291:
  2073                           
  2074                           ;doprnt.c: 1134: }
  2075                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2076  0014E4  0E01               	movlw	1
  2077  0014E6  6E65               	movwf	sprintf@c,c
  2078  0014E8                     l2982:
  2079  0014E8  0E0A               	movlw	10
  2080  0014EA  1865               	xorwf	sprintf@c,w,c
  2081  0014EC  B4D8               	btfsc	status,2,c
  2082  0014EE  D018               	goto	u2930
  2083                           
  2084                           ;doprnt.c: 1137: if(val < dpowers[c])
  2085  0014F0  5065               	movf	sprintf@c,w,c
  2086  0014F2  0D04               	mullw	4
  2087  0014F4  0E01               	movlw	low _dpowers
  2088  0014F6  24F3               	addwf	prodl,w,c
  2089  0014F8  6EF6               	movwf	tblptrl,c
  2090  0014FA  0E10               	movlw	high _dpowers
  2091  0014FC  20F4               	addwfc	prodh,w,c
  2092  0014FE  6EF7               	movwf	tblptrh,c
  2093  001500                     	if	0	;There are less than 3 active tblptr bytes
  2094  001500                     	endif
  2095  001500  0009               	tblrd		*+
  2096  001502  50F5               	movf	tablat,w,c
  2097  001504  5C52               	subwf	sprintf@val,w,c
  2098  001506  0009               	tblrd		*+
  2099  001508  50F5               	movf	tablat,w,c
  2100  00150A  5853               	subwfb	sprintf@val+1,w,c
  2101  00150C  0009               	tblrd		*+
  2102  00150E  50F5               	movf	tablat,w,c
  2103  001510  5854               	subwfb	sprintf@val+2,w,c
  2104  001512  0009               	tblrd		*+
  2105  001514  50F5               	movf	tablat,w,c
  2106  001516  5855               	subwfb	sprintf@val+3,w,c
  2107  001518  A0D8               	btfss	status,0,c
  2108  00151A  D002               	goto	u2930
  2109                           
  2110                           ;doprnt.c: 1138: break;
  2111  00151C  2A65               	incf	sprintf@c,f,c
  2112  00151E  D7E4               	goto	l2982
  2113  001520                     u2930:
  2114                           
  2115                           ;doprnt.c: 1142: width -= prec + c + exp;
  2116  001520  C065  F047         	movff	sprintf@c,??_sprintf
  2117  001524  6A48               	clrf	(??_sprintf+1)& (0+255),c
  2118  001526  BE47               	btfsc	??_sprintf& (0+255),7,c
  2119  001528  0648               	decf	(??_sprintf+1)& (0+255),f,c
  2120  00152A  5063               	movf	sprintf@prec,w,c
  2121  00152C  2647               	addwf	??_sprintf,f,c
  2122  00152E  5064               	movf	sprintf@prec+1,w,c
  2123  001530  2248               	addwfc	??_sprintf+1,f,c
  2124  001532  505E               	movf	sprintf@exp,w,c
  2125  001534  2647               	addwf	??_sprintf,f,c
  2126  001536  505F               	movf	sprintf@exp+1,w,c
  2127  001538  2248               	addwfc	??_sprintf+1,f,c
  2128  00153A  5047               	movf	??_sprintf,w,c
  2129  00153C  5E58               	subwf	sprintf@width,f,c
  2130  00153E  5048               	movf	??_sprintf+1,w,c
  2131  001540  5A59               	subwfb	sprintf@width+1,f,c
  2132                           
  2133                           ;doprnt.c: 1143: if(
  2134                           ;doprnt.c: 1147: prec)
  2135  001542  5063               	movf	sprintf@prec,w,c
  2136  001544  1064               	iorwf	sprintf@prec+1,w,c
  2137  001546  B4D8               	btfsc	status,2,c
  2138  001548  D003               	goto	l295
  2139                           
  2140                           ;doprnt.c: 1148: width--;
  2141  00154A  0658               	decf	sprintf@width,f,c
  2142  00154C  A0D8               	btfss	status,0,c
  2143  00154E  0659               	decf	sprintf@width+1,f,c
  2144  001550                     l295:
  2145                           
  2146                           ;doprnt.c: 1149: if(flag & 0x03)
  2147  001550  0E03               	movlw	3
  2148  001552  1456               	andwf	sprintf@flag,w,c
  2149  001554  6E47               	movwf	??_sprintf& (0+255),c
  2150  001556  0E00               	movlw	0
  2151  001558  1457               	andwf	sprintf@flag+1,w,c
  2152  00155A  6E48               	movwf	(??_sprintf+1)& (0+255),c
  2153  00155C  5047               	movf	??_sprintf,w,c
  2154  00155E  1048               	iorwf	??_sprintf+1,w,c
  2155  001560  B4D8               	btfsc	status,2,c
  2156  001562  D00C               	goto	l297
  2157  001564  D008               	goto	l3006
  2158  001566                     l3002:
  2159                           
  2160                           ;doprnt.c: 1181: ((*sp++ = (' ')));
  2161  001566  C040  FFD9         	movff	sprintf@sp,fsr2l
  2162  00156A  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2163  00156E  0E20               	movlw	32
  2164  001570  6EDF               	movwf	indf2,c
  2165  001572  4A40               	infsnz	sprintf@sp,f,c
  2166  001574  2A41               	incf	sprintf@sp+1,f,c
  2167  001576                     l3006:
  2168                           
  2169                           ;doprnt.c: 1182: width--;
  2170  001576  0658               	decf	sprintf@width,f,c
  2171  001578  A0D8               	btfss	status,0,c
  2172  00157A  0659               	decf	sprintf@width+1,f,c
  2173  00157C                     l297:
  2174  00157C  BE59               	btfsc	sprintf@width+1,7,c
  2175  00157E  D005               	goto	u2960
  2176  001580  5059               	movf	sprintf@width+1,w,c
  2177  001582  E1F1               	bnz	l3002
  2178  001584  0458               	decf	sprintf@width,w,c
  2179  001586  B0D8               	btfsc	status,0,c
  2180  001588  D7EE               	goto	l298
  2181  00158A                     u2960:
  2182                           
  2183                           ;doprnt.c: 1183: }
  2184                           ;doprnt.c: 1188: if(flag & 0x03)
  2185  00158A  0E03               	movlw	3
  2186  00158C  1456               	andwf	sprintf@flag,w,c
  2187  00158E  6E47               	movwf	??_sprintf& (0+255),c
  2188  001590  0E00               	movlw	0
  2189  001592  1457               	andwf	sprintf@flag+1,w,c
  2190  001594  6E48               	movwf	(??_sprintf+1)& (0+255),c
  2191  001596  5047               	movf	??_sprintf,w,c
  2192  001598  1048               	iorwf	??_sprintf+1,w,c
  2193  00159A  B4D8               	btfsc	status,2,c
  2194  00159C  D04F               	goto	l301
  2195                           
  2196                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  2197  00159E  C040  FFD9         	movff	sprintf@sp,fsr2l
  2198  0015A2  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2199  0015A6  0E2D               	movlw	45
  2200  0015A8  D046               	goto	L2
  2201  0015AA                     
  2202                           ;doprnt.c: 1200: {
  2203                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  2204  0015AA  C052  F001         	movff	sprintf@val,___lldiv@dividend
  2205  0015AE  C053  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  2206  0015B2  C054  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  2207  0015B6  C055  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  2208  0015BA  5065               	movf	sprintf@c,w,c
  2209  0015BC  0D04               	mullw	4
  2210  0015BE  0E01               	movlw	low _dpowers
  2211  0015C0  24F3               	addwf	prodl,w,c
  2212  0015C2  6EF6               	movwf	tblptrl,c
  2213  0015C4  0E10               	movlw	high _dpowers
  2214  0015C6  20F4               	addwfc	prodh,w,c
  2215  0015C8  6EF7               	movwf	tblptrh,c
  2216  0015CA                     	if	0	;There are less than 3 active tblptr bytes
  2217  0015CA                     	endif
  2218  0015CA  0009               	tblrd		*+
  2219  0015CC  CFF5 F005          	movff	tablat,___lldiv@divisor
  2220  0015D0  0009               	tblrd		*+
  2221  0015D2  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2222  0015D6  0009               	tblrd		*+
  2223  0015D8  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2224  0015DC  000A               	tblrd		*-
  2225  0015DE  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2226  0015E2  ECD9  F014         	call	___lldiv	;wreg free
  2227  0015E6  C001  F05A         	movff	?___lldiv,sprintf@tmpval
  2228  0015EA  C002  F05B         	movff	?___lldiv+1,sprintf@tmpval+1
  2229  0015EE  C003  F05C         	movff	?___lldiv+2,sprintf@tmpval+2
  2230  0015F2  C004  F05D         	movff	?___lldiv+3,sprintf@tmpval+3
  2231                           
  2232                           ;doprnt.c: 1202: tmpval.vd %= 10;
  2233  0015F6  C05A  F001         	movff	sprintf@tmpval,___llmod@dividend
  2234  0015FA  C05B  F002         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2235  0015FE  C05C  F003         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2236  001602  C05D  F004         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2237  001606  0E0A               	movlw	10
  2238  001608  6E05               	movwf	___llmod@divisor,c
  2239  00160A  0E00               	movlw	0
  2240  00160C  6E06               	movwf	___llmod@divisor+1,c
  2241  00160E  0E00               	movlw	0
  2242  001610  6E07               	movwf	___llmod@divisor+2,c
  2243  001612  0E00               	movlw	0
  2244  001614  6E08               	movwf	___llmod@divisor+3,c
  2245  001616  EC52  F015         	call	___llmod	;wreg free
  2246  00161A  C001  F05A         	movff	?___llmod,sprintf@tmpval
  2247  00161E  C002  F05B         	movff	?___llmod+1,sprintf@tmpval+1
  2248  001622  C003  F05C         	movff	?___llmod+2,sprintf@tmpval+2
  2249  001626  C004  F05D         	movff	?___llmod+3,sprintf@tmpval+3
  2250                           
  2251                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  2252  00162A  505A               	movf	sprintf@tmpval,w,c
  2253  00162C  0F30               	addlw	48
  2254  00162E  C040  FFD9         	movff	sprintf@sp,fsr2l
  2255  001632  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2256  001636                     L2:
  2257  001636  6EDF               	movwf	indf2,c
  2258  001638  4A40               	infsnz	sprintf@sp,f,c
  2259  00163A  2A41               	incf	sprintf@sp+1,f,c
  2260  00163C                     l301:
  2261  00163C  0665               	decf	sprintf@c,f,c
  2262  00163E  2865               	incf	sprintf@c,w,c
  2263  001640  B4D8               	btfsc	status,2,c
  2264  001642  D00C               	goto	l304
  2265  001644  D7B2               	goto	l302
  2266  001646                     l3026:
  2267                           
  2268                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  2269  001646  C040  FFD9         	movff	sprintf@sp,fsr2l
  2270  00164A  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2271  00164E  0E30               	movlw	48
  2272  001650  6EDF               	movwf	indf2,c
  2273  001652  4A40               	infsnz	sprintf@sp,f,c
  2274  001654  2A41               	incf	sprintf@sp+1,f,c
  2275                           
  2276                           ;doprnt.c: 1209: exp--;
  2277  001656  065E               	decf	sprintf@exp,f,c
  2278  001658  A0D8               	btfss	status,0,c
  2279  00165A  065F               	decf	sprintf@exp+1,f,c
  2280  00165C                     l304:
  2281  00165C  BE5F               	btfsc	sprintf@exp+1,7,c
  2282  00165E  D005               	goto	u2990
  2283  001660  505F               	movf	sprintf@exp+1,w,c
  2284  001662  E1F1               	bnz	l3026
  2285  001664  045E               	decf	sprintf@exp,w,c
  2286  001666  B0D8               	btfsc	status,0,c
  2287  001668  D7EE               	goto	l305
  2288  00166A                     u2990:
  2289                           
  2290                           ;doprnt.c: 1210: }
  2291                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2292  00166A  BE64               	btfsc	sprintf@prec+1,7,c
  2293  00166C  D009               	goto	l307
  2294  00166E  5064               	movf	sprintf@prec+1,w,c
  2295  001670  E104               	bnz	u3000
  2296  001672  0E09               	movlw	9
  2297  001674  5C63               	subwf	sprintf@prec,w,c
  2298  001676  A0D8               	btfss	status,0,c
  2299  001678  D003               	goto	l307
  2300  00167A                     u3000:
  2301                           
  2302                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2303  00167A  0E08               	movlw	8
  2304  00167C  6E65               	movwf	sprintf@c,c
  2305  00167E  D002               	goto	l308
  2306  001680                     l307:
  2307                           
  2308                           ;doprnt.c: 1213: else
  2309                           ;doprnt.c: 1214: c = prec;
  2310  001680  C063  F065         	movff	sprintf@prec,sprintf@c
  2311  001684                     l308:
  2312                           
  2313                           ;doprnt.c: 1215: prec -= c;
  2314  001684  5065               	movf	sprintf@c,w,c
  2315  001686  5E63               	subwf	sprintf@prec,f,c
  2316  001688  0E00               	movlw	0
  2317  00168A  BE65               	btfsc	sprintf@c,7,c
  2318  00168C  0EFF               	movlw	255
  2319  00168E  5A64               	subwfb	sprintf@prec+1,f,c
  2320                           
  2321                           ;doprnt.c: 1219: if(c)
  2322  001690  5065               	movf	sprintf@c,w,c
  2323  001692  B4D8               	btfsc	status,2,c
  2324  001694  D008               	goto	l309
  2325                           
  2326                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  2327  001696  C040  FFD9         	movff	sprintf@sp,fsr2l
  2328  00169A  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2329  00169E  0E2E               	movlw	46
  2330  0016A0  6EDF               	movwf	indf2,c
  2331  0016A2  4A40               	infsnz	sprintf@sp,f,c
  2332  0016A4  2A41               	incf	sprintf@sp+1,f,c
  2333  0016A6                     l309:
  2334                           
  2335                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2336  0016A6  5065               	movf	sprintf@c,w,c
  2337  0016A8  EC9E  F00C         	call	_scale
  2338  0016AC  C024  F04D         	movff	?_scale,_sprintf$1117
  2339  0016B0  C025  F04E         	movff	?_scale+1,_sprintf$1117+1
  2340  0016B4  C026  F04F         	movff	?_scale+2,_sprintf$1117+2
  2341                           
  2342                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2343  0016B8  C060  F018         	movff	sprintf@fval,___ftmul@f2
  2344  0016BC  C061  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  2345  0016C0  C062  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  2346  0016C4  C04D  F015         	movff	_sprintf$1117,___ftmul@f1
  2347  0016C8  C04E  F016         	movff	_sprintf$1117+1,___ftmul@f1+1
  2348  0016CC  C04F  F017         	movff	_sprintf$1117+2,___ftmul@f1+2
  2349  0016D0  ECCE  F011         	call	___ftmul	;wreg free
  2350  0016D4  C015  F02B         	movff	?___ftmul,___fttol@f1
  2351  0016D8  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  2352  0016DC  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  2353  0016E0  EC48  F012         	call	___fttol	;wreg free
  2354  0016E4  C02B  F052         	movff	?___fttol,sprintf@val
  2355  0016E8  C02C  F053         	movff	?___fttol+1,sprintf@val+1
  2356  0016EC  C02D  F054         	movff	?___fttol+2,sprintf@val+2
  2357  0016F0  C02E  F055         	movff	?___fttol+3,sprintf@val+3
  2358                           
  2359                           ;doprnt.c: 1228: while(c--) {
  2360  0016F4  D06F               	goto	l310
  2361  0016F6                     
  2362                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  2363  0016F6  C052  F001         	movff	sprintf@val,___lldiv@dividend
  2364  0016FA  C053  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  2365  0016FE  C054  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  2366  001702  C055  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  2367  001706  5065               	movf	sprintf@c,w,c
  2368  001708  0D04               	mullw	4
  2369  00170A  0E01               	movlw	low _dpowers
  2370  00170C  24F3               	addwf	prodl,w,c
  2371  00170E  6EF6               	movwf	tblptrl,c
  2372  001710  0E10               	movlw	high _dpowers
  2373  001712  20F4               	addwfc	prodh,w,c
  2374  001714  6EF7               	movwf	tblptrh,c
  2375  001716                     	if	0	;There are less than 3 active tblptr bytes
  2376  001716                     	endif
  2377  001716  0009               	tblrd		*+
  2378  001718  CFF5 F005          	movff	tablat,___lldiv@divisor
  2379  00171C  0009               	tblrd		*+
  2380  00171E  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2381  001722  0009               	tblrd		*+
  2382  001724  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2383  001728  000A               	tblrd		*-
  2384  00172A  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2385  00172E  ECD9  F014         	call	___lldiv	;wreg free
  2386  001732  C001  F05A         	movff	?___lldiv,sprintf@tmpval
  2387  001736  C002  F05B         	movff	?___lldiv+1,sprintf@tmpval+1
  2388  00173A  C003  F05C         	movff	?___lldiv+2,sprintf@tmpval+2
  2389  00173E  C004  F05D         	movff	?___lldiv+3,sprintf@tmpval+3
  2390                           
  2391                           ;doprnt.c: 1230: tmpval.vd %= 10;
  2392  001742  C05A  F001         	movff	sprintf@tmpval,___llmod@dividend
  2393  001746  C05B  F002         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2394  00174A  C05C  F003         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2395  00174E  C05D  F004         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2396  001752  0E0A               	movlw	10
  2397  001754  6E05               	movwf	___llmod@divisor,c
  2398  001756  0E00               	movlw	0
  2399  001758  6E06               	movwf	___llmod@divisor+1,c
  2400  00175A  0E00               	movlw	0
  2401  00175C  6E07               	movwf	___llmod@divisor+2,c
  2402  00175E  0E00               	movlw	0
  2403  001760  6E08               	movwf	___llmod@divisor+3,c
  2404  001762  EC52  F015         	call	___llmod	;wreg free
  2405  001766  C001  F05A         	movff	?___llmod,sprintf@tmpval
  2406  00176A  C002  F05B         	movff	?___llmod+1,sprintf@tmpval+1
  2407  00176E  C003  F05C         	movff	?___llmod+2,sprintf@tmpval+2
  2408  001772  C004  F05D         	movff	?___llmod+3,sprintf@tmpval+3
  2409                           
  2410                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  2411  001776  505A               	movf	sprintf@tmpval,w,c
  2412  001778  0F30               	addlw	48
  2413  00177A  C040  FFD9         	movff	sprintf@sp,fsr2l
  2414  00177E  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2415  001782  6EDF               	movwf	indf2,c
  2416  001784  4A40               	infsnz	sprintf@sp,f,c
  2417  001786  2A41               	incf	sprintf@sp+1,f,c
  2418                           
  2419                           ;doprnt.c: 1232: val %= dpowers[c];
  2420  001788  C052  F001         	movff	sprintf@val,___llmod@dividend
  2421  00178C  C053  F002         	movff	sprintf@val+1,___llmod@dividend+1
  2422  001790  C054  F003         	movff	sprintf@val+2,___llmod@dividend+2
  2423  001794  C055  F004         	movff	sprintf@val+3,___llmod@dividend+3
  2424  001798  5065               	movf	sprintf@c,w,c
  2425  00179A  0D04               	mullw	4
  2426  00179C  0E01               	movlw	low _dpowers
  2427  00179E  24F3               	addwf	prodl,w,c
  2428  0017A0  6EF6               	movwf	tblptrl,c
  2429  0017A2  0E10               	movlw	high _dpowers
  2430  0017A4  20F4               	addwfc	prodh,w,c
  2431  0017A6  6EF7               	movwf	tblptrh,c
  2432  0017A8                     	if	0	;There are less than 3 active tblptr bytes
  2433  0017A8                     	endif
  2434  0017A8  0009               	tblrd		*+
  2435  0017AA  CFF5 F005          	movff	tablat,___llmod@divisor
  2436  0017AE  0009               	tblrd		*+
  2437  0017B0  CFF5 F006          	movff	tablat,___llmod@divisor+1
  2438  0017B4  0009               	tblrd		*+
  2439  0017B6  CFF5 F007          	movff	tablat,___llmod@divisor+2
  2440  0017BA  000A               	tblrd		*-
  2441  0017BC  CFF5 F008          	movff	tablat,___llmod@divisor+3
  2442  0017C0  EC52  F015         	call	___llmod	;wreg free
  2443  0017C4  C001  F052         	movff	?___llmod,sprintf@val
  2444  0017C8  C002  F053         	movff	?___llmod+1,sprintf@val+1
  2445  0017CC  C003  F054         	movff	?___llmod+2,sprintf@val+2
  2446  0017D0  C004  F055         	movff	?___llmod+3,sprintf@val+3
  2447  0017D4                     l310:
  2448  0017D4  0665               	decf	sprintf@c,f,c
  2449  0017D6  2865               	incf	sprintf@c,w,c
  2450  0017D8  B4D8               	btfsc	status,2,c
  2451  0017DA  D00C               	goto	l313
  2452  0017DC  D78C               	goto	l311
  2453  0017DE                     
  2454                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  2455  0017DE  C040  FFD9         	movff	sprintf@sp,fsr2l
  2456  0017E2  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2457  0017E6  0E30               	movlw	48
  2458  0017E8  6EDF               	movwf	indf2,c
  2459  0017EA  4A40               	infsnz	sprintf@sp,f,c
  2460  0017EC  2A41               	incf	sprintf@sp+1,f,c
  2461                           
  2462                           ;doprnt.c: 1237: prec--;
  2463  0017EE  0663               	decf	sprintf@prec,f,c
  2464  0017F0  A0D8               	btfss	status,0,c
  2465  0017F2  0664               	decf	sprintf@prec+1,f,c
  2466  0017F4                     l313:
  2467  0017F4  5063               	movf	sprintf@prec,w,c
  2468  0017F6  1064               	iorwf	sprintf@prec+1,w,c
  2469  0017F8  B4D8               	btfsc	status,2,c
  2470  0017FA  D08C               	goto	l329
  2471  0017FC  D7F0               	goto	l314
  2472  0017FE                     l273:
  2473                           
  2474                           ;doprnt.c: 1246: }
  2475                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  2476  0017FE  5063               	movf	sprintf@prec,w,c
  2477  001800  1064               	iorwf	sprintf@prec+1,w,c
  2478  001802  A4D8               	btfss	status,2,c
  2479  001804  D008               	goto	l316
  2480  001806  5052               	movf	sprintf@val,w,c
  2481  001808  1053               	iorwf	sprintf@val+1,w,c
  2482  00180A  1054               	iorwf	sprintf@val+2,w,c
  2483  00180C  1055               	iorwf	sprintf@val+3,w,c
  2484  00180E  A4D8               	btfss	status,2,c
  2485  001810  D002               	goto	l316
  2486                           
  2487                           ;doprnt.c: 1291: prec++;
  2488  001812  4A63               	infsnz	sprintf@prec,f,c
  2489  001814  2A64               	incf	sprintf@prec+1,f,c
  2490  001816                     l316:
  2491                           
  2492                           ;doprnt.c: 1339: if(c < prec)
  2493  001816  0E80               	movlw	128
  2494  001818  BE65               	btfsc	sprintf@c,7,c
  2495  00181A  0E7F               	movlw	127
  2496  00181C  6E47               	movwf	??_sprintf& (0+255),c
  2497  00181E  5063               	movf	sprintf@prec,w,c
  2498  001820  5C65               	subwf	sprintf@c,w,c
  2499  001822  5064               	movf	sprintf@prec+1,w,c
  2500  001824  0A80               	xorlw	128
  2501  001826  5847               	subwfb	??_sprintf& (0+255),w,c
  2502  001828  B0D8               	btfsc	status,0,c
  2503  00182A  D003               	goto	l317
  2504                           
  2505                           ;doprnt.c: 1340: c = prec;
  2506  00182C  C063  F065         	movff	sprintf@prec,sprintf@c
  2507  001830  D010               	goto	l319
  2508  001832                     l317:
  2509                           
  2510                           ;doprnt.c: 1341: else if(prec < c)
  2511  001832  5064               	movf	sprintf@prec+1,w,c
  2512  001834  0A80               	xorlw	128
  2513  001836  6E47               	movwf	??_sprintf& (0+255),c
  2514  001838  5065               	movf	sprintf@c,w,c
  2515  00183A  5C63               	subwf	sprintf@prec,w,c
  2516  00183C  0E80               	movlw	128
  2517  00183E  BE65               	btfsc	sprintf@c,7,c
  2518  001840  0E7F               	movlw	127
  2519  001842  5847               	subwfb	??_sprintf& (0+255),w,c
  2520  001844  B0D8               	btfsc	status,0,c
  2521  001846  D005               	goto	l319
  2522                           
  2523                           ;doprnt.c: 1342: prec = c;
  2524  001848  5065               	movf	sprintf@c,w,c
  2525  00184A  6E63               	movwf	sprintf@prec,c
  2526  00184C  6A64               	clrf	sprintf@prec+1,c
  2527  00184E  BE63               	btfsc	sprintf@prec,7,c
  2528  001850  0664               	decf	sprintf@prec+1,f,c
  2529  001852                     l319:
  2530                           
  2531                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2532  001852  5058               	movf	sprintf@width,w,c
  2533  001854  1059               	iorwf	sprintf@width+1,w,c
  2534  001856  B4D8               	btfsc	status,2,c
  2535  001858  D00D               	goto	l320
  2536  00185A  0E03               	movlw	3
  2537  00185C  1456               	andwf	sprintf@flag,w,c
  2538  00185E  6E47               	movwf	??_sprintf& (0+255),c
  2539  001860  0E00               	movlw	0
  2540  001862  1457               	andwf	sprintf@flag+1,w,c
  2541  001864  6E48               	movwf	(??_sprintf+1)& (0+255),c
  2542  001866  5047               	movf	??_sprintf,w,c
  2543  001868  1048               	iorwf	??_sprintf+1,w,c
  2544  00186A  B4D8               	btfsc	status,2,c
  2545  00186C  D003               	goto	l320
  2546                           
  2547                           ;doprnt.c: 1346: width--;
  2548  00186E  0658               	decf	sprintf@width,f,c
  2549  001870  A0D8               	btfss	status,0,c
  2550  001872  0659               	decf	sprintf@width+1,f,c
  2551  001874                     l320:
  2552                           
  2553                           ;doprnt.c: 1348: if(flag & 0x4000) {
  2554  001874  AC57               	btfss	sprintf@flag+1,6,c
  2555  001876  D013               	goto	l323
  2556                           
  2557                           ;doprnt.c: 1349: if(width > prec)
  2558  001878  5058               	movf	sprintf@width,w,c
  2559  00187A  5C63               	subwf	sprintf@prec,w,c
  2560  00187C  5064               	movf	sprintf@prec+1,w,c
  2561  00187E  0A80               	xorlw	128
  2562  001880  6E47               	movwf	??_sprintf& (0+255),c
  2563  001882  5059               	movf	sprintf@width+1,w,c
  2564  001884  0A80               	xorlw	128
  2565  001886  5847               	subwfb	??_sprintf& (0+255),w,c
  2566  001888  B0D8               	btfsc	status,0,c
  2567  00188A  D005               	goto	l322
  2568                           
  2569                           ;doprnt.c: 1350: width -= prec;
  2570  00188C  5063               	movf	sprintf@prec,w,c
  2571  00188E  5E58               	subwf	sprintf@width,f,c
  2572  001890  5064               	movf	sprintf@prec+1,w,c
  2573  001892  5A59               	subwfb	sprintf@width+1,f,c
  2574  001894  D004               	goto	l323
  2575  001896                     l322:
  2576                           
  2577                           ;doprnt.c: 1351: else
  2578                           ;doprnt.c: 1352: width = 0;
  2579  001896  0E00               	movlw	0
  2580  001898  6E59               	movwf	sprintf@width+1,c
  2581  00189A  0E00               	movlw	0
  2582  00189C  6E58               	movwf	sprintf@width,c
  2583  00189E                     l323:
  2584                           
  2585                           ;doprnt.c: 1353: }
  2586                           ;doprnt.c: 1381: if(width > c)
  2587  00189E  0E80               	movlw	128
  2588  0018A0  BE65               	btfsc	sprintf@c,7,c
  2589  0018A2  0E7F               	movlw	127
  2590  0018A4  6E47               	movwf	??_sprintf& (0+255),c
  2591  0018A6  5058               	movf	sprintf@width,w,c
  2592  0018A8  5C65               	subwf	sprintf@c,w,c
  2593  0018AA  5059               	movf	sprintf@width+1,w,c
  2594  0018AC  0A80               	xorlw	128
  2595  0018AE  5847               	subwfb	??_sprintf& (0+255),w,c
  2596  0018B0  B0D8               	btfsc	status,0,c
  2597  0018B2  D007               	goto	l324
  2598                           
  2599                           ;doprnt.c: 1382: width -= c;
  2600  0018B4  5065               	movf	sprintf@c,w,c
  2601  0018B6  5E58               	subwf	sprintf@width,f,c
  2602  0018B8  0E00               	movlw	0
  2603  0018BA  BE65               	btfsc	sprintf@c,7,c
  2604  0018BC  0EFF               	movlw	255
  2605  0018BE  5A59               	subwfb	sprintf@width+1,f,c
  2606  0018C0  D004               	goto	l325
  2607  0018C2                     l324:
  2608                           
  2609                           ;doprnt.c: 1383: else
  2610                           ;doprnt.c: 1384: width = 0;
  2611  0018C2  0E00               	movlw	0
  2612  0018C4  6E59               	movwf	sprintf@width+1,c
  2613  0018C6  0E00               	movlw	0
  2614  0018C8  6E58               	movwf	sprintf@width,c
  2615  0018CA                     l325:
  2616                           
  2617                           ;doprnt.c: 1422: {
  2618                           ;doprnt.c: 1424: if(width
  2619                           ;doprnt.c: 1428: )
  2620  0018CA  5058               	movf	sprintf@width,w,c
  2621  0018CC  1059               	iorwf	sprintf@width+1,w,c
  2622  0018CE  B4D8               	btfsc	status,2,c
  2623  0018D0  D00F               	goto	u3140
  2624  0018D2                     u3130:
  2625                           
  2626                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  2627                           
  2628                           ;doprnt.c: 1429: do
  2629  0018D2  C040  FFD9         	movff	sprintf@sp,fsr2l
  2630  0018D6  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2631  0018DA  0E20               	movlw	32
  2632  0018DC  6EDF               	movwf	indf2,c
  2633  0018DE  4A40               	infsnz	sprintf@sp,f,c
  2634  0018E0  2A41               	incf	sprintf@sp+1,f,c
  2635                           
  2636                           ;doprnt.c: 1431: while(--width);
  2637  0018E2  0658               	decf	sprintf@width,f,c
  2638  0018E4  A0D8               	btfss	status,0,c
  2639  0018E6  0659               	decf	sprintf@width+1,f,c
  2640  0018E8  5058               	movf	sprintf@width,w,c
  2641  0018EA  1059               	iorwf	sprintf@width+1,w,c
  2642  0018EC  A4D8               	btfss	status,2,c
  2643  0018EE  D7F1               	goto	u3130
  2644  0018F0                     u3140:
  2645                           
  2646                           ;doprnt.c: 1438: if(flag & 0x03)
  2647  0018F0  0E03               	movlw	3
  2648  0018F2  1456               	andwf	sprintf@flag,w,c
  2649  0018F4  6E47               	movwf	??_sprintf& (0+255),c
  2650  0018F6  0E00               	movlw	0
  2651  0018F8  1457               	andwf	sprintf@flag+1,w,c
  2652  0018FA  6E48               	movwf	(??_sprintf+1)& (0+255),c
  2653  0018FC  5047               	movf	??_sprintf,w,c
  2654  0018FE  1048               	iorwf	??_sprintf+1,w,c
  2655  001900  B4D8               	btfsc	status,2,c
  2656  001902  D008               	goto	l329
  2657                           
  2658                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  2659  001904  C040  FFD9         	movff	sprintf@sp,fsr2l
  2660  001908  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2661  00190C  0E2D               	movlw	45
  2662  00190E  6EDF               	movwf	indf2,c
  2663  001910                     l3116:
  2664  001910  4A40               	infsnz	sprintf@sp,f,c
  2665  001912  2A41               	incf	sprintf@sp+1,f,c
  2666  001914                     l329:
  2667  001914  C042  FFF6         	movff	sprintf@f,tblptrl
  2668  001918  C043  FFF7         	movff	sprintf@f+1,tblptrh
  2669  00191C  4A42               	infsnz	sprintf@f,f,c
  2670  00191E  2A43               	incf	sprintf@f+1,f,c
  2671  001920                     	if	0	;tblptru may be non-zero
  2672  001920                     	endif
  2673  001920                     	if	0	;tblptru may be non-zero
  2674  001920                     	endif
  2675  001920  0008               	tblrd		*
  2676  001922  CFF5 F065          	movff	tablat,sprintf@c
  2677  001926  5065               	movf	sprintf@c,w,c
  2678  001928  A4D8               	btfss	status,2,c
  2679  00192A  EF6D  F008         	goto	l257
  2680  00192E                     u3160:
  2681                           
  2682                           ;doprnt.c: 1538: *sp = 0;
  2683                           
  2684                           ;doprnt.c: 1469: }
  2685                           ;doprnt.c: 1533: }
  2686                           ;doprnt.c: 1535: alldone:
  2687  00192E  C040  FFD9         	movff	sprintf@sp,fsr2l
  2688  001932  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2689  001936  0E00               	movlw	0
  2690  001938  6EDF               	movwf	indf2,c
  2691  00193A  0012               	return	
  2692  00193C                     __end_of_sprintf:
  2693                           	opt stack 0
  2694                           tblptru	equ	0xFF8
  2695                           tblptrh	equ	0xFF7
  2696                           tblptrl	equ	0xFF6
  2697                           tablat	equ	0xFF5
  2698                           prodh	equ	0xFF4
  2699                           prodl	equ	0xFF3
  2700                           intcon	equ	0xFF2
  2701                           postinc0	equ	0xFEE
  2702                           wreg	equ	0xFE8
  2703                           postdec1	equ	0xFE5
  2704                           fsr1l	equ	0xFE1
  2705                           indf2	equ	0xFDF
  2706                           postinc2	equ	0xFDE
  2707                           postdec2	equ	0xFDD
  2708                           fsr2h	equ	0xFDA
  2709                           fsr2l	equ	0xFD9
  2710                           status	equ	0xFD8
  2711                           
  2712 ;; *************** function _scale *****************
  2713 ;; Defined at:
  2714 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  2715 ;; Parameters:    Size  Location     Type
  2716 ;;  scl             1    wreg     char 
  2717 ;; Auto vars:     Size  Location     Type
  2718 ;;  scl             1   41[COMRAM] char 
  2719 ;; Return value:  Size  Location     Type
  2720 ;;                  3   35[COMRAM] char 
  2721 ;; Registers used:
  2722 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2723 ;; Tracked objects:
  2724 ;;		On entry : 0/0
  2725 ;;		On exit  : 0/0
  2726 ;;		Unchanged: 0/0
  2727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2728 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2729 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2730 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2731 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2732 ;;Total ram usage:        7 bytes
  2733 ;; Hardware stack levels used:    1
  2734 ;; Hardware stack levels required when called:    2
  2735 ;; This function calls:
  2736 ;;		___awdiv
  2737 ;;		___awmod
  2738 ;;		___ftmul
  2739 ;;		___wmul
  2740 ;; This function is called by:
  2741 ;;		_sprintf
  2742 ;; This function uses a non-reentrant model
  2743 ;;
  2744                           
  2745                           	psect	text7
  2746  00193C                     __ptext7:
  2747                           	opt stack 0
  2748  00193C                     _scale:
  2749                           	opt stack 26
  2750                           
  2751                           ;incstack = 0
  2752                           ;scale@scl stored from wreg
  2753  00193C  6E2A               	movwf	scale@scl,c
  2754                           
  2755                           ;doprnt.c: 428: if(scl < 0) {
  2756  00193E  AE2A               	btfss	scale@scl,7,c
  2757  001940  D101               	goto	l246
  2758                           
  2759                           ;doprnt.c: 429: scl = -scl;
  2760  001942  6C2A               	negf	scale@scl,c
  2761                           
  2762                           ;doprnt.c: 430: if(scl>=110)
  2763  001944  502A               	movf	scale@scl,w,c
  2764  001946  0A80               	xorlw	128
  2765  001948  0F12               	addlw	-238
  2766  00194A  A0D8               	btfss	status,0,c
  2767  00194C  D091               	goto	l247
  2768                           
  2769                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2770  00194E  0E00               	movlw	0
  2771  001950  6E12               	movwf	___wmul@multiplicand+1,c
  2772  001952  0E03               	movlw	3
  2773  001954  6E11               	movwf	___wmul@multiplicand,c
  2774  001956  0E00               	movlw	0
  2775  001958  6E0A               	movwf	___awdiv@divisor+1,c
  2776  00195A  0E0A               	movlw	10
  2777  00195C  6E09               	movwf	___awdiv@divisor,c
  2778  00195E  0E00               	movlw	0
  2779  001960  6E04               	movwf	___awmod@divisor+1,c
  2780  001962  0E64               	movlw	100
  2781  001964  6E03               	movwf	___awmod@divisor,c
  2782  001966  502A               	movf	scale@scl,w,c
  2783  001968  6E01               	movwf	___awmod@dividend,c
  2784  00196A  6A02               	clrf	___awmod@dividend+1,c
  2785  00196C  BE01               	btfsc	___awmod@dividend,7,c
  2786  00196E  0602               	decf	___awmod@dividend+1,f,c
  2787  001970  EC1A  F015         	call	___awmod	;wreg free
  2788  001974  C001  F007         	movff	?___awmod,___awdiv@dividend
  2789  001978  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2790  00197C  EC97  F014         	call	___awdiv	;wreg free
  2791  001980  0E09               	movlw	9
  2792  001982  2407               	addwf	?___awdiv,w,c
  2793  001984  6E0F               	movwf	___wmul@multiplier,c
  2794  001986  0E00               	movlw	0
  2795  001988  2008               	addwfc	?___awdiv+1,w,c
  2796  00198A  6E10               	movwf	___wmul@multiplier+1,c
  2797  00198C  EC72  F017         	call	___wmul	;wreg free
  2798  001990  0E50               	movlw	low __npowers_
  2799  001992  240F               	addwf	?___wmul,w,c
  2800  001994  6EF6               	movwf	tblptrl,c
  2801  001996  0E10               	movlw	high __npowers_
  2802  001998  2010               	addwfc	?___wmul+1,w,c
  2803  00199A  6EF7               	movwf	tblptrh,c
  2804  00199C                     	if	0	;There are less than 3 active tblptr bytes
  2805  00199C                     	endif
  2806  00199C  0009               	tblrd		*+
  2807  00199E  CFF5 F018          	movff	tablat,___ftmul@f2
  2808  0019A2  0009               	tblrd		*+
  2809  0019A4  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2810  0019A8  000A               	tblrd		*-
  2811  0019AA  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2812  0019AE  0E00               	movlw	0
  2813  0019B0  6E0A               	movwf	___awdiv@divisor+1,c
  2814  0019B2  0E64               	movlw	100
  2815  0019B4  6E09               	movwf	___awdiv@divisor,c
  2816  0019B6  502A               	movf	scale@scl,w,c
  2817  0019B8  6E07               	movwf	___awdiv@dividend,c
  2818  0019BA  6A08               	clrf	___awdiv@dividend+1,c
  2819  0019BC  BE07               	btfsc	___awdiv@dividend,7,c
  2820  0019BE  0608               	decf	___awdiv@dividend+1,f,c
  2821  0019C0  EC97  F014         	call	___awdiv	;wreg free
  2822  0019C4  0E12               	movlw	18
  2823  0019C6  2407               	addwf	?___awdiv,w,c
  2824  0019C8  6E0F               	movwf	___wmul@multiplier,c
  2825  0019CA  0E00               	movlw	0
  2826  0019CC  2008               	addwfc	?___awdiv+1,w,c
  2827  0019CE  6E10               	movwf	___wmul@multiplier+1,c
  2828  0019D0  0E00               	movlw	0
  2829  0019D2  6E12               	movwf	___wmul@multiplicand+1,c
  2830  0019D4  0E03               	movlw	3
  2831  0019D6  6E11               	movwf	___wmul@multiplicand,c
  2832  0019D8  EC72  F017         	call	___wmul	;wreg free
  2833  0019DC  0E50               	movlw	low __npowers_
  2834  0019DE  240F               	addwf	?___wmul,w,c
  2835  0019E0  6EF6               	movwf	tblptrl,c
  2836  0019E2  0E10               	movlw	high __npowers_
  2837  0019E4  2010               	addwfc	?___wmul+1,w,c
  2838  0019E6  6EF7               	movwf	tblptrh,c
  2839  0019E8                     	if	0	;There are less than 3 active tblptr bytes
  2840  0019E8                     	endif
  2841  0019E8  0009               	tblrd		*+
  2842  0019EA  CFF5 F015          	movff	tablat,___ftmul@f1
  2843  0019EE  0009               	tblrd		*+
  2844  0019F0  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2845  0019F4  000A               	tblrd		*-
  2846  0019F6  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2847  0019FA  ECCE  F011         	call	___ftmul	;wreg free
  2848  0019FE  C015  F027         	movff	?___ftmul,_scale$1116
  2849  001A02  C016  F028         	movff	?___ftmul+1,_scale$1116+1
  2850  001A06  C017  F029         	movff	?___ftmul+2,_scale$1116+2
  2851                           
  2852                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2853  001A0A  C027  F015         	movff	_scale$1116,___ftmul@f1
  2854  001A0E  C028  F016         	movff	_scale$1116+1,___ftmul@f1+1
  2855  001A12  C029  F017         	movff	_scale$1116+2,___ftmul@f1+2
  2856  001A16  0E00               	movlw	0
  2857  001A18  6E12               	movwf	___wmul@multiplicand+1,c
  2858  001A1A  0E03               	movlw	3
  2859  001A1C  6E11               	movwf	___wmul@multiplicand,c
  2860  001A1E  0E00               	movlw	0
  2861  001A20  6E04               	movwf	___awmod@divisor+1,c
  2862  001A22  0E0A               	movlw	10
  2863  001A24  6E03               	movwf	___awmod@divisor,c
  2864  001A26  502A               	movf	scale@scl,w,c
  2865  001A28  6E01               	movwf	___awmod@dividend,c
  2866  001A2A  6A02               	clrf	___awmod@dividend+1,c
  2867  001A2C  BE01               	btfsc	___awmod@dividend,7,c
  2868  001A2E  0602               	decf	___awmod@dividend+1,f,c
  2869  001A30  EC1A  F015         	call	___awmod	;wreg free
  2870  001A34  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2871  001A38  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2872  001A3C  EC72  F017         	call	___wmul	;wreg free
  2873  001A40  0E50               	movlw	low __npowers_
  2874  001A42  240F               	addwf	?___wmul,w,c
  2875  001A44  6EF6               	movwf	tblptrl,c
  2876  001A46  0E10               	movlw	high __npowers_
  2877  001A48  2010               	addwfc	?___wmul+1,w,c
  2878  001A4A  6EF7               	movwf	tblptrh,c
  2879  001A4C                     	if	0	;There are less than 3 active tblptr bytes
  2880  001A4C                     	endif
  2881  001A4C  0009               	tblrd		*+
  2882  001A4E  CFF5 F018          	movff	tablat,___ftmul@f2
  2883  001A52  0009               	tblrd		*+
  2884  001A54  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2885  001A58  000A               	tblrd		*-
  2886  001A5A  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2887  001A5E  ECCE  F011         	call	___ftmul	;wreg free
  2888  001A62  C015  F024         	movff	?___ftmul,?_scale
  2889  001A66  C016  F025         	movff	?___ftmul+1,?_scale+1
  2890  001A6A  C017  F026         	movff	?___ftmul+2,?_scale+2
  2891  001A6E  0012               	return	
  2892  001A70                     l247:
  2893                           
  2894                           ;doprnt.c: 432: else if(scl > 10)
  2895  001A70  502A               	movf	scale@scl,w,c
  2896  001A72  0A80               	xorlw	128
  2897  001A74  0F75               	addlw	-139
  2898  001A76  A0D8               	btfss	status,0,c
  2899  001A78  D053               	goto	l250
  2900                           
  2901                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  2902  001A7A  0E00               	movlw	0
  2903  001A7C  6E0A               	movwf	___awdiv@divisor+1,c
  2904  001A7E  0E0A               	movlw	10
  2905  001A80  6E09               	movwf	___awdiv@divisor,c
  2906  001A82  502A               	movf	scale@scl,w,c
  2907  001A84  6E07               	movwf	___awdiv@dividend,c
  2908  001A86  6A08               	clrf	___awdiv@dividend+1,c
  2909  001A88  BE07               	btfsc	___awdiv@dividend,7,c
  2910  001A8A  0608               	decf	___awdiv@dividend+1,f,c
  2911  001A8C  EC97  F014         	call	___awdiv	;wreg free
  2912  001A90  0E09               	movlw	9
  2913  001A92  2407               	addwf	?___awdiv,w,c
  2914  001A94  6E0F               	movwf	___wmul@multiplier,c
  2915  001A96  0E00               	movlw	0
  2916  001A98  2008               	addwfc	?___awdiv+1,w,c
  2917  001A9A  6E10               	movwf	___wmul@multiplier+1,c
  2918  001A9C  0E00               	movlw	0
  2919  001A9E  6E12               	movwf	___wmul@multiplicand+1,c
  2920  001AA0  0E03               	movlw	3
  2921  001AA2  6E11               	movwf	___wmul@multiplicand,c
  2922  001AA4  EC72  F017         	call	___wmul	;wreg free
  2923  001AA8  0E50               	movlw	low __npowers_
  2924  001AAA  240F               	addwf	?___wmul,w,c
  2925  001AAC  6EF6               	movwf	tblptrl,c
  2926  001AAE  0E10               	movlw	high __npowers_
  2927  001AB0  2010               	addwfc	?___wmul+1,w,c
  2928  001AB2  6EF7               	movwf	tblptrh,c
  2929  001AB4                     	if	0	;There are less than 3 active tblptr bytes
  2930  001AB4                     	endif
  2931  001AB4  0009               	tblrd		*+
  2932  001AB6  CFF5 F015          	movff	tablat,___ftmul@f1
  2933  001ABA  0009               	tblrd		*+
  2934  001ABC  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2935  001AC0  000A               	tblrd		*-
  2936  001AC2  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2937  001AC6  0E00               	movlw	0
  2938  001AC8  6E12               	movwf	___wmul@multiplicand+1,c
  2939  001ACA  0E03               	movlw	3
  2940  001ACC  6E11               	movwf	___wmul@multiplicand,c
  2941  001ACE  0E00               	movlw	0
  2942  001AD0  6E04               	movwf	___awmod@divisor+1,c
  2943  001AD2  0E0A               	movlw	10
  2944  001AD4  6E03               	movwf	___awmod@divisor,c
  2945  001AD6  502A               	movf	scale@scl,w,c
  2946  001AD8  6E01               	movwf	___awmod@dividend,c
  2947  001ADA  6A02               	clrf	___awmod@dividend+1,c
  2948  001ADC  BE01               	btfsc	___awmod@dividend,7,c
  2949  001ADE  0602               	decf	___awmod@dividend+1,f,c
  2950  001AE0  EC1A  F015         	call	___awmod	;wreg free
  2951  001AE4  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2952  001AE8  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2953  001AEC  EC72  F017         	call	___wmul	;wreg free
  2954  001AF0  0E50               	movlw	low __npowers_
  2955  001AF2  240F               	addwf	?___wmul,w,c
  2956  001AF4  6EF6               	movwf	tblptrl,c
  2957  001AF6  0E10               	movlw	high __npowers_
  2958  001AF8  2010               	addwfc	?___wmul+1,w,c
  2959  001AFA  6EF7               	movwf	tblptrh,c
  2960  001AFC                     	if	0	;There are less than 3 active tblptr bytes
  2961  001AFC                     	endif
  2962  001AFC  0009               	tblrd		*+
  2963  001AFE  CFF5 F018          	movff	tablat,___ftmul@f2
  2964  001B02  0009               	tblrd		*+
  2965  001B04  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2966  001B08  000A               	tblrd		*-
  2967  001B0A  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2968  001B0E  ECCE  F011         	call	___ftmul	;wreg free
  2969  001B12  C015  F024         	movff	?___ftmul,?_scale
  2970  001B16  C016  F025         	movff	?___ftmul+1,?_scale+1
  2971  001B1A  C017  F026         	movff	?___ftmul+2,?_scale+2
  2972  001B1E  0012               	return	
  2973  001B20                     l250:
  2974                           
  2975                           ;doprnt.c: 434: return _npowers_[scl];
  2976  001B20  502A               	movf	scale@scl,w,c
  2977  001B22  0D03               	mullw	3
  2978  001B24  0E50               	movlw	low __npowers_
  2979  001B26  24F3               	addwf	prodl,w,c
  2980  001B28  6EF6               	movwf	tblptrl,c
  2981  001B2A  0E10               	movlw	high __npowers_
  2982  001B2C  20F4               	addwfc	prodh,w,c
  2983  001B2E  6EF7               	movwf	tblptrh,c
  2984  001B30                     	if	0	;There are less than 3 active tblptr bytes
  2985  001B30                     	endif
  2986  001B30  0009               	tblrd		*+
  2987  001B32  CFF5 F024          	movff	tablat,?_scale
  2988  001B36  0009               	tblrd		*+
  2989  001B38  CFF5 F025          	movff	tablat,?_scale+1
  2990  001B3C  000A               	tblrd		*-
  2991  001B3E  CFF5 F026          	movff	tablat,?_scale+2
  2992  001B42  0012               	return	
  2993  001B44                     l246:
  2994                           
  2995                           ;doprnt.c: 435: }
  2996                           ;doprnt.c: 436: if(scl>=110)
  2997  001B44  502A               	movf	scale@scl,w,c
  2998  001B46  0A80               	xorlw	128
  2999  001B48  0F12               	addlw	-238
  3000  001B4A  A0D8               	btfss	status,0,c
  3001  001B4C  D091               	goto	l251
  3002                           
  3003                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3004  001B4E  0E00               	movlw	0
  3005  001B50  6E12               	movwf	___wmul@multiplicand+1,c
  3006  001B52  0E03               	movlw	3
  3007  001B54  6E11               	movwf	___wmul@multiplicand,c
  3008  001B56  0E00               	movlw	0
  3009  001B58  6E0A               	movwf	___awdiv@divisor+1,c
  3010  001B5A  0E0A               	movlw	10
  3011  001B5C  6E09               	movwf	___awdiv@divisor,c
  3012  001B5E  0E00               	movlw	0
  3013  001B60  6E04               	movwf	___awmod@divisor+1,c
  3014  001B62  0E64               	movlw	100
  3015  001B64  6E03               	movwf	___awmod@divisor,c
  3016  001B66  502A               	movf	scale@scl,w,c
  3017  001B68  6E01               	movwf	___awmod@dividend,c
  3018  001B6A  6A02               	clrf	___awmod@dividend+1,c
  3019  001B6C  BE01               	btfsc	___awmod@dividend,7,c
  3020  001B6E  0602               	decf	___awmod@dividend+1,f,c
  3021  001B70  EC1A  F015         	call	___awmod	;wreg free
  3022  001B74  C001  F007         	movff	?___awmod,___awdiv@dividend
  3023  001B78  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3024  001B7C  EC97  F014         	call	___awdiv	;wreg free
  3025  001B80  0E09               	movlw	9
  3026  001B82  2407               	addwf	?___awdiv,w,c
  3027  001B84  6E0F               	movwf	___wmul@multiplier,c
  3028  001B86  0E00               	movlw	0
  3029  001B88  2008               	addwfc	?___awdiv+1,w,c
  3030  001B8A  6E10               	movwf	___wmul@multiplier+1,c
  3031  001B8C  EC72  F017         	call	___wmul	;wreg free
  3032  001B90  0E29               	movlw	low __powers_
  3033  001B92  240F               	addwf	?___wmul,w,c
  3034  001B94  6EF6               	movwf	tblptrl,c
  3035  001B96  0E10               	movlw	high __powers_
  3036  001B98  2010               	addwfc	?___wmul+1,w,c
  3037  001B9A  6EF7               	movwf	tblptrh,c
  3038  001B9C                     	if	0	;There are less than 3 active tblptr bytes
  3039  001B9C                     	endif
  3040  001B9C  0009               	tblrd		*+
  3041  001B9E  CFF5 F018          	movff	tablat,___ftmul@f2
  3042  001BA2  0009               	tblrd		*+
  3043  001BA4  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3044  001BA8  000A               	tblrd		*-
  3045  001BAA  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3046  001BAE  0E00               	movlw	0
  3047  001BB0  6E0A               	movwf	___awdiv@divisor+1,c
  3048  001BB2  0E64               	movlw	100
  3049  001BB4  6E09               	movwf	___awdiv@divisor,c
  3050  001BB6  502A               	movf	scale@scl,w,c
  3051  001BB8  6E07               	movwf	___awdiv@dividend,c
  3052  001BBA  6A08               	clrf	___awdiv@dividend+1,c
  3053  001BBC  BE07               	btfsc	___awdiv@dividend,7,c
  3054  001BBE  0608               	decf	___awdiv@dividend+1,f,c
  3055  001BC0  EC97  F014         	call	___awdiv	;wreg free
  3056  001BC4  0E12               	movlw	18
  3057  001BC6  2407               	addwf	?___awdiv,w,c
  3058  001BC8  6E0F               	movwf	___wmul@multiplier,c
  3059  001BCA  0E00               	movlw	0
  3060  001BCC  2008               	addwfc	?___awdiv+1,w,c
  3061  001BCE  6E10               	movwf	___wmul@multiplier+1,c
  3062  001BD0  0E00               	movlw	0
  3063  001BD2  6E12               	movwf	___wmul@multiplicand+1,c
  3064  001BD4  0E03               	movlw	3
  3065  001BD6  6E11               	movwf	___wmul@multiplicand,c
  3066  001BD8  EC72  F017         	call	___wmul	;wreg free
  3067  001BDC  0E29               	movlw	low __powers_
  3068  001BDE  240F               	addwf	?___wmul,w,c
  3069  001BE0  6EF6               	movwf	tblptrl,c
  3070  001BE2  0E10               	movlw	high __powers_
  3071  001BE4  2010               	addwfc	?___wmul+1,w,c
  3072  001BE6  6EF7               	movwf	tblptrh,c
  3073  001BE8                     	if	0	;There are less than 3 active tblptr bytes
  3074  001BE8                     	endif
  3075  001BE8  0009               	tblrd		*+
  3076  001BEA  CFF5 F015          	movff	tablat,___ftmul@f1
  3077  001BEE  0009               	tblrd		*+
  3078  001BF0  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3079  001BF4  000A               	tblrd		*-
  3080  001BF6  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3081  001BFA  ECCE  F011         	call	___ftmul	;wreg free
  3082  001BFE  C015  F027         	movff	?___ftmul,_scale$1116
  3083  001C02  C016  F028         	movff	?___ftmul+1,_scale$1116+1
  3084  001C06  C017  F029         	movff	?___ftmul+2,_scale$1116+2
  3085                           
  3086                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3087  001C0A  C027  F015         	movff	_scale$1116,___ftmul@f1
  3088  001C0E  C028  F016         	movff	_scale$1116+1,___ftmul@f1+1
  3089  001C12  C029  F017         	movff	_scale$1116+2,___ftmul@f1+2
  3090  001C16  0E00               	movlw	0
  3091  001C18  6E12               	movwf	___wmul@multiplicand+1,c
  3092  001C1A  0E03               	movlw	3
  3093  001C1C  6E11               	movwf	___wmul@multiplicand,c
  3094  001C1E  0E00               	movlw	0
  3095  001C20  6E04               	movwf	___awmod@divisor+1,c
  3096  001C22  0E0A               	movlw	10
  3097  001C24  6E03               	movwf	___awmod@divisor,c
  3098  001C26  502A               	movf	scale@scl,w,c
  3099  001C28  6E01               	movwf	___awmod@dividend,c
  3100  001C2A  6A02               	clrf	___awmod@dividend+1,c
  3101  001C2C  BE01               	btfsc	___awmod@dividend,7,c
  3102  001C2E  0602               	decf	___awmod@dividend+1,f,c
  3103  001C30  EC1A  F015         	call	___awmod	;wreg free
  3104  001C34  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3105  001C38  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3106  001C3C  EC72  F017         	call	___wmul	;wreg free
  3107  001C40  0E29               	movlw	low __powers_
  3108  001C42  240F               	addwf	?___wmul,w,c
  3109  001C44  6EF6               	movwf	tblptrl,c
  3110  001C46  0E10               	movlw	high __powers_
  3111  001C48  2010               	addwfc	?___wmul+1,w,c
  3112  001C4A  6EF7               	movwf	tblptrh,c
  3113  001C4C                     	if	0	;There are less than 3 active tblptr bytes
  3114  001C4C                     	endif
  3115  001C4C  0009               	tblrd		*+
  3116  001C4E  CFF5 F018          	movff	tablat,___ftmul@f2
  3117  001C52  0009               	tblrd		*+
  3118  001C54  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3119  001C58  000A               	tblrd		*-
  3120  001C5A  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3121  001C5E  ECCE  F011         	call	___ftmul	;wreg free
  3122  001C62  C015  F024         	movff	?___ftmul,?_scale
  3123  001C66  C016  F025         	movff	?___ftmul+1,?_scale+1
  3124  001C6A  C017  F026         	movff	?___ftmul+2,?_scale+2
  3125  001C6E  0012               	return	
  3126  001C70                     l251:
  3127                           
  3128                           ;doprnt.c: 438: else if(scl > 10)
  3129  001C70  502A               	movf	scale@scl,w,c
  3130  001C72  0A80               	xorlw	128
  3131  001C74  0F75               	addlw	-139
  3132  001C76  A0D8               	btfss	status,0,c
  3133  001C78  D053               	goto	l253
  3134                           
  3135                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  3136  001C7A  0E00               	movlw	0
  3137  001C7C  6E0A               	movwf	___awdiv@divisor+1,c
  3138  001C7E  0E0A               	movlw	10
  3139  001C80  6E09               	movwf	___awdiv@divisor,c
  3140  001C82  502A               	movf	scale@scl,w,c
  3141  001C84  6E07               	movwf	___awdiv@dividend,c
  3142  001C86  6A08               	clrf	___awdiv@dividend+1,c
  3143  001C88  BE07               	btfsc	___awdiv@dividend,7,c
  3144  001C8A  0608               	decf	___awdiv@dividend+1,f,c
  3145  001C8C  EC97  F014         	call	___awdiv	;wreg free
  3146  001C90  0E09               	movlw	9
  3147  001C92  2407               	addwf	?___awdiv,w,c
  3148  001C94  6E0F               	movwf	___wmul@multiplier,c
  3149  001C96  0E00               	movlw	0
  3150  001C98  2008               	addwfc	?___awdiv+1,w,c
  3151  001C9A  6E10               	movwf	___wmul@multiplier+1,c
  3152  001C9C  0E00               	movlw	0
  3153  001C9E  6E12               	movwf	___wmul@multiplicand+1,c
  3154  001CA0  0E03               	movlw	3
  3155  001CA2  6E11               	movwf	___wmul@multiplicand,c
  3156  001CA4  EC72  F017         	call	___wmul	;wreg free
  3157  001CA8  0E29               	movlw	low __powers_
  3158  001CAA  240F               	addwf	?___wmul,w,c
  3159  001CAC  6EF6               	movwf	tblptrl,c
  3160  001CAE  0E10               	movlw	high __powers_
  3161  001CB0  2010               	addwfc	?___wmul+1,w,c
  3162  001CB2  6EF7               	movwf	tblptrh,c
  3163  001CB4                     	if	0	;There are less than 3 active tblptr bytes
  3164  001CB4                     	endif
  3165  001CB4  0009               	tblrd		*+
  3166  001CB6  CFF5 F015          	movff	tablat,___ftmul@f1
  3167  001CBA  0009               	tblrd		*+
  3168  001CBC  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3169  001CC0  000A               	tblrd		*-
  3170  001CC2  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3171  001CC6  0E00               	movlw	0
  3172  001CC8  6E12               	movwf	___wmul@multiplicand+1,c
  3173  001CCA  0E03               	movlw	3
  3174  001CCC  6E11               	movwf	___wmul@multiplicand,c
  3175  001CCE  0E00               	movlw	0
  3176  001CD0  6E04               	movwf	___awmod@divisor+1,c
  3177  001CD2  0E0A               	movlw	10
  3178  001CD4  6E03               	movwf	___awmod@divisor,c
  3179  001CD6  502A               	movf	scale@scl,w,c
  3180  001CD8  6E01               	movwf	___awmod@dividend,c
  3181  001CDA  6A02               	clrf	___awmod@dividend+1,c
  3182  001CDC  BE01               	btfsc	___awmod@dividend,7,c
  3183  001CDE  0602               	decf	___awmod@dividend+1,f,c
  3184  001CE0  EC1A  F015         	call	___awmod	;wreg free
  3185  001CE4  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3186  001CE8  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3187  001CEC  EC72  F017         	call	___wmul	;wreg free
  3188  001CF0  0E29               	movlw	low __powers_
  3189  001CF2  240F               	addwf	?___wmul,w,c
  3190  001CF4  6EF6               	movwf	tblptrl,c
  3191  001CF6  0E10               	movlw	high __powers_
  3192  001CF8  2010               	addwfc	?___wmul+1,w,c
  3193  001CFA  6EF7               	movwf	tblptrh,c
  3194  001CFC                     	if	0	;There are less than 3 active tblptr bytes
  3195  001CFC                     	endif
  3196  001CFC  0009               	tblrd		*+
  3197  001CFE  CFF5 F018          	movff	tablat,___ftmul@f2
  3198  001D02  0009               	tblrd		*+
  3199  001D04  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3200  001D08  000A               	tblrd		*-
  3201  001D0A  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3202  001D0E  ECCE  F011         	call	___ftmul	;wreg free
  3203  001D12  C015  F024         	movff	?___ftmul,?_scale
  3204  001D16  C016  F025         	movff	?___ftmul+1,?_scale+1
  3205  001D1A  C017  F026         	movff	?___ftmul+2,?_scale+2
  3206  001D1E  0012               	return	
  3207  001D20                     l253:
  3208                           
  3209                           ;doprnt.c: 440: return _powers_[scl];
  3210  001D20  502A               	movf	scale@scl,w,c
  3211  001D22  0D03               	mullw	3
  3212  001D24  0E29               	movlw	low __powers_
  3213  001D26  24F3               	addwf	prodl,w,c
  3214  001D28  6EF6               	movwf	tblptrl,c
  3215  001D2A  0E10               	movlw	high __powers_
  3216  001D2C  20F4               	addwfc	prodh,w,c
  3217  001D2E  6EF7               	movwf	tblptrh,c
  3218  001D30                     	if	0	;There are less than 3 active tblptr bytes
  3219  001D30                     	endif
  3220  001D30  0009               	tblrd		*+
  3221  001D32  CFF5 F024          	movff	tablat,?_scale
  3222  001D36  0009               	tblrd		*+
  3223  001D38  CFF5 F025          	movff	tablat,?_scale+1
  3224  001D3C  000A               	tblrd		*-
  3225  001D3E  CFF5 F026          	movff	tablat,?_scale+2
  3226  001D42  0012               	return	
  3227  001D44                     __end_of_scale:
  3228                           	opt stack 0
  3229                           tblptru	equ	0xFF8
  3230                           tblptrh	equ	0xFF7
  3231                           tblptrl	equ	0xFF6
  3232                           tablat	equ	0xFF5
  3233                           prodh	equ	0xFF4
  3234                           prodl	equ	0xFF3
  3235                           intcon	equ	0xFF2
  3236                           postinc0	equ	0xFEE
  3237                           wreg	equ	0xFE8
  3238                           postdec1	equ	0xFE5
  3239                           fsr1l	equ	0xFE1
  3240                           indf2	equ	0xFDF
  3241                           postinc2	equ	0xFDE
  3242                           postdec2	equ	0xFDD
  3243                           fsr2h	equ	0xFDA
  3244                           fsr2l	equ	0xFD9
  3245                           status	equ	0xFD8
  3246                           
  3247 ;; *************** function _isdigit *****************
  3248 ;; Defined at:
  3249 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  3250 ;; Parameters:    Size  Location     Type
  3251 ;;  c               1    wreg     unsigned char 
  3252 ;; Auto vars:     Size  Location     Type
  3253 ;;  c               1    2[COMRAM] unsigned char 
  3254 ;; Return value:  Size  Location     Type
  3255 ;;		None               void
  3256 ;; Registers used:
  3257 ;;		wreg, status,2, status,0
  3258 ;; Tracked objects:
  3259 ;;		On entry : 0/0
  3260 ;;		On exit  : 0/0
  3261 ;;		Unchanged: 0/0
  3262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3263 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3264 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3265 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3266 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3267 ;;Total ram usage:        3 bytes
  3268 ;; Hardware stack levels used:    1
  3269 ;; This function calls:
  3270 ;;		Nothing
  3271 ;; This function is called by:
  3272 ;;		_sprintf
  3273 ;; This function uses a non-reentrant model
  3274 ;;
  3275                           
  3276                           	psect	text8
  3277  002FBE                     __ptext8:
  3278                           	opt stack 0
  3279  002FBE                     _isdigit:
  3280                           	opt stack 28
  3281                           
  3282                           ;incstack = 0
  3283                           ;isdigit@c stored from wreg
  3284  002FBE  6E03               	movwf	isdigit@c,c
  3285  002FC0  0E00               	movlw	0
  3286  002FC2  6E02               	movwf	_isdigit$768,c
  3287  002FC4  0E3A               	movlw	58
  3288  002FC6  6003               	cpfslt	isdigit@c,c
  3289  002FC8  D005               	goto	l695
  3290  002FCA  0E2F               	movlw	47
  3291  002FCC  6403               	cpfsgt	isdigit@c,c
  3292  002FCE  D002               	goto	l695
  3293  002FD0  0E01               	movlw	1
  3294  002FD2  6E02               	movwf	_isdigit$768,c
  3295  002FD4                     l695:
  3296  002FD4  C002  F001         	movff	_isdigit$768,??_isdigit
  3297  002FD8  3001               	rrcf	??_isdigit,w,c
  3298  002FDA  0012               	return	
  3299  002FDC                     __end_of_isdigit:
  3300                           	opt stack 0
  3301                           tblptru	equ	0xFF8
  3302                           tblptrh	equ	0xFF7
  3303                           tblptrl	equ	0xFF6
  3304                           tablat	equ	0xFF5
  3305                           prodh	equ	0xFF4
  3306                           prodl	equ	0xFF3
  3307                           intcon	equ	0xFF2
  3308                           postinc0	equ	0xFEE
  3309                           wreg	equ	0xFE8
  3310                           postdec1	equ	0xFE5
  3311                           fsr1l	equ	0xFE1
  3312                           indf2	equ	0xFDF
  3313                           postinc2	equ	0xFDE
  3314                           postdec2	equ	0xFDD
  3315                           fsr2h	equ	0xFDA
  3316                           fsr2l	equ	0xFD9
  3317                           status	equ	0xFD8
  3318                           
  3319 ;; *************** function _fround *****************
  3320 ;; Defined at:
  3321 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  3322 ;; Parameters:    Size  Location     Type
  3323 ;;  prec            1    wreg     unsigned char 
  3324 ;; Auto vars:     Size  Location     Type
  3325 ;;  prec            1   44[COMRAM] unsigned char 
  3326 ;; Return value:  Size  Location     Type
  3327 ;;                  3   35[COMRAM] unsigned char 
  3328 ;; Registers used:
  3329 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3330 ;; Tracked objects:
  3331 ;;		On entry : 0/0
  3332 ;;		On exit  : 0/0
  3333 ;;		Unchanged: 0/0
  3334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3335 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3336 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3337 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3338 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3339 ;;Total ram usage:       10 bytes
  3340 ;; Hardware stack levels used:    1
  3341 ;; Hardware stack levels required when called:    2
  3342 ;; This function calls:
  3343 ;;		___awdiv
  3344 ;;		___awmod
  3345 ;;		___ftmul
  3346 ;;		___wmul
  3347 ;; This function is called by:
  3348 ;;		_sprintf
  3349 ;; This function uses a non-reentrant model
  3350 ;;
  3351                           
  3352                           	psect	text9
  3353  001D44                     __ptext9:
  3354                           	opt stack 0
  3355  001D44                     _fround:
  3356                           	opt stack 26
  3357                           
  3358                           ;incstack = 0
  3359                           ;fround@prec stored from wreg
  3360  001D44  6E2D               	movwf	fround@prec,c
  3361                           
  3362                           ;doprnt.c: 413: if(prec>=110)
  3363  001D46  0E6D               	movlw	109
  3364  001D48  642D               	cpfsgt	fround@prec,c
  3365  001D4A  D09F               	goto	l240
  3366                           
  3367                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3368  001D4C  0E00               	movlw	0
  3369  001D4E  6E12               	movwf	___wmul@multiplicand+1,c
  3370  001D50  0E03               	movlw	3
  3371  001D52  6E11               	movwf	___wmul@multiplicand,c
  3372  001D54  0E00               	movlw	0
  3373  001D56  6E0A               	movwf	___awdiv@divisor+1,c
  3374  001D58  0E0A               	movlw	10
  3375  001D5A  6E09               	movwf	___awdiv@divisor,c
  3376  001D5C  0E00               	movlw	0
  3377  001D5E  6E04               	movwf	___awmod@divisor+1,c
  3378  001D60  0E64               	movlw	100
  3379  001D62  6E03               	movwf	___awmod@divisor,c
  3380  001D64  C02D  F001         	movff	fround@prec,___awmod@dividend
  3381  001D68  6A02               	clrf	___awmod@dividend+1,c
  3382  001D6A  EC1A  F015         	call	___awmod	;wreg free
  3383  001D6E  C001  F007         	movff	?___awmod,___awdiv@dividend
  3384  001D72  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3385  001D76  EC97  F014         	call	___awdiv	;wreg free
  3386  001D7A  0E09               	movlw	9
  3387  001D7C  2407               	addwf	?___awdiv,w,c
  3388  001D7E  6E0F               	movwf	___wmul@multiplier,c
  3389  001D80  0E00               	movlw	0
  3390  001D82  2008               	addwfc	?___awdiv+1,w,c
  3391  001D84  6E10               	movwf	___wmul@multiplier+1,c
  3392  001D86  EC72  F017         	call	___wmul	;wreg free
  3393  001D8A  0E50               	movlw	low __npowers_
  3394  001D8C  240F               	addwf	?___wmul,w,c
  3395  001D8E  6EF6               	movwf	tblptrl,c
  3396  001D90  0E10               	movlw	high __npowers_
  3397  001D92  2010               	addwfc	?___wmul+1,w,c
  3398  001D94  6EF7               	movwf	tblptrh,c
  3399  001D96                     	if	0	;There are less than 3 active tblptr bytes
  3400  001D96                     	endif
  3401  001D96  0009               	tblrd		*+
  3402  001D98  CFF5 F018          	movff	tablat,___ftmul@f2
  3403  001D9C  0009               	tblrd		*+
  3404  001D9E  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3405  001DA2  000A               	tblrd		*-
  3406  001DA4  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3407  001DA8  0E00               	movlw	0
  3408  001DAA  6E0A               	movwf	___awdiv@divisor+1,c
  3409  001DAC  0E64               	movlw	100
  3410  001DAE  6E09               	movwf	___awdiv@divisor,c
  3411  001DB0  C02D  F007         	movff	fround@prec,___awdiv@dividend
  3412  001DB4  6A08               	clrf	___awdiv@dividend+1,c
  3413  001DB6  EC97  F014         	call	___awdiv	;wreg free
  3414  001DBA  0E12               	movlw	18
  3415  001DBC  2407               	addwf	?___awdiv,w,c
  3416  001DBE  6E0F               	movwf	___wmul@multiplier,c
  3417  001DC0  0E00               	movlw	0
  3418  001DC2  2008               	addwfc	?___awdiv+1,w,c
  3419  001DC4  6E10               	movwf	___wmul@multiplier+1,c
  3420  001DC6  0E00               	movlw	0
  3421  001DC8  6E12               	movwf	___wmul@multiplicand+1,c
  3422  001DCA  0E03               	movlw	3
  3423  001DCC  6E11               	movwf	___wmul@multiplicand,c
  3424  001DCE  EC72  F017         	call	___wmul	;wreg free
  3425  001DD2  0E50               	movlw	low __npowers_
  3426  001DD4  240F               	addwf	?___wmul,w,c
  3427  001DD6  6EF6               	movwf	tblptrl,c
  3428  001DD8  0E10               	movlw	high __npowers_
  3429  001DDA  2010               	addwfc	?___wmul+1,w,c
  3430  001DDC  6EF7               	movwf	tblptrh,c
  3431  001DDE                     	if	0	;There are less than 3 active tblptr bytes
  3432  001DDE                     	endif
  3433  001DDE  0009               	tblrd		*+
  3434  001DE0  CFF5 F015          	movff	tablat,___ftmul@f1
  3435  001DE4  0009               	tblrd		*+
  3436  001DE6  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3437  001DEA  000A               	tblrd		*-
  3438  001DEC  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3439  001DF0  ECCE  F011         	call	___ftmul	;wreg free
  3440  001DF4  C015  F02A         	movff	?___ftmul,_fround$1114
  3441  001DF8  C016  F02B         	movff	?___ftmul+1,_fround$1114+1
  3442  001DFC  C017  F02C         	movff	?___ftmul+2,_fround$1114+2
  3443                           
  3444                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3445  001E00  0E00               	movlw	0
  3446  001E02  6E12               	movwf	___wmul@multiplicand+1,c
  3447  001E04  0E03               	movlw	3
  3448  001E06  6E11               	movwf	___wmul@multiplicand,c
  3449  001E08  0E00               	movlw	0
  3450  001E0A  6E04               	movwf	___awmod@divisor+1,c
  3451  001E0C  0E0A               	movlw	10
  3452  001E0E  6E03               	movwf	___awmod@divisor,c
  3453  001E10  C02D  F001         	movff	fround@prec,___awmod@dividend
  3454  001E14  6A02               	clrf	___awmod@dividend+1,c
  3455  001E16  EC1A  F015         	call	___awmod	;wreg free
  3456  001E1A  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3457  001E1E  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3458  001E22  EC72  F017         	call	___wmul	;wreg free
  3459  001E26  0E50               	movlw	low __npowers_
  3460  001E28  240F               	addwf	?___wmul,w,c
  3461  001E2A  6EF6               	movwf	tblptrl,c
  3462  001E2C  0E10               	movlw	high __npowers_
  3463  001E2E  2010               	addwfc	?___wmul+1,w,c
  3464  001E30  6EF7               	movwf	tblptrh,c
  3465  001E32                     	if	0	;There are less than 3 active tblptr bytes
  3466  001E32                     	endif
  3467  001E32  0009               	tblrd		*+
  3468  001E34  CFF5 F018          	movff	tablat,___ftmul@f2
  3469  001E38  0009               	tblrd		*+
  3470  001E3A  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3471  001E3E  000A               	tblrd		*-
  3472  001E40  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3473  001E44  C02A  F015         	movff	_fround$1114,___ftmul@f1
  3474  001E48  C02B  F016         	movff	_fround$1114+1,___ftmul@f1+1
  3475  001E4C  C02C  F017         	movff	_fround$1114+2,___ftmul@f1+2
  3476  001E50  ECCE  F011         	call	___ftmul	;wreg free
  3477  001E54  C015  F027         	movff	?___ftmul,_fround$1115
  3478  001E58  C016  F028         	movff	?___ftmul+1,_fround$1115+1
  3479  001E5C  C017  F029         	movff	?___ftmul+2,_fround$1115+2
  3480                           
  3481                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3482  001E60  C027  F015         	movff	_fround$1115,___ftmul@f1
  3483  001E64  C028  F016         	movff	_fround$1115+1,___ftmul@f1+1
  3484  001E68  C029  F017         	movff	_fround$1115+2,___ftmul@f1+2
  3485  001E6C  0E00               	movlw	0
  3486  001E6E  6E18               	movwf	___ftmul@f2,c
  3487  001E70  0E00               	movlw	0
  3488  001E72  6E19               	movwf	___ftmul@f2+1,c
  3489  001E74  0E3F               	movlw	63
  3490  001E76  6E1A               	movwf	___ftmul@f2+2,c
  3491  001E78  ECCE  F011         	call	___ftmul	;wreg free
  3492  001E7C  C015  F024         	movff	?___ftmul,?_fround
  3493  001E80  C016  F025         	movff	?___ftmul+1,?_fround+1
  3494  001E84  C017  F026         	movff	?___ftmul+2,?_fround+2
  3495  001E88  0012               	return	
  3496  001E8A                     l240:
  3497                           
  3498                           ;doprnt.c: 415: else if(prec > 10)
  3499  001E8A  0E0A               	movlw	10
  3500  001E8C  642D               	cpfsgt	fround@prec,c
  3501  001E8E  D063               	goto	l243
  3502                           
  3503                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3504  001E90  0E00               	movlw	0
  3505  001E92  6E12               	movwf	___wmul@multiplicand+1,c
  3506  001E94  0E03               	movlw	3
  3507  001E96  6E11               	movwf	___wmul@multiplicand,c
  3508  001E98  0E00               	movlw	0
  3509  001E9A  6E04               	movwf	___awmod@divisor+1,c
  3510  001E9C  0E0A               	movlw	10
  3511  001E9E  6E03               	movwf	___awmod@divisor,c
  3512  001EA0  C02D  F001         	movff	fround@prec,___awmod@dividend
  3513  001EA4  6A02               	clrf	___awmod@dividend+1,c
  3514  001EA6  EC1A  F015         	call	___awmod	;wreg free
  3515  001EAA  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3516  001EAE  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3517  001EB2  EC72  F017         	call	___wmul	;wreg free
  3518  001EB6  0E50               	movlw	low __npowers_
  3519  001EB8  240F               	addwf	?___wmul,w,c
  3520  001EBA  6EF6               	movwf	tblptrl,c
  3521  001EBC  0E10               	movlw	high __npowers_
  3522  001EBE  2010               	addwfc	?___wmul+1,w,c
  3523  001EC0  6EF7               	movwf	tblptrh,c
  3524  001EC2                     	if	0	;There are less than 3 active tblptr bytes
  3525  001EC2                     	endif
  3526  001EC2  0009               	tblrd		*+
  3527  001EC4  CFF5 F018          	movff	tablat,___ftmul@f2
  3528  001EC8  0009               	tblrd		*+
  3529  001ECA  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3530  001ECE  000A               	tblrd		*-
  3531  001ED0  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3532  001ED4  0E00               	movlw	0
  3533  001ED6  6E0A               	movwf	___awdiv@divisor+1,c
  3534  001ED8  0E0A               	movlw	10
  3535  001EDA  6E09               	movwf	___awdiv@divisor,c
  3536  001EDC  C02D  F007         	movff	fround@prec,___awdiv@dividend
  3537  001EE0  6A08               	clrf	___awdiv@dividend+1,c
  3538  001EE2  EC97  F014         	call	___awdiv	;wreg free
  3539  001EE6  0E09               	movlw	9
  3540  001EE8  2407               	addwf	?___awdiv,w,c
  3541  001EEA  6E0F               	movwf	___wmul@multiplier,c
  3542  001EEC  0E00               	movlw	0
  3543  001EEE  2008               	addwfc	?___awdiv+1,w,c
  3544  001EF0  6E10               	movwf	___wmul@multiplier+1,c
  3545  001EF2  0E00               	movlw	0
  3546  001EF4  6E12               	movwf	___wmul@multiplicand+1,c
  3547  001EF6  0E03               	movlw	3
  3548  001EF8  6E11               	movwf	___wmul@multiplicand,c
  3549  001EFA  EC72  F017         	call	___wmul	;wreg free
  3550  001EFE  0E50               	movlw	low __npowers_
  3551  001F00  240F               	addwf	?___wmul,w,c
  3552  001F02  6EF6               	movwf	tblptrl,c
  3553  001F04  0E10               	movlw	high __npowers_
  3554  001F06  2010               	addwfc	?___wmul+1,w,c
  3555  001F08  6EF7               	movwf	tblptrh,c
  3556  001F0A                     	if	0	;There are less than 3 active tblptr bytes
  3557  001F0A                     	endif
  3558  001F0A  0009               	tblrd		*+
  3559  001F0C  CFF5 F015          	movff	tablat,___ftmul@f1
  3560  001F10  0009               	tblrd		*+
  3561  001F12  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3562  001F16  000A               	tblrd		*-
  3563  001F18  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3564  001F1C  ECCE  F011         	call	___ftmul	;wreg free
  3565  001F20  C015  F02A         	movff	?___ftmul,_fround$1114
  3566  001F24  C016  F02B         	movff	?___ftmul+1,_fround$1114+1
  3567  001F28  C017  F02C         	movff	?___ftmul+2,_fround$1114+2
  3568                           
  3569                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3570  001F2C  C02A  F015         	movff	_fround$1114,___ftmul@f1
  3571  001F30  C02B  F016         	movff	_fround$1114+1,___ftmul@f1+1
  3572  001F34  C02C  F017         	movff	_fround$1114+2,___ftmul@f1+2
  3573  001F38  0E00               	movlw	0
  3574  001F3A  6E18               	movwf	___ftmul@f2,c
  3575  001F3C  0E00               	movlw	0
  3576  001F3E  6E19               	movwf	___ftmul@f2+1,c
  3577  001F40  0E3F               	movlw	63
  3578  001F42  6E1A               	movwf	___ftmul@f2+2,c
  3579  001F44  ECCE  F011         	call	___ftmul	;wreg free
  3580  001F48  C015  F024         	movff	?___ftmul,?_fround
  3581  001F4C  C016  F025         	movff	?___ftmul+1,?_fround+1
  3582  001F50  C017  F026         	movff	?___ftmul+2,?_fround+2
  3583  001F54  0012               	return	
  3584  001F56                     l243:
  3585                           
  3586                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  3587  001F56  502D               	movf	fround@prec,w,c
  3588  001F58  0D03               	mullw	3
  3589  001F5A  0E50               	movlw	low __npowers_
  3590  001F5C  24F3               	addwf	prodl,w,c
  3591  001F5E  6EF6               	movwf	tblptrl,c
  3592  001F60  0E10               	movlw	high __npowers_
  3593  001F62  20F4               	addwfc	prodh,w,c
  3594  001F64  6EF7               	movwf	tblptrh,c
  3595  001F66                     	if	0	;There are less than 3 active tblptr bytes
  3596  001F66                     	endif
  3597  001F66  0009               	tblrd		*+
  3598  001F68  CFF5 F015          	movff	tablat,___ftmul@f1
  3599  001F6C  0009               	tblrd		*+
  3600  001F6E  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3601  001F72  000A               	tblrd		*-
  3602  001F74  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3603  001F78  0E00               	movlw	0
  3604  001F7A  6E18               	movwf	___ftmul@f2,c
  3605  001F7C  0E00               	movlw	0
  3606  001F7E  6E19               	movwf	___ftmul@f2+1,c
  3607  001F80  0E3F               	movlw	63
  3608  001F82  6E1A               	movwf	___ftmul@f2+2,c
  3609  001F84  ECCE  F011         	call	___ftmul	;wreg free
  3610  001F88  C015  F024         	movff	?___ftmul,?_fround
  3611  001F8C  C016  F025         	movff	?___ftmul+1,?_fround+1
  3612  001F90  C017  F026         	movff	?___ftmul+2,?_fround+2
  3613  001F94  0012               	return	
  3614  001F96                     __end_of_fround:
  3615                           	opt stack 0
  3616                           tblptru	equ	0xFF8
  3617                           tblptrh	equ	0xFF7
  3618                           tblptrl	equ	0xFF6
  3619                           tablat	equ	0xFF5
  3620                           prodh	equ	0xFF4
  3621                           prodl	equ	0xFF3
  3622                           intcon	equ	0xFF2
  3623                           postinc0	equ	0xFEE
  3624                           wreg	equ	0xFE8
  3625                           postdec1	equ	0xFE5
  3626                           fsr1l	equ	0xFE1
  3627                           indf2	equ	0xFDF
  3628                           postinc2	equ	0xFDE
  3629                           postdec2	equ	0xFDD
  3630                           fsr2h	equ	0xFDA
  3631                           fsr2l	equ	0xFD9
  3632                           status	equ	0xFD8
  3633                           
  3634 ;; *************** function ___ftmul *****************
  3635 ;; Defined at:
  3636 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  3637 ;; Parameters:    Size  Location     Type
  3638 ;;  f1              3   20[COMRAM] float 
  3639 ;;  f2              3   23[COMRAM] float 
  3640 ;; Auto vars:     Size  Location     Type
  3641 ;;  f3_as_produc    3   30[COMRAM] unsigned um
  3642 ;;  sign            1   34[COMRAM] unsigned char 
  3643 ;;  cntr            1   33[COMRAM] unsigned char 
  3644 ;;  exp             1   29[COMRAM] unsigned char 
  3645 ;; Return value:  Size  Location     Type
  3646 ;;                  3   20[COMRAM] float 
  3647 ;; Registers used:
  3648 ;;		wreg, status,2, status,0, cstack
  3649 ;; Tracked objects:
  3650 ;;		On entry : 0/0
  3651 ;;		On exit  : 0/0
  3652 ;;		Unchanged: 0/0
  3653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3654 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3655 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3656 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3657 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3658 ;;Total ram usage:       15 bytes
  3659 ;; Hardware stack levels used:    1
  3660 ;; Hardware stack levels required when called:    1
  3661 ;; This function calls:
  3662 ;;		___ftpack
  3663 ;; This function is called by:
  3664 ;;		_processADCValues
  3665 ;;		_fround
  3666 ;;		_scale
  3667 ;;		_sprintf
  3668 ;; This function uses a non-reentrant model
  3669 ;;
  3670                           
  3671                           	psect	text10
  3672  00239C                     __ptext10:
  3673                           	opt stack 0
  3674  00239C                     ___ftmul:
  3675                           	opt stack 26
  3676                           
  3677                           ;incstack = 0
  3678  00239C  C017  F01B         	movff	___ftmul@f1+2,??___ftmul
  3679  0023A0  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  3680  0023A2  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  3681  0023A4  3416               	rlcf	___ftmul@f1+1,w,c
  3682  0023A6  361B               	rlcf	??___ftmul& (0+255),f,c
  3683  0023A8  E301               	bnc	u1971
  3684  0023AA  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  3685  0023AC                     u1971:
  3686  0023AC  501B               	movf	??___ftmul,w,c
  3687  0023AE  6E1E               	movwf	___ftmul@exp,c
  3688  0023B0  501E               	movf	___ftmul@exp,w,c
  3689  0023B2  A4D8               	btfss	status,2,c
  3690  0023B4  D007               	goto	l659
  3691  0023B6  0E00               	movlw	0
  3692  0023B8  6E15               	movwf	?___ftmul,c
  3693  0023BA  0E00               	movlw	0
  3694  0023BC  6E16               	movwf	?___ftmul+1,c
  3695  0023BE  0E00               	movlw	0
  3696  0023C0  6E17               	movwf	?___ftmul+2,c
  3697  0023C2  0012               	return	
  3698  0023C4                     l659:
  3699  0023C4  C01A  F01B         	movff	___ftmul@f2+2,??___ftmul
  3700  0023C8  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  3701  0023CA  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  3702  0023CC  3419               	rlcf	___ftmul@f2+1,w,c
  3703  0023CE  361B               	rlcf	??___ftmul& (0+255),f,c
  3704  0023D0  E301               	bnc	u1991
  3705  0023D2  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  3706  0023D4                     u1991:
  3707  0023D4  501B               	movf	??___ftmul,w,c
  3708  0023D6  6E23               	movwf	___ftmul@sign,c
  3709  0023D8  5023               	movf	___ftmul@sign,w,c
  3710  0023DA  A4D8               	btfss	status,2,c
  3711  0023DC  D007               	goto	l661
  3712  0023DE  0E00               	movlw	0
  3713  0023E0  6E15               	movwf	?___ftmul,c
  3714  0023E2  0E00               	movlw	0
  3715  0023E4  6E16               	movwf	?___ftmul+1,c
  3716  0023E6  0E00               	movlw	0
  3717  0023E8  6E17               	movwf	?___ftmul+2,c
  3718  0023EA  0012               	return	
  3719  0023EC                     l661:
  3720  0023EC  5023               	movf	___ftmul@sign,w,c
  3721  0023EE  0F7B               	addlw	123
  3722  0023F0  261E               	addwf	___ftmul@exp,f,c
  3723  0023F2  C017  F023         	movff	___ftmul@f1+2,___ftmul@sign
  3724  0023F6  501A               	movf	___ftmul@f2+2,w,c
  3725  0023F8  1A23               	xorwf	___ftmul@sign,f,c
  3726  0023FA  0E80               	movlw	128
  3727  0023FC  1623               	andwf	___ftmul@sign,f,c
  3728  0023FE  8E16               	bsf	___ftmul@f1+1,7,c
  3729  002400  8E19               	bsf	___ftmul@f2+1,7,c
  3730  002402  0EFF               	movlw	255
  3731  002404  1618               	andwf	___ftmul@f2,f,c
  3732  002406  0EFF               	movlw	255
  3733  002408  1619               	andwf	___ftmul@f2+1,f,c
  3734  00240A  0E00               	movlw	0
  3735  00240C  161A               	andwf	___ftmul@f2+2,f,c
  3736  00240E  0E00               	movlw	0
  3737  002410  6E1F               	movwf	___ftmul@f3_as_product,c
  3738  002412  0E00               	movlw	0
  3739  002414  6E20               	movwf	___ftmul@f3_as_product+1,c
  3740  002416  0E00               	movlw	0
  3741  002418  6E21               	movwf	___ftmul@f3_as_product+2,c
  3742  00241A  0E07               	movlw	7
  3743  00241C  6E22               	movwf	___ftmul@cntr,c
  3744  00241E  A015               	btfss	___ftmul@f1,0,c
  3745  002420  D006               	goto	l663
  3746  002422  5018               	movf	___ftmul@f2,w,c
  3747  002424  261F               	addwf	___ftmul@f3_as_product,f,c
  3748  002426  5019               	movf	___ftmul@f2+1,w,c
  3749  002428  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  3750  00242A  501A               	movf	___ftmul@f2+2,w,c
  3751  00242C  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  3752  00242E                     l663:
  3753  00242E  90D8               	bcf	status,0,c
  3754  002430  3217               	rrcf	___ftmul@f1+2,f,c
  3755  002432  3216               	rrcf	___ftmul@f1+1,f,c
  3756  002434  3215               	rrcf	___ftmul@f1,f,c
  3757  002436  90D8               	bcf	status,0,c
  3758  002438  3618               	rlcf	___ftmul@f2,f,c
  3759  00243A  3619               	rlcf	___ftmul@f2+1,f,c
  3760  00243C  361A               	rlcf	___ftmul@f2+2,f,c
  3761  00243E  2E22               	decfsz	___ftmul@cntr,f,c
  3762  002440  D7EE               	goto	l662
  3763  002442  0E09               	movlw	9
  3764  002444  6E22               	movwf	___ftmul@cntr,c
  3765  002446  A015               	btfss	___ftmul@f1,0,c
  3766  002448  D006               	goto	l666
  3767  00244A  5018               	movf	___ftmul@f2,w,c
  3768  00244C  261F               	addwf	___ftmul@f3_as_product,f,c
  3769  00244E  5019               	movf	___ftmul@f2+1,w,c
  3770  002450  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  3771  002452  501A               	movf	___ftmul@f2+2,w,c
  3772  002454  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  3773  002456                     l666:
  3774  002456  90D8               	bcf	status,0,c
  3775  002458  3217               	rrcf	___ftmul@f1+2,f,c
  3776  00245A  3216               	rrcf	___ftmul@f1+1,f,c
  3777  00245C  3215               	rrcf	___ftmul@f1,f,c
  3778  00245E  90D8               	bcf	status,0,c
  3779  002460  3221               	rrcf	___ftmul@f3_as_product+2,f,c
  3780  002462  3220               	rrcf	___ftmul@f3_as_product+1,f,c
  3781  002464  321F               	rrcf	___ftmul@f3_as_product,f,c
  3782  002466  2E22               	decfsz	___ftmul@cntr,f,c
  3783  002468  D7EE               	goto	l665
  3784  00246A  C01F  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  3785  00246E  C020  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3786  002472  C021  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3787  002476  C01E  F004         	movff	___ftmul@exp,___ftpack@exp
  3788  00247A  C023  F005         	movff	___ftmul@sign,___ftpack@sign
  3789  00247E  ECF8  F013         	call	___ftpack	;wreg free
  3790  002482  C001  F015         	movff	?___ftpack,?___ftmul
  3791  002486  C002  F016         	movff	?___ftpack+1,?___ftmul+1
  3792  00248A  C003  F017         	movff	?___ftpack+2,?___ftmul+2
  3793  00248E  0012               	return	
  3794  002490                     __end_of___ftmul:
  3795                           	opt stack 0
  3796                           tblptru	equ	0xFF8
  3797                           tblptrh	equ	0xFF7
  3798                           tblptrl	equ	0xFF6
  3799                           tablat	equ	0xFF5
  3800                           prodh	equ	0xFF4
  3801                           prodl	equ	0xFF3
  3802                           intcon	equ	0xFF2
  3803                           postinc0	equ	0xFEE
  3804                           wreg	equ	0xFE8
  3805                           postdec1	equ	0xFE5
  3806                           fsr1l	equ	0xFE1
  3807                           indf2	equ	0xFDF
  3808                           postinc2	equ	0xFDE
  3809                           postdec2	equ	0xFDD
  3810                           fsr2h	equ	0xFDA
  3811                           fsr2l	equ	0xFD9
  3812                           status	equ	0xFD8
  3813                           
  3814 ;; *************** function ___awmod *****************
  3815 ;; Defined at:
  3816 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  3817 ;; Parameters:    Size  Location     Type
  3818 ;;  dividend        2    0[COMRAM] int 
  3819 ;;  divisor         2    2[COMRAM] int 
  3820 ;; Auto vars:     Size  Location     Type
  3821 ;;  sign            1    5[COMRAM] unsigned char 
  3822 ;;  counter         1    4[COMRAM] unsigned char 
  3823 ;; Return value:  Size  Location     Type
  3824 ;;                  2    0[COMRAM] int 
  3825 ;; Registers used:
  3826 ;;		wreg, status,2, status,0
  3827 ;; Tracked objects:
  3828 ;;		On entry : 0/0
  3829 ;;		On exit  : 0/0
  3830 ;;		Unchanged: 0/0
  3831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3832 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3833 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3835 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3836 ;;Total ram usage:        6 bytes
  3837 ;; Hardware stack levels used:    1
  3838 ;; This function calls:
  3839 ;;		Nothing
  3840 ;; This function is called by:
  3841 ;;		_fround
  3842 ;;		_scale
  3843 ;; This function uses a non-reentrant model
  3844 ;;
  3845                           
  3846                           	psect	text11
  3847  002A34                     __ptext11:
  3848                           	opt stack 0
  3849  002A34                     ___awmod:
  3850                           	opt stack 27
  3851                           
  3852                           ;incstack = 0
  3853  002A34  0E00               	movlw	0
  3854  002A36  6E06               	movwf	___awmod@sign,c
  3855  002A38  AE02               	btfss	___awmod@dividend+1,7,c
  3856  002A3A  D006               	goto	l512
  3857  002A3C  6C01               	negf	___awmod@dividend,c
  3858  002A3E  1E02               	comf	___awmod@dividend+1,f,c
  3859  002A40  B0D8               	btfsc	status,0,c
  3860  002A42  2A02               	incf	___awmod@dividend+1,f,c
  3861  002A44  0E01               	movlw	1
  3862  002A46  6E06               	movwf	___awmod@sign,c
  3863  002A48                     l512:
  3864  002A48  AE04               	btfss	___awmod@divisor+1,7,c
  3865  002A4A  D004               	goto	l513
  3866  002A4C  6C03               	negf	___awmod@divisor,c
  3867  002A4E  1E04               	comf	___awmod@divisor+1,f,c
  3868  002A50  B0D8               	btfsc	status,0,c
  3869  002A52  2A04               	incf	___awmod@divisor+1,f,c
  3870  002A54                     l513:
  3871  002A54  5003               	movf	___awmod@divisor,w,c
  3872  002A56  1004               	iorwf	___awmod@divisor+1,w,c
  3873  002A58  B4D8               	btfsc	status,2,c
  3874  002A5A  D018               	goto	l520
  3875  002A5C  0E01               	movlw	1
  3876  002A5E  6E05               	movwf	___awmod@counter,c
  3877  002A60  D004               	goto	l515
  3878  002A62  90D8               	bcf	status,0,c
  3879  002A64  3603               	rlcf	___awmod@divisor,f,c
  3880  002A66  3604               	rlcf	___awmod@divisor+1,f,c
  3881  002A68  2A05               	incf	___awmod@counter,f,c
  3882  002A6A                     l515:
  3883  002A6A  AE04               	btfss	___awmod@divisor+1,7,c
  3884  002A6C  D7FA               	goto	l516
  3885  002A6E                     u2120:
  3886  002A6E  5003               	movf	___awmod@divisor,w,c
  3887  002A70  5C01               	subwf	___awmod@dividend,w,c
  3888  002A72  5004               	movf	___awmod@divisor+1,w,c
  3889  002A74  5802               	subwfb	___awmod@dividend+1,w,c
  3890  002A76  A0D8               	btfss	status,0,c
  3891  002A78  D004               	goto	l519
  3892  002A7A  5003               	movf	___awmod@divisor,w,c
  3893  002A7C  5E01               	subwf	___awmod@dividend,f,c
  3894  002A7E  5004               	movf	___awmod@divisor+1,w,c
  3895  002A80  5A02               	subwfb	___awmod@dividend+1,f,c
  3896  002A82                     l519:
  3897  002A82  90D8               	bcf	status,0,c
  3898  002A84  3204               	rrcf	___awmod@divisor+1,f,c
  3899  002A86  3203               	rrcf	___awmod@divisor,f,c
  3900  002A88  2E05               	decfsz	___awmod@counter,f,c
  3901  002A8A  D7F1               	goto	u2120
  3902  002A8C                     l520:
  3903  002A8C  5006               	movf	___awmod@sign,w,c
  3904  002A8E  B4D8               	btfsc	status,2,c
  3905  002A90  D004               	goto	l521
  3906  002A92  6C01               	negf	___awmod@dividend,c
  3907  002A94  1E02               	comf	___awmod@dividend+1,f,c
  3908  002A96  B0D8               	btfsc	status,0,c
  3909  002A98  2A02               	incf	___awmod@dividend+1,f,c
  3910  002A9A                     l521:
  3911  002A9A  C001  F001         	movff	___awmod@dividend,?___awmod
  3912  002A9E  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  3913  002AA2  0012               	return	
  3914  002AA4                     __end_of___awmod:
  3915                           	opt stack 0
  3916                           tblptru	equ	0xFF8
  3917                           tblptrh	equ	0xFF7
  3918                           tblptrl	equ	0xFF6
  3919                           tablat	equ	0xFF5
  3920                           prodh	equ	0xFF4
  3921                           prodl	equ	0xFF3
  3922                           intcon	equ	0xFF2
  3923                           postinc0	equ	0xFEE
  3924                           wreg	equ	0xFE8
  3925                           postdec1	equ	0xFE5
  3926                           fsr1l	equ	0xFE1
  3927                           indf2	equ	0xFDF
  3928                           postinc2	equ	0xFDE
  3929                           postdec2	equ	0xFDD
  3930                           fsr2h	equ	0xFDA
  3931                           fsr2l	equ	0xFD9
  3932                           status	equ	0xFD8
  3933                           
  3934 ;; *************** function ___awdiv *****************
  3935 ;; Defined at:
  3936 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  3937 ;; Parameters:    Size  Location     Type
  3938 ;;  dividend        2    6[COMRAM] int 
  3939 ;;  divisor         2    8[COMRAM] int 
  3940 ;; Auto vars:     Size  Location     Type
  3941 ;;  quotient        2   12[COMRAM] int 
  3942 ;;  sign            1   11[COMRAM] unsigned char 
  3943 ;;  counter         1   10[COMRAM] unsigned char 
  3944 ;; Return value:  Size  Location     Type
  3945 ;;                  2    6[COMRAM] int 
  3946 ;; Registers used:
  3947 ;;		wreg, status,2, status,0
  3948 ;; Tracked objects:
  3949 ;;		On entry : 0/0
  3950 ;;		On exit  : 0/0
  3951 ;;		Unchanged: 0/0
  3952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3953 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3954 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3956 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3957 ;;Total ram usage:        8 bytes
  3958 ;; Hardware stack levels used:    1
  3959 ;; This function calls:
  3960 ;;		Nothing
  3961 ;; This function is called by:
  3962 ;;		_fround
  3963 ;;		_scale
  3964 ;;		_sprintf
  3965 ;; This function uses a non-reentrant model
  3966 ;;
  3967                           
  3968                           	psect	text12
  3969  00292E                     __ptext12:
  3970                           	opt stack 0
  3971  00292E                     ___awdiv:
  3972                           	opt stack 27
  3973                           
  3974                           ;incstack = 0
  3975  00292E  0E00               	movlw	0
  3976  002930  6E0C               	movwf	___awdiv@sign,c
  3977  002932  AE0A               	btfss	___awdiv@divisor+1,7,c
  3978  002934  D006               	goto	l499
  3979  002936  6C09               	negf	___awdiv@divisor,c
  3980  002938  1E0A               	comf	___awdiv@divisor+1,f,c
  3981  00293A  B0D8               	btfsc	status,0,c
  3982  00293C  2A0A               	incf	___awdiv@divisor+1,f,c
  3983  00293E  0E01               	movlw	1
  3984  002940  6E0C               	movwf	___awdiv@sign,c
  3985  002942                     l499:
  3986  002942  AE08               	btfss	___awdiv@dividend+1,7,c
  3987  002944  D006               	goto	l500
  3988  002946  6C07               	negf	___awdiv@dividend,c
  3989  002948  1E08               	comf	___awdiv@dividend+1,f,c
  3990  00294A  B0D8               	btfsc	status,0,c
  3991  00294C  2A08               	incf	___awdiv@dividend+1,f,c
  3992  00294E  0E01               	movlw	1
  3993  002950  1A0C               	xorwf	___awdiv@sign,f,c
  3994  002952                     l500:
  3995  002952  0E00               	movlw	0
  3996  002954  6E0E               	movwf	___awdiv@quotient+1,c
  3997  002956  0E00               	movlw	0
  3998  002958  6E0D               	movwf	___awdiv@quotient,c
  3999  00295A  5009               	movf	___awdiv@divisor,w,c
  4000  00295C  100A               	iorwf	___awdiv@divisor+1,w,c
  4001  00295E  B4D8               	btfsc	status,2,c
  4002  002960  D01C               	goto	l507
  4003  002962  0E01               	movlw	1
  4004  002964  6E0B               	movwf	___awdiv@counter,c
  4005  002966  D004               	goto	l502
  4006  002968  90D8               	bcf	status,0,c
  4007  00296A  3609               	rlcf	___awdiv@divisor,f,c
  4008  00296C  360A               	rlcf	___awdiv@divisor+1,f,c
  4009  00296E  2A0B               	incf	___awdiv@counter,f,c
  4010  002970                     l502:
  4011  002970  AE0A               	btfss	___awdiv@divisor+1,7,c
  4012  002972  D7FA               	goto	l503
  4013  002974                     u2060:
  4014  002974  90D8               	bcf	status,0,c
  4015  002976  360D               	rlcf	___awdiv@quotient,f,c
  4016  002978  360E               	rlcf	___awdiv@quotient+1,f,c
  4017  00297A  5009               	movf	___awdiv@divisor,w,c
  4018  00297C  5C07               	subwf	___awdiv@dividend,w,c
  4019  00297E  500A               	movf	___awdiv@divisor+1,w,c
  4020  002980  5808               	subwfb	___awdiv@dividend+1,w,c
  4021  002982  A0D8               	btfss	status,0,c
  4022  002984  D005               	goto	l506
  4023  002986  5009               	movf	___awdiv@divisor,w,c
  4024  002988  5E07               	subwf	___awdiv@dividend,f,c
  4025  00298A  500A               	movf	___awdiv@divisor+1,w,c
  4026  00298C  5A08               	subwfb	___awdiv@dividend+1,f,c
  4027  00298E  800D               	bsf	___awdiv@quotient,0,c
  4028  002990                     l506:
  4029  002990  90D8               	bcf	status,0,c
  4030  002992  320A               	rrcf	___awdiv@divisor+1,f,c
  4031  002994  3209               	rrcf	___awdiv@divisor,f,c
  4032  002996  2E0B               	decfsz	___awdiv@counter,f,c
  4033  002998  D7ED               	goto	u2060
  4034  00299A                     l507:
  4035  00299A  500C               	movf	___awdiv@sign,w,c
  4036  00299C  B4D8               	btfsc	status,2,c
  4037  00299E  D004               	goto	l508
  4038  0029A0  6C0D               	negf	___awdiv@quotient,c
  4039  0029A2  1E0E               	comf	___awdiv@quotient+1,f,c
  4040  0029A4  B0D8               	btfsc	status,0,c
  4041  0029A6  2A0E               	incf	___awdiv@quotient+1,f,c
  4042  0029A8                     l508:
  4043  0029A8  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  4044  0029AC  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  4045  0029B0  0012               	return	
  4046  0029B2                     __end_of___awdiv:
  4047                           	opt stack 0
  4048                           tblptru	equ	0xFF8
  4049                           tblptrh	equ	0xFF7
  4050                           tblptrl	equ	0xFF6
  4051                           tablat	equ	0xFF5
  4052                           prodh	equ	0xFF4
  4053                           prodl	equ	0xFF3
  4054                           intcon	equ	0xFF2
  4055                           postinc0	equ	0xFEE
  4056                           wreg	equ	0xFE8
  4057                           postdec1	equ	0xFE5
  4058                           fsr1l	equ	0xFE1
  4059                           indf2	equ	0xFDF
  4060                           postinc2	equ	0xFDE
  4061                           postdec2	equ	0xFDD
  4062                           fsr2h	equ	0xFDA
  4063                           fsr2l	equ	0xFD9
  4064                           status	equ	0xFD8
  4065                           
  4066 ;; *************** function __tdiv_to_l_ *****************
  4067 ;; Defined at:
  4068 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdivl.c"
  4069 ;; Parameters:    Size  Location     Type
  4070 ;;  f1              3    0[COMRAM] float 
  4071 ;;  f2              3    3[COMRAM] float 
  4072 ;; Auto vars:     Size  Location     Type
  4073 ;;  quot            4    9[COMRAM] unsigned long 
  4074 ;;  exp1            1   14[COMRAM] unsigned char 
  4075 ;;  cntr            1   13[COMRAM] unsigned char 
  4076 ;; Return value:  Size  Location     Type
  4077 ;;                  4    0[COMRAM] unsigned long 
  4078 ;; Registers used:
  4079 ;;		wreg, status,2, status,0
  4080 ;; Tracked objects:
  4081 ;;		On entry : 0/0
  4082 ;;		On exit  : 0/0
  4083 ;;		Unchanged: 0/0
  4084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4085 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4086 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4087 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4088 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4089 ;;Total ram usage:       15 bytes
  4090 ;; Hardware stack levels used:    1
  4091 ;; This function calls:
  4092 ;;		Nothing
  4093 ;; This function is called by:
  4094 ;;		_sprintf
  4095 ;; This function uses a non-reentrant model
  4096 ;;
  4097                           
  4098                           	psect	text13
  4099  002142                     __ptext13:
  4100                           	opt stack 0
  4101  002142                     __tdiv_to_l_:
  4102                           	opt stack 28
  4103                           
  4104                           ;incstack = 0
  4105  002142  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  4106  002146  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4107  002148  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4108  00214A  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  4109  00214C  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4110  00214E  E301               	bnc	u2251
  4111  002150  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4112  002152                     u2251:
  4113  002152  5007               	movf	??__tdiv_to_l_,w,c
  4114  002154  6E0F               	movwf	__tdiv_to_l_@exp1,c
  4115  002156  500F               	movf	__tdiv_to_l_@exp1,w,c
  4116  002158  A4D8               	btfss	status,2,c
  4117  00215A  D009               	goto	l635
  4118  00215C  0E00               	movlw	0
  4119  00215E  6E01               	movwf	?__tdiv_to_l_,c
  4120  002160  0E00               	movlw	0
  4121  002162  6E02               	movwf	?__tdiv_to_l_+1,c
  4122  002164  0E00               	movlw	0
  4123  002166  6E03               	movwf	?__tdiv_to_l_+2,c
  4124  002168  0E00               	movlw	0
  4125  00216A  6E04               	movwf	?__tdiv_to_l_+3,c
  4126  00216C  0012               	return	
  4127  00216E                     l635:
  4128  00216E  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  4129  002172  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4130  002174  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4131  002176  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  4132  002178  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4133  00217A  E301               	bnc	u2271
  4134  00217C  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4135  00217E                     u2271:
  4136  00217E  5007               	movf	??__tdiv_to_l_,w,c
  4137  002180  6E0E               	movwf	__tdiv_to_l_@cntr,c
  4138  002182  500E               	movf	__tdiv_to_l_@cntr,w,c
  4139  002184  A4D8               	btfss	status,2,c
  4140  002186  D009               	goto	l637
  4141  002188  0E00               	movlw	0
  4142  00218A  6E01               	movwf	?__tdiv_to_l_,c
  4143  00218C  0E00               	movlw	0
  4144  00218E  6E02               	movwf	?__tdiv_to_l_+1,c
  4145  002190  0E00               	movlw	0
  4146  002192  6E03               	movwf	?__tdiv_to_l_+2,c
  4147  002194  0E00               	movlw	0
  4148  002196  6E04               	movwf	?__tdiv_to_l_+3,c
  4149  002198  0012               	return	
  4150  00219A                     l637:
  4151  00219A  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  4152  00219C  0EFF               	movlw	255
  4153  00219E  1601               	andwf	__tdiv_to_l_@f1,f,c
  4154  0021A0  0EFF               	movlw	255
  4155  0021A2  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  4156  0021A4  0E00               	movlw	0
  4157  0021A6  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  4158  0021A8  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  4159  0021AA  0EFF               	movlw	255
  4160  0021AC  1604               	andwf	__tdiv_to_l_@f2,f,c
  4161  0021AE  0EFF               	movlw	255
  4162  0021B0  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  4163  0021B2  0E00               	movlw	0
  4164  0021B4  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  4165  0021B6  0E00               	movlw	0
  4166  0021B8  6E0A               	movwf	__tdiv_to_l_@quot,c
  4167  0021BA  0E00               	movlw	0
  4168  0021BC  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  4169  0021BE  0E00               	movlw	0
  4170  0021C0  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  4171  0021C2  0E00               	movlw	0
  4172  0021C4  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  4173  0021C6  0E7F               	movlw	127
  4174  0021C8  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4175  0021CA  500E               	movf	__tdiv_to_l_@cntr,w,c
  4176  0021CC  0F98               	addlw	152
  4177  0021CE  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4178  0021D0  0E18               	movlw	24
  4179  0021D2  6E0E               	movwf	__tdiv_to_l_@cntr,c
  4180  0021D4                     l638:
  4181  0021D4  90D8               	bcf	status,0,c
  4182  0021D6  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4183  0021D8  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4184  0021DA  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4185  0021DC  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4186  0021DE  5004               	movf	__tdiv_to_l_@f2,w,c
  4187  0021E0  5C01               	subwf	__tdiv_to_l_@f1,w,c
  4188  0021E2  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4189  0021E4  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  4190  0021E6  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4191  0021E8  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  4192  0021EA  A0D8               	btfss	status,0,c
  4193  0021EC  D007               	goto	l639
  4194  0021EE  5004               	movf	__tdiv_to_l_@f2,w,c
  4195  0021F0  5E01               	subwf	__tdiv_to_l_@f1,f,c
  4196  0021F2  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4197  0021F4  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  4198  0021F6  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4199  0021F8  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  4200  0021FA  800A               	bsf	__tdiv_to_l_@quot,0,c
  4201  0021FC                     l639:
  4202  0021FC  90D8               	bcf	status,0,c
  4203  0021FE  3601               	rlcf	__tdiv_to_l_@f1,f,c
  4204  002200  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  4205  002202  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  4206  002204  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  4207  002206  D7E6               	goto	l638
  4208  002208  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  4209  00220A  D016               	goto	l641
  4210  00220C  500F               	movf	__tdiv_to_l_@exp1,w,c
  4211  00220E  0A80               	xorlw	128
  4212  002210  0F97               	addlw	151
  4213  002212  B0D8               	btfsc	status,0,c
  4214  002214  D009               	goto	l642
  4215  002216  0E00               	movlw	0
  4216  002218  6E01               	movwf	?__tdiv_to_l_,c
  4217  00221A  0E00               	movlw	0
  4218  00221C  6E02               	movwf	?__tdiv_to_l_+1,c
  4219  00221E  0E00               	movlw	0
  4220  002220  6E03               	movwf	?__tdiv_to_l_+2,c
  4221  002222  0E00               	movlw	0
  4222  002224  6E04               	movwf	?__tdiv_to_l_+3,c
  4223  002226  0012               	return	
  4224  002228                     l642:
  4225  002228  90D8               	bcf	status,0,c
  4226  00222A  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  4227  00222C  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  4228  00222E  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  4229  002230  320A               	rrcf	__tdiv_to_l_@quot,f,c
  4230  002232  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  4231  002234  D7F9               	goto	l642
  4232  002236  D015               	goto	u2330
  4233  002238                     l641:
  4234  002238  0E17               	movlw	23
  4235  00223A  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  4236  00223C  D00F               	goto	l647
  4237  00223E  0E00               	movlw	0
  4238  002240  6E01               	movwf	?__tdiv_to_l_,c
  4239  002242  0E00               	movlw	0
  4240  002244  6E02               	movwf	?__tdiv_to_l_+1,c
  4241  002246  0E00               	movlw	0
  4242  002248  6E03               	movwf	?__tdiv_to_l_+2,c
  4243  00224A  0E00               	movlw	0
  4244  00224C  6E04               	movwf	?__tdiv_to_l_+3,c
  4245  00224E  0012               	return	
  4246  002250  90D8               	bcf	status,0,c
  4247  002252  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4248  002254  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4249  002256  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4250  002258  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4251  00225A  060F               	decf	__tdiv_to_l_@exp1,f,c
  4252  00225C                     l647:
  4253  00225C  500F               	movf	__tdiv_to_l_@exp1,w,c
  4254  00225E  A4D8               	btfss	status,2,c
  4255  002260  D7F7               	goto	l648
  4256  002262                     u2330:
  4257  002262  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4258  002266  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4259  00226A  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4260  00226E  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4261  002272  0012               	return		;funcret
  4262  002274                     __end_of__tdiv_to_l_:
  4263                           	opt stack 0
  4264                           tblptru	equ	0xFF8
  4265                           tblptrh	equ	0xFF7
  4266                           tblptrl	equ	0xFF6
  4267                           tablat	equ	0xFF5
  4268                           prodh	equ	0xFF4
  4269                           prodl	equ	0xFF3
  4270                           intcon	equ	0xFF2
  4271                           postinc0	equ	0xFEE
  4272                           wreg	equ	0xFE8
  4273                           postdec1	equ	0xFE5
  4274                           fsr1l	equ	0xFE1
  4275                           indf2	equ	0xFDF
  4276                           postinc2	equ	0xFDE
  4277                           postdec2	equ	0xFDD
  4278                           fsr2h	equ	0xFDA
  4279                           fsr2l	equ	0xFD9
  4280                           status	equ	0xFD8
  4281                           
  4282 ;; *************** function __div_to_l_ *****************
  4283 ;; Defined at:
  4284 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fldivl.c"
  4285 ;; Parameters:    Size  Location     Type
  4286 ;;  f1              3    0[COMRAM] unsigned long 
  4287 ;;  f2              3    3[COMRAM] unsigned long 
  4288 ;; Auto vars:     Size  Location     Type
  4289 ;;  quot            4    6[COMRAM] unsigned long 
  4290 ;;  exp1            1   11[COMRAM] unsigned char 
  4291 ;;  cntr            1   10[COMRAM] unsigned char 
  4292 ;; Return value:  Size  Location     Type
  4293 ;;                  4    0[COMRAM] unsigned long 
  4294 ;; Registers used:
  4295 ;;		wreg, status,2, status,0
  4296 ;; Tracked objects:
  4297 ;;		On entry : 0/0
  4298 ;;		On exit  : 0/0
  4299 ;;		Unchanged: 0/0
  4300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4301 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4302 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4304 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4305 ;;Total ram usage:       12 bytes
  4306 ;; Hardware stack levels used:    1
  4307 ;; This function calls:
  4308 ;;		Nothing
  4309 ;; This function is called by:
  4310 ;;		_sprintf
  4311 ;; This function uses a non-reentrant model
  4312 ;;
  4313                           
  4314                           	psect	text14
  4315  002274                     __ptext14:
  4316                           	opt stack 0
  4317  002274                     __div_to_l_:
  4318                           	opt stack 28
  4319                           
  4320                           ;incstack = 0
  4321  002274  3403               	rlcf	__div_to_l_@f1+2,w,c
  4322  002276  3404               	rlcf	__div_to_l_@f1+3,w,c
  4323  002278  6E0C               	movwf	__div_to_l_@exp1,c
  4324  00227A  500C               	movf	__div_to_l_@exp1,w,c
  4325  00227C  A4D8               	btfss	status,2,c
  4326  00227E  D009               	goto	l531
  4327  002280  0E00               	movlw	0
  4328  002282  6E01               	movwf	?__div_to_l_,c
  4329  002284  0E00               	movlw	0
  4330  002286  6E02               	movwf	?__div_to_l_+1,c
  4331  002288  0E00               	movlw	0
  4332  00228A  6E03               	movwf	?__div_to_l_+2,c
  4333  00228C  0E00               	movlw	0
  4334  00228E  6E04               	movwf	?__div_to_l_+3,c
  4335  002290  0012               	return	
  4336  002292                     l531:
  4337  002292  3406               	rlcf	__div_to_l_@f2+2,w,c
  4338  002294  3407               	rlcf	__div_to_l_@f2+3,w,c
  4339  002296  6E0B               	movwf	__div_to_l_@cntr,c
  4340  002298  500B               	movf	__div_to_l_@cntr,w,c
  4341  00229A  A4D8               	btfss	status,2,c
  4342  00229C  D009               	goto	l533
  4343  00229E  0E00               	movlw	0
  4344  0022A0  6E01               	movwf	?__div_to_l_,c
  4345  0022A2  0E00               	movlw	0
  4346  0022A4  6E02               	movwf	?__div_to_l_+1,c
  4347  0022A6  0E00               	movlw	0
  4348  0022A8  6E03               	movwf	?__div_to_l_+2,c
  4349  0022AA  0E00               	movlw	0
  4350  0022AC  6E04               	movwf	?__div_to_l_+3,c
  4351  0022AE  0012               	return	
  4352  0022B0                     l533:
  4353  0022B0  8E03               	bsf	__div_to_l_@f1+2,7,c
  4354  0022B2  0EFF               	movlw	255
  4355  0022B4  1601               	andwf	__div_to_l_@f1,f,c
  4356  0022B6  0EFF               	movlw	255
  4357  0022B8  1602               	andwf	__div_to_l_@f1+1,f,c
  4358  0022BA  0EFF               	movlw	255
  4359  0022BC  1603               	andwf	__div_to_l_@f1+2,f,c
  4360  0022BE  0E00               	movlw	0
  4361  0022C0  1604               	andwf	__div_to_l_@f1+3,f,c
  4362  0022C2  8E06               	bsf	__div_to_l_@f2+2,7,c
  4363  0022C4  0EFF               	movlw	255
  4364  0022C6  1604               	andwf	__div_to_l_@f2,f,c
  4365  0022C8  0EFF               	movlw	255
  4366  0022CA  1605               	andwf	__div_to_l_@f2+1,f,c
  4367  0022CC  0EFF               	movlw	255
  4368  0022CE  1606               	andwf	__div_to_l_@f2+2,f,c
  4369  0022D0  0E00               	movlw	0
  4370  0022D2  1607               	andwf	__div_to_l_@f2+3,f,c
  4371  0022D4  0E00               	movlw	0
  4372  0022D6  6E07               	movwf	__div_to_l_@quot,c
  4373  0022D8  0E00               	movlw	0
  4374  0022DA  6E08               	movwf	__div_to_l_@quot+1,c
  4375  0022DC  0E00               	movlw	0
  4376  0022DE  6E09               	movwf	__div_to_l_@quot+2,c
  4377  0022E0  0E00               	movlw	0
  4378  0022E2  6E0A               	movwf	__div_to_l_@quot+3,c
  4379  0022E4  0E7F               	movlw	127
  4380  0022E6  5E0C               	subwf	__div_to_l_@exp1,f,c
  4381  0022E8  500B               	movf	__div_to_l_@cntr,w,c
  4382  0022EA  0FA0               	addlw	160
  4383  0022EC  5E0C               	subwf	__div_to_l_@exp1,f,c
  4384  0022EE  0E20               	movlw	32
  4385  0022F0  6E0B               	movwf	__div_to_l_@cntr,c
  4386  0022F2  90D8               	bcf	status,0,c
  4387  0022F4  3607               	rlcf	__div_to_l_@quot,f,c
  4388  0022F6  3608               	rlcf	__div_to_l_@quot+1,f,c
  4389  0022F8  3609               	rlcf	__div_to_l_@quot+2,f,c
  4390  0022FA  360A               	rlcf	__div_to_l_@quot+3,f,c
  4391  0022FC  5004               	movf	__div_to_l_@f2,w,c
  4392  0022FE  5C01               	subwf	__div_to_l_@f1,w,c
  4393  002300  5005               	movf	__div_to_l_@f2+1,w,c
  4394  002302  5802               	subwfb	__div_to_l_@f1+1,w,c
  4395  002304  5006               	movf	__div_to_l_@f2+2,w,c
  4396  002306  5803               	subwfb	__div_to_l_@f1+2,w,c
  4397  002308  5007               	movf	__div_to_l_@f2+3,w,c
  4398  00230A  5804               	subwfb	__div_to_l_@f1+3,w,c
  4399  00230C  A0D8               	btfss	status,0,c
  4400  00230E  D009               	goto	l535
  4401  002310  5004               	movf	__div_to_l_@f2,w,c
  4402  002312  5E01               	subwf	__div_to_l_@f1,f,c
  4403  002314  5005               	movf	__div_to_l_@f2+1,w,c
  4404  002316  5A02               	subwfb	__div_to_l_@f1+1,f,c
  4405  002318  5006               	movf	__div_to_l_@f2+2,w,c
  4406  00231A  5A03               	subwfb	__div_to_l_@f1+2,f,c
  4407  00231C  5007               	movf	__div_to_l_@f2+3,w,c
  4408  00231E  5A04               	subwfb	__div_to_l_@f1+3,f,c
  4409  002320  8007               	bsf	__div_to_l_@quot,0,c
  4410  002322                     l535:
  4411  002322  90D8               	bcf	status,0,c
  4412  002324  3601               	rlcf	__div_to_l_@f1,f,c
  4413  002326  3602               	rlcf	__div_to_l_@f1+1,f,c
  4414  002328  3603               	rlcf	__div_to_l_@f1+2,f,c
  4415  00232A  3604               	rlcf	__div_to_l_@f1+3,f,c
  4416  00232C  2E0B               	decfsz	__div_to_l_@cntr,f,c
  4417  00232E  D7E1               	goto	l534
  4418  002330  AE0C               	btfss	__div_to_l_@exp1,7,c
  4419  002332  D016               	goto	l537
  4420  002334  500C               	movf	__div_to_l_@exp1,w,c
  4421  002336  0A80               	xorlw	128
  4422  002338  0F9F               	addlw	159
  4423  00233A  B0D8               	btfsc	status,0,c
  4424  00233C  D009               	goto	l538
  4425  00233E  0E00               	movlw	0
  4426  002340  6E01               	movwf	?__div_to_l_,c
  4427  002342  0E00               	movlw	0
  4428  002344  6E02               	movwf	?__div_to_l_+1,c
  4429  002346  0E00               	movlw	0
  4430  002348  6E03               	movwf	?__div_to_l_+2,c
  4431  00234A  0E00               	movlw	0
  4432  00234C  6E04               	movwf	?__div_to_l_+3,c
  4433  00234E  0012               	return	
  4434  002350                     l538:
  4435  002350  90D8               	bcf	status,0,c
  4436  002352  320A               	rrcf	__div_to_l_@quot+3,f,c
  4437  002354  3209               	rrcf	__div_to_l_@quot+2,f,c
  4438  002356  3208               	rrcf	__div_to_l_@quot+1,f,c
  4439  002358  3207               	rrcf	__div_to_l_@quot,f,c
  4440  00235A  3E0C               	incfsz	__div_to_l_@exp1,f,c
  4441  00235C  D7F9               	goto	l538
  4442  00235E  D015               	goto	u2400
  4443  002360                     l537:
  4444  002360  0E1F               	movlw	31
  4445  002362  640C               	cpfsgt	__div_to_l_@exp1,c
  4446  002364  D00F               	goto	l543
  4447  002366  0E00               	movlw	0
  4448  002368  6E01               	movwf	?__div_to_l_,c
  4449  00236A  0E00               	movlw	0
  4450  00236C  6E02               	movwf	?__div_to_l_+1,c
  4451  00236E  0E00               	movlw	0
  4452  002370  6E03               	movwf	?__div_to_l_+2,c
  4453  002372  0E00               	movlw	0
  4454  002374  6E04               	movwf	?__div_to_l_+3,c
  4455  002376  0012               	return	
  4456  002378  90D8               	bcf	status,0,c
  4457  00237A  3607               	rlcf	__div_to_l_@quot,f,c
  4458  00237C  3608               	rlcf	__div_to_l_@quot+1,f,c
  4459  00237E  3609               	rlcf	__div_to_l_@quot+2,f,c
  4460  002380  360A               	rlcf	__div_to_l_@quot+3,f,c
  4461  002382  060C               	decf	__div_to_l_@exp1,f,c
  4462  002384                     l543:
  4463  002384  500C               	movf	__div_to_l_@exp1,w,c
  4464  002386  A4D8               	btfss	status,2,c
  4465  002388  D7F7               	goto	l544
  4466  00238A                     u2400:
  4467  00238A  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  4468  00238E  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  4469  002392  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  4470  002396  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  4471  00239A  0012               	return		;funcret
  4472  00239C                     __end_of__div_to_l_:
  4473                           	opt stack 0
  4474                           tblptru	equ	0xFF8
  4475                           tblptrh	equ	0xFF7
  4476                           tblptrl	equ	0xFF6
  4477                           tablat	equ	0xFF5
  4478                           prodh	equ	0xFF4
  4479                           prodl	equ	0xFF3
  4480                           intcon	equ	0xFF2
  4481                           postinc0	equ	0xFEE
  4482                           wreg	equ	0xFE8
  4483                           postdec1	equ	0xFE5
  4484                           fsr1l	equ	0xFE1
  4485                           indf2	equ	0xFDF
  4486                           postinc2	equ	0xFDE
  4487                           postdec2	equ	0xFDD
  4488                           fsr2h	equ	0xFDA
  4489                           fsr2l	equ	0xFD9
  4490                           status	equ	0xFD8
  4491                           
  4492 ;; *************** function ___lltoft *****************
  4493 ;; Defined at:
  4494 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
  4495 ;; Parameters:    Size  Location     Type
  4496 ;;  c               4    8[COMRAM] unsigned long 
  4497 ;; Auto vars:     Size  Location     Type
  4498 ;;  exp             1   16[COMRAM] unsigned char 
  4499 ;; Return value:  Size  Location     Type
  4500 ;;                  3    8[COMRAM] float 
  4501 ;; Registers used:
  4502 ;;		wreg, status,2, status,0, cstack
  4503 ;; Tracked objects:
  4504 ;;		On entry : 0/0
  4505 ;;		On exit  : 0/0
  4506 ;;		Unchanged: 0/0
  4507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4508 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4509 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4510 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4511 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4512 ;;Total ram usage:        9 bytes
  4513 ;; Hardware stack levels used:    1
  4514 ;; Hardware stack levels required when called:    1
  4515 ;; This function calls:
  4516 ;;		___ftpack
  4517 ;; This function is called by:
  4518 ;;		_sprintf
  4519 ;; This function uses a non-reentrant model
  4520 ;;
  4521                           
  4522                           	psect	text15
  4523  002B6C                     __ptext15:
  4524                           	opt stack 0
  4525  002B6C                     ___lltoft:
  4526                           	opt stack 27
  4527                           
  4528                           ;incstack = 0
  4529  002B6C  0E8E               	movlw	142
  4530  002B6E  6E11               	movwf	___lltoft@exp,c
  4531  002B70  D006               	goto	l742
  4532  002B72  90D8               	bcf	status,0,c
  4533  002B74  320C               	rrcf	___lltoft@c+3,f,c
  4534  002B76  320B               	rrcf	___lltoft@c+2,f,c
  4535  002B78  320A               	rrcf	___lltoft@c+1,f,c
  4536  002B7A  3209               	rrcf	___lltoft@c,f,c
  4537  002B7C  2A11               	incf	___lltoft@exp,f,c
  4538  002B7E                     l742:
  4539  002B7E  0E00               	movlw	0
  4540  002B80  1409               	andwf	___lltoft@c,w,c
  4541  002B82  6E0D               	movwf	??___lltoft& (0+255),c
  4542  002B84  0E00               	movlw	0
  4543  002B86  140A               	andwf	___lltoft@c+1,w,c
  4544  002B88  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  4545  002B8A  0E00               	movlw	0
  4546  002B8C  140B               	andwf	___lltoft@c+2,w,c
  4547  002B8E  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  4548  002B90  0EFF               	movlw	255
  4549  002B92  140C               	andwf	___lltoft@c+3,w,c
  4550  002B94  6E10               	movwf	(??___lltoft+3)& (0+255),c
  4551  002B96  500D               	movf	??___lltoft,w,c
  4552  002B98  100E               	iorwf	??___lltoft+1,w,c
  4553  002B9A  100F               	iorwf	??___lltoft+2,w,c
  4554  002B9C  1010               	iorwf	??___lltoft+3,w,c
  4555  002B9E  A4D8               	btfss	status,2,c
  4556  002BA0  D7E8               	goto	l743
  4557  002BA2  C009  F001         	movff	___lltoft@c,___ftpack@arg
  4558  002BA6  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  4559  002BAA  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  4560  002BAE  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  4561  002BB2  0E00               	movlw	0
  4562  002BB4  6E05               	movwf	___ftpack@sign,c
  4563  002BB6  ECF8  F013         	call	___ftpack	;wreg free
  4564  002BBA  C001  F009         	movff	?___ftpack,?___lltoft
  4565  002BBE  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  4566  002BC2  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  4567  002BC6  0012               	return	
  4568  002BC8                     __end_of___lltoft:
  4569                           	opt stack 0
  4570                           tblptru	equ	0xFF8
  4571                           tblptrh	equ	0xFF7
  4572                           tblptrl	equ	0xFF6
  4573                           tablat	equ	0xFF5
  4574                           prodh	equ	0xFF4
  4575                           prodl	equ	0xFF3
  4576                           intcon	equ	0xFF2
  4577                           postinc0	equ	0xFEE
  4578                           wreg	equ	0xFE8
  4579                           postdec1	equ	0xFE5
  4580                           fsr1l	equ	0xFE1
  4581                           indf2	equ	0xFDF
  4582                           postinc2	equ	0xFDE
  4583                           postdec2	equ	0xFDD
  4584                           fsr2h	equ	0xFDA
  4585                           fsr2l	equ	0xFD9
  4586                           status	equ	0xFD8
  4587                           
  4588 ;; *************** function ___llmod *****************
  4589 ;; Defined at:
  4590 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  4591 ;; Parameters:    Size  Location     Type
  4592 ;;  dividend        4    0[COMRAM] unsigned long 
  4593 ;;  divisor         4    4[COMRAM] unsigned long 
  4594 ;; Auto vars:     Size  Location     Type
  4595 ;;  counter         1    8[COMRAM] unsigned char 
  4596 ;; Return value:  Size  Location     Type
  4597 ;;                  4    0[COMRAM] unsigned long 
  4598 ;; Registers used:
  4599 ;;		wreg, status,2, status,0
  4600 ;; Tracked objects:
  4601 ;;		On entry : 0/0
  4602 ;;		On exit  : 0/0
  4603 ;;		Unchanged: 0/0
  4604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4605 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4606 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4608 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4609 ;;Total ram usage:        9 bytes
  4610 ;; Hardware stack levels used:    1
  4611 ;; This function calls:
  4612 ;;		Nothing
  4613 ;; This function is called by:
  4614 ;;		_sprintf
  4615 ;; This function uses a non-reentrant model
  4616 ;;
  4617                           
  4618                           	psect	text16
  4619  002AA4                     __ptext16:
  4620                           	opt stack 0
  4621  002AA4                     ___llmod:
  4622                           	opt stack 28
  4623                           
  4624                           ;incstack = 0
  4625  002AA4  5005               	movf	___llmod@divisor,w,c
  4626  002AA6  1006               	iorwf	___llmod@divisor+1,w,c
  4627  002AA8  1007               	iorwf	___llmod@divisor+2,w,c
  4628  002AAA  1008               	iorwf	___llmod@divisor+3,w,c
  4629  002AAC  B4D8               	btfsc	status,2,c
  4630  002AAE  D024               	goto	l736
  4631  002AB0  0E01               	movlw	1
  4632  002AB2  6E09               	movwf	___llmod@counter,c
  4633  002AB4  D006               	goto	l731
  4634  002AB6  90D8               	bcf	status,0,c
  4635  002AB8  3605               	rlcf	___llmod@divisor,f,c
  4636  002ABA  3606               	rlcf	___llmod@divisor+1,f,c
  4637  002ABC  3607               	rlcf	___llmod@divisor+2,f,c
  4638  002ABE  3608               	rlcf	___llmod@divisor+3,f,c
  4639  002AC0  2A09               	incf	___llmod@counter,f,c
  4640  002AC2                     l731:
  4641  002AC2  AE08               	btfss	___llmod@divisor+3,7,c
  4642  002AC4  D7F8               	goto	l732
  4643  002AC6                     u2640:
  4644  002AC6  5005               	movf	___llmod@divisor,w,c
  4645  002AC8  5C01               	subwf	___llmod@dividend,w,c
  4646  002ACA  5006               	movf	___llmod@divisor+1,w,c
  4647  002ACC  5802               	subwfb	___llmod@dividend+1,w,c
  4648  002ACE  5007               	movf	___llmod@divisor+2,w,c
  4649  002AD0  5803               	subwfb	___llmod@dividend+2,w,c
  4650  002AD2  5008               	movf	___llmod@divisor+3,w,c
  4651  002AD4  5804               	subwfb	___llmod@dividend+3,w,c
  4652  002AD6  A0D8               	btfss	status,0,c
  4653  002AD8  D008               	goto	l735
  4654  002ADA  5005               	movf	___llmod@divisor,w,c
  4655  002ADC  5E01               	subwf	___llmod@dividend,f,c
  4656  002ADE  5006               	movf	___llmod@divisor+1,w,c
  4657  002AE0  5A02               	subwfb	___llmod@dividend+1,f,c
  4658  002AE2  5007               	movf	___llmod@divisor+2,w,c
  4659  002AE4  5A03               	subwfb	___llmod@dividend+2,f,c
  4660  002AE6  5008               	movf	___llmod@divisor+3,w,c
  4661  002AE8  5A04               	subwfb	___llmod@dividend+3,f,c
  4662  002AEA                     l735:
  4663  002AEA  90D8               	bcf	status,0,c
  4664  002AEC  3208               	rrcf	___llmod@divisor+3,f,c
  4665  002AEE  3207               	rrcf	___llmod@divisor+2,f,c
  4666  002AF0  3206               	rrcf	___llmod@divisor+1,f,c
  4667  002AF2  3205               	rrcf	___llmod@divisor,f,c
  4668  002AF4  2E09               	decfsz	___llmod@counter,f,c
  4669  002AF6  D7E7               	goto	u2640
  4670  002AF8                     l736:
  4671  002AF8  C001  F001         	movff	___llmod@dividend,?___llmod
  4672  002AFC  C002  F002         	movff	___llmod@dividend+1,?___llmod+1
  4673  002B00  C003  F003         	movff	___llmod@dividend+2,?___llmod+2
  4674  002B04  C004  F004         	movff	___llmod@dividend+3,?___llmod+3
  4675  002B08  0012               	return		;funcret
  4676  002B0A                     __end_of___llmod:
  4677                           	opt stack 0
  4678                           tblptru	equ	0xFF8
  4679                           tblptrh	equ	0xFF7
  4680                           tblptrl	equ	0xFF6
  4681                           tablat	equ	0xFF5
  4682                           prodh	equ	0xFF4
  4683                           prodl	equ	0xFF3
  4684                           intcon	equ	0xFF2
  4685                           postinc0	equ	0xFEE
  4686                           wreg	equ	0xFE8
  4687                           postdec1	equ	0xFE5
  4688                           fsr1l	equ	0xFE1
  4689                           indf2	equ	0xFDF
  4690                           postinc2	equ	0xFDE
  4691                           postdec2	equ	0xFDD
  4692                           fsr2h	equ	0xFDA
  4693                           fsr2l	equ	0xFD9
  4694                           status	equ	0xFD8
  4695                           
  4696 ;; *************** function ___lldiv *****************
  4697 ;; Defined at:
  4698 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  4699 ;; Parameters:    Size  Location     Type
  4700 ;;  dividend        4    0[COMRAM] unsigned long 
  4701 ;;  divisor         4    4[COMRAM] unsigned long 
  4702 ;; Auto vars:     Size  Location     Type
  4703 ;;  quotient        4    8[COMRAM] unsigned long 
  4704 ;;  counter         1   12[COMRAM] unsigned char 
  4705 ;; Return value:  Size  Location     Type
  4706 ;;                  4    0[COMRAM] unsigned long 
  4707 ;; Registers used:
  4708 ;;		wreg, status,2, status,0
  4709 ;; Tracked objects:
  4710 ;;		On entry : 0/0
  4711 ;;		On exit  : 0/0
  4712 ;;		Unchanged: 0/0
  4713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4714 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4715 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4717 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4718 ;;Total ram usage:       13 bytes
  4719 ;; Hardware stack levels used:    1
  4720 ;; This function calls:
  4721 ;;		Nothing
  4722 ;; This function is called by:
  4723 ;;		_sprintf
  4724 ;; This function uses a non-reentrant model
  4725 ;;
  4726                           
  4727                           	psect	text17
  4728  0029B2                     __ptext17:
  4729                           	opt stack 0
  4730  0029B2                     ___lldiv:
  4731                           	opt stack 28
  4732                           
  4733                           ;incstack = 0
  4734  0029B2  0E00               	movlw	0
  4735  0029B4  6E09               	movwf	___lldiv@quotient,c
  4736  0029B6  0E00               	movlw	0
  4737  0029B8  6E0A               	movwf	___lldiv@quotient+1,c
  4738  0029BA  0E00               	movlw	0
  4739  0029BC  6E0B               	movwf	___lldiv@quotient+2,c
  4740  0029BE  0E00               	movlw	0
  4741  0029C0  6E0C               	movwf	___lldiv@quotient+3,c
  4742  0029C2  5005               	movf	___lldiv@divisor,w,c
  4743  0029C4  1006               	iorwf	___lldiv@divisor+1,w,c
  4744  0029C6  1007               	iorwf	___lldiv@divisor+2,w,c
  4745  0029C8  1008               	iorwf	___lldiv@divisor+3,w,c
  4746  0029CA  B4D8               	btfsc	status,2,c
  4747  0029CC  D02A               	goto	l726
  4748  0029CE  0E01               	movlw	1
  4749  0029D0  6E0D               	movwf	___lldiv@counter,c
  4750  0029D2  D006               	goto	l721
  4751  0029D4  90D8               	bcf	status,0,c
  4752  0029D6  3605               	rlcf	___lldiv@divisor,f,c
  4753  0029D8  3606               	rlcf	___lldiv@divisor+1,f,c
  4754  0029DA  3607               	rlcf	___lldiv@divisor+2,f,c
  4755  0029DC  3608               	rlcf	___lldiv@divisor+3,f,c
  4756  0029DE  2A0D               	incf	___lldiv@counter,f,c
  4757  0029E0                     l721:
  4758  0029E0  AE08               	btfss	___lldiv@divisor+3,7,c
  4759  0029E2  D7F8               	goto	l722
  4760  0029E4                     u2610:
  4761  0029E4  90D8               	bcf	status,0,c
  4762  0029E6  3609               	rlcf	___lldiv@quotient,f,c
  4763  0029E8  360A               	rlcf	___lldiv@quotient+1,f,c
  4764  0029EA  360B               	rlcf	___lldiv@quotient+2,f,c
  4765  0029EC  360C               	rlcf	___lldiv@quotient+3,f,c
  4766  0029EE  5005               	movf	___lldiv@divisor,w,c
  4767  0029F0  5C01               	subwf	___lldiv@dividend,w,c
  4768  0029F2  5006               	movf	___lldiv@divisor+1,w,c
  4769  0029F4  5802               	subwfb	___lldiv@dividend+1,w,c
  4770  0029F6  5007               	movf	___lldiv@divisor+2,w,c
  4771  0029F8  5803               	subwfb	___lldiv@dividend+2,w,c
  4772  0029FA  5008               	movf	___lldiv@divisor+3,w,c
  4773  0029FC  5804               	subwfb	___lldiv@dividend+3,w,c
  4774  0029FE  A0D8               	btfss	status,0,c
  4775  002A00  D009               	goto	l725
  4776  002A02  5005               	movf	___lldiv@divisor,w,c
  4777  002A04  5E01               	subwf	___lldiv@dividend,f,c
  4778  002A06  5006               	movf	___lldiv@divisor+1,w,c
  4779  002A08  5A02               	subwfb	___lldiv@dividend+1,f,c
  4780  002A0A  5007               	movf	___lldiv@divisor+2,w,c
  4781  002A0C  5A03               	subwfb	___lldiv@dividend+2,f,c
  4782  002A0E  5008               	movf	___lldiv@divisor+3,w,c
  4783  002A10  5A04               	subwfb	___lldiv@dividend+3,f,c
  4784  002A12  8009               	bsf	___lldiv@quotient,0,c
  4785  002A14                     l725:
  4786  002A14  90D8               	bcf	status,0,c
  4787  002A16  3208               	rrcf	___lldiv@divisor+3,f,c
  4788  002A18  3207               	rrcf	___lldiv@divisor+2,f,c
  4789  002A1A  3206               	rrcf	___lldiv@divisor+1,f,c
  4790  002A1C  3205               	rrcf	___lldiv@divisor,f,c
  4791  002A1E  2E0D               	decfsz	___lldiv@counter,f,c
  4792  002A20  D7E1               	goto	u2610
  4793  002A22                     l726:
  4794  002A22  C009  F001         	movff	___lldiv@quotient,?___lldiv
  4795  002A26  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  4796  002A2A  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  4797  002A2E  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  4798  002A32  0012               	return		;funcret
  4799  002A34                     __end_of___lldiv:
  4800                           	opt stack 0
  4801                           tblptru	equ	0xFF8
  4802                           tblptrh	equ	0xFF7
  4803                           tblptrl	equ	0xFF6
  4804                           tablat	equ	0xFF5
  4805                           prodh	equ	0xFF4
  4806                           prodl	equ	0xFF3
  4807                           intcon	equ	0xFF2
  4808                           postinc0	equ	0xFEE
  4809                           wreg	equ	0xFE8
  4810                           postdec1	equ	0xFE5
  4811                           fsr1l	equ	0xFE1
  4812                           indf2	equ	0xFDF
  4813                           postinc2	equ	0xFDE
  4814                           postdec2	equ	0xFDD
  4815                           fsr2h	equ	0xFDA
  4816                           fsr2l	equ	0xFD9
  4817                           status	equ	0xFD8
  4818                           
  4819 ;; *************** function ___fttol *****************
  4820 ;; Defined at:
  4821 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  4822 ;; Parameters:    Size  Location     Type
  4823 ;;  f1              3   42[COMRAM] float 
  4824 ;; Auto vars:     Size  Location     Type
  4825 ;;  lval            4   52[COMRAM] unsigned long 
  4826 ;;  exp1            1   56[COMRAM] unsigned char 
  4827 ;;  sign1           1   51[COMRAM] unsigned char 
  4828 ;; Return value:  Size  Location     Type
  4829 ;;                  4   42[COMRAM] long 
  4830 ;; Registers used:
  4831 ;;		wreg, status,2, status,0
  4832 ;; Tracked objects:
  4833 ;;		On entry : 0/0
  4834 ;;		On exit  : 0/0
  4835 ;;		Unchanged: 0/0
  4836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4837 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4838 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4839 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4840 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4841 ;;Total ram usage:       15 bytes
  4842 ;; Hardware stack levels used:    1
  4843 ;; This function calls:
  4844 ;;		Nothing
  4845 ;; This function is called by:
  4846 ;;		_sprintf
  4847 ;; This function uses a non-reentrant model
  4848 ;;
  4849                           
  4850                           	psect	text18
  4851  002490                     __ptext18:
  4852                           	opt stack 0
  4853  002490                     ___fttol:
  4854                           	opt stack 28
  4855                           
  4856                           ;incstack = 0
  4857  002490  C02D  F02F         	movff	___fttol@f1+2,??___fttol
  4858  002494  6A30               	clrf	(??___fttol+1)& (0+255),c
  4859  002496  6A31               	clrf	(??___fttol+2)& (0+255),c
  4860  002498  342C               	rlcf	___fttol@f1+1,w,c
  4861  00249A  362F               	rlcf	??___fttol& (0+255),f,c
  4862  00249C  E301               	bnc	u2521
  4863  00249E  8030               	bsf	(??___fttol+1)& (0+255),0,c
  4864  0024A0                     u2521:
  4865  0024A0  502F               	movf	??___fttol,w,c
  4866  0024A2  6E39               	movwf	___fttol@exp1,c
  4867  0024A4  5039               	movf	___fttol@exp1,w,c
  4868  0024A6  A4D8               	btfss	status,2,c
  4869  0024A8  D009               	goto	l680
  4870  0024AA  0E00               	movlw	0
  4871  0024AC  6E2B               	movwf	?___fttol,c
  4872  0024AE  0E00               	movlw	0
  4873  0024B0  6E2C               	movwf	?___fttol+1,c
  4874  0024B2  0E00               	movlw	0
  4875  0024B4  6E2D               	movwf	?___fttol+2,c
  4876  0024B6  0E00               	movlw	0
  4877  0024B8  6E2E               	movwf	?___fttol+3,c
  4878  0024BA  0012               	return	
  4879  0024BC                     l680:
  4880  0024BC  0E17               	movlw	23
  4881  0024BE  6E2F               	movwf	??___fttol& (0+255),c
  4882  0024C0  C02B  F030         	movff	___fttol@f1,??___fttol+1
  4883  0024C4  C02C  F031         	movff	___fttol@f1+1,??___fttol+2
  4884  0024C8  C02D  F032         	movff	___fttol@f1+2,??___fttol+3
  4885  0024CC  282F               	incf	??___fttol,w,c
  4886  0024CE  6E33               	movwf	(??___fttol+4)& (0+255),c
  4887  0024D0  D004               	goto	u2540
  4888  0024D2                     u2545:
  4889  0024D2  90D8               	bcf	status,0,c
  4890  0024D4  3232               	rrcf	??___fttol+3,f,c
  4891  0024D6  3231               	rrcf	??___fttol+2,f,c
  4892  0024D8  3230               	rrcf	??___fttol+1,f,c
  4893  0024DA                     u2540:
  4894  0024DA  2E33               	decfsz	(??___fttol+4)& (0+255),f,c
  4895  0024DC  D7FA               	goto	u2545
  4896  0024DE  5030               	movf	??___fttol+1,w,c
  4897  0024E0  6E34               	movwf	___fttol@sign1,c
  4898  0024E2  8E2C               	bsf	___fttol@f1+1,7,c
  4899  0024E4  0EFF               	movlw	255
  4900  0024E6  162B               	andwf	___fttol@f1,f,c
  4901  0024E8  0EFF               	movlw	255
  4902  0024EA  162C               	andwf	___fttol@f1+1,f,c
  4903  0024EC  0E00               	movlw	0
  4904  0024EE  162D               	andwf	___fttol@f1+2,f,c
  4905  0024F0  502B               	movf	___fttol@f1,w,c
  4906  0024F2  6E35               	movwf	___fttol@lval,c
  4907  0024F4  502C               	movf	___fttol@f1+1,w,c
  4908  0024F6  6E36               	movwf	___fttol@lval+1,c
  4909  0024F8  502D               	movf	___fttol@f1+2,w,c
  4910  0024FA  6E37               	movwf	___fttol@lval+2,c
  4911  0024FC  6A38               	clrf	___fttol@lval+3,c
  4912  0024FE  0E8E               	movlw	142
  4913  002500  5E39               	subwf	___fttol@exp1,f,c
  4914  002502  AE39               	btfss	___fttol@exp1,7,c
  4915  002504  D016               	goto	l682
  4916  002506  5039               	movf	___fttol@exp1,w,c
  4917  002508  0A80               	xorlw	128
  4918  00250A  0F8F               	addlw	143
  4919  00250C  B0D8               	btfsc	status,0,c
  4920  00250E  D009               	goto	l683
  4921  002510  0E00               	movlw	0
  4922  002512  6E2B               	movwf	?___fttol,c
  4923  002514  0E00               	movlw	0
  4924  002516  6E2C               	movwf	?___fttol+1,c
  4925  002518  0E00               	movlw	0
  4926  00251A  6E2D               	movwf	?___fttol+2,c
  4927  00251C  0E00               	movlw	0
  4928  00251E  6E2E               	movwf	?___fttol+3,c
  4929  002520  0012               	return	
  4930  002522                     l683:
  4931  002522  90D8               	bcf	status,0,c
  4932  002524  3238               	rrcf	___fttol@lval+3,f,c
  4933  002526  3237               	rrcf	___fttol@lval+2,f,c
  4934  002528  3236               	rrcf	___fttol@lval+1,f,c
  4935  00252A  3235               	rrcf	___fttol@lval,f,c
  4936  00252C  3E39               	incfsz	___fttol@exp1,f,c
  4937  00252E  D7F9               	goto	l683
  4938  002530  D015               	goto	u2580
  4939  002532                     l682:
  4940  002532  0E17               	movlw	23
  4941  002534  6439               	cpfsgt	___fttol@exp1,c
  4942  002536  D00F               	goto	l688
  4943  002538  0E00               	movlw	0
  4944  00253A  6E2B               	movwf	?___fttol,c
  4945  00253C  0E00               	movlw	0
  4946  00253E  6E2C               	movwf	?___fttol+1,c
  4947  002540  0E00               	movlw	0
  4948  002542  6E2D               	movwf	?___fttol+2,c
  4949  002544  0E00               	movlw	0
  4950  002546  6E2E               	movwf	?___fttol+3,c
  4951  002548  0012               	return	
  4952  00254A  90D8               	bcf	status,0,c
  4953  00254C  3635               	rlcf	___fttol@lval,f,c
  4954  00254E  3636               	rlcf	___fttol@lval+1,f,c
  4955  002550  3637               	rlcf	___fttol@lval+2,f,c
  4956  002552  3638               	rlcf	___fttol@lval+3,f,c
  4957  002554  0639               	decf	___fttol@exp1,f,c
  4958  002556                     l688:
  4959  002556  5039               	movf	___fttol@exp1,w,c
  4960  002558  A4D8               	btfss	status,2,c
  4961  00255A  D7F7               	goto	l689
  4962  00255C                     u2580:
  4963  00255C  5034               	movf	___fttol@sign1,w,c
  4964  00255E  B4D8               	btfsc	status,2,c
  4965  002560  D008               	goto	l691
  4966  002562  1E38               	comf	___fttol@lval+3,f,c
  4967  002564  1E37               	comf	___fttol@lval+2,f,c
  4968  002566  1E36               	comf	___fttol@lval+1,f,c
  4969  002568  6C35               	negf	___fttol@lval,c
  4970  00256A  0E00               	movlw	0
  4971  00256C  2236               	addwfc	___fttol@lval+1,f,c
  4972  00256E  2237               	addwfc	___fttol@lval+2,f,c
  4973  002570  2238               	addwfc	___fttol@lval+3,f,c
  4974  002572                     l691:
  4975  002572  C035  F02B         	movff	___fttol@lval,?___fttol
  4976  002576  C036  F02C         	movff	___fttol@lval+1,?___fttol+1
  4977  00257A  C037  F02D         	movff	___fttol@lval+2,?___fttol+2
  4978  00257E  C038  F02E         	movff	___fttol@lval+3,?___fttol+3
  4979  002582  0012               	return	
  4980  002584                     __end_of___fttol:
  4981                           	opt stack 0
  4982                           tblptru	equ	0xFF8
  4983                           tblptrh	equ	0xFF7
  4984                           tblptrl	equ	0xFF6
  4985                           tablat	equ	0xFF5
  4986                           prodh	equ	0xFF4
  4987                           prodl	equ	0xFF3
  4988                           intcon	equ	0xFF2
  4989                           postinc0	equ	0xFEE
  4990                           wreg	equ	0xFE8
  4991                           postdec1	equ	0xFE5
  4992                           fsr1l	equ	0xFE1
  4993                           indf2	equ	0xFDF
  4994                           postinc2	equ	0xFDE
  4995                           postdec2	equ	0xFDD
  4996                           fsr2h	equ	0xFDA
  4997                           fsr2l	equ	0xFD9
  4998                           status	equ	0xFD8
  4999                           
  5000 ;; *************** function ___ftsub *****************
  5001 ;; Defined at:
  5002 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
  5003 ;; Parameters:    Size  Location     Type
  5004 ;;  f1              3   57[COMRAM] float 
  5005 ;;  f2              3   60[COMRAM] float 
  5006 ;; Auto vars:     Size  Location     Type
  5007 ;;		None
  5008 ;; Return value:  Size  Location     Type
  5009 ;;                  3   57[COMRAM] float 
  5010 ;; Registers used:
  5011 ;;		wreg, status,2, status,0, cstack
  5012 ;; Tracked objects:
  5013 ;;		On entry : 0/0
  5014 ;;		On exit  : 0/0
  5015 ;;		Unchanged: 0/0
  5016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5017 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5018 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5019 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5020 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5021 ;;Total ram usage:        6 bytes
  5022 ;; Hardware stack levels used:    1
  5023 ;; Hardware stack levels required when called:    2
  5024 ;; This function calls:
  5025 ;;		___ftadd
  5026 ;; This function is called by:
  5027 ;;		_sprintf
  5028 ;; This function uses a non-reentrant model
  5029 ;;
  5030                           
  5031                           	psect	text19
  5032  002CFE                     __ptext19:
  5033                           	opt stack 0
  5034  002CFE                     ___ftsub:
  5035                           	opt stack 26
  5036                           
  5037                           ;incstack = 0
  5038  002CFE  503D               	movf	___ftsub@f2,w,c
  5039  002D00  103E               	iorwf	___ftsub@f2+1,w,c
  5040  002D02  103F               	iorwf	___ftsub@f2+2,w,c
  5041  002D04  B4D8               	btfsc	status,2,c
  5042  002D06  D006               	goto	l676
  5043  002D08  0E00               	movlw	0
  5044  002D0A  1A3D               	xorwf	___ftsub@f2,f,c
  5045  002D0C  0E00               	movlw	0
  5046  002D0E  1A3E               	xorwf	___ftsub@f2+1,f,c
  5047  002D10  0E80               	movlw	128
  5048  002D12  1A3F               	xorwf	___ftsub@f2+2,f,c
  5049  002D14                     l676:
  5050  002D14  C03A  F02E         	movff	___ftsub@f1,___ftadd@f1
  5051  002D18  C03B  F02F         	movff	___ftsub@f1+1,___ftadd@f1+1
  5052  002D1C  C03C  F030         	movff	___ftsub@f1+2,___ftadd@f1+2
  5053  002D20  C03D  F031         	movff	___ftsub@f2,___ftadd@f2
  5054  002D24  C03E  F032         	movff	___ftsub@f2+1,___ftadd@f2+1
  5055  002D28  C03F  F033         	movff	___ftsub@f2+2,___ftadd@f2+2
  5056  002D2C  ECCB  F00F         	call	___ftadd	;wreg free
  5057  002D30  C02E  F03A         	movff	?___ftadd,?___ftsub
  5058  002D34  C02F  F03B         	movff	?___ftadd+1,?___ftsub+1
  5059  002D38  C030  F03C         	movff	?___ftadd+2,?___ftsub+2
  5060  002D3C  0012               	return	
  5061  002D3E                     __end_of___ftsub:
  5062                           	opt stack 0
  5063                           tblptru	equ	0xFF8
  5064                           tblptrh	equ	0xFF7
  5065                           tblptrl	equ	0xFF6
  5066                           tablat	equ	0xFF5
  5067                           prodh	equ	0xFF4
  5068                           prodl	equ	0xFF3
  5069                           intcon	equ	0xFF2
  5070                           postinc0	equ	0xFEE
  5071                           wreg	equ	0xFE8
  5072                           postdec1	equ	0xFE5
  5073                           fsr1l	equ	0xFE1
  5074                           indf2	equ	0xFDF
  5075                           postinc2	equ	0xFDE
  5076                           postdec2	equ	0xFDD
  5077                           fsr2h	equ	0xFDA
  5078                           fsr2l	equ	0xFD9
  5079                           status	equ	0xFD8
  5080                           
  5081 ;; *************** function ___ftadd *****************
  5082 ;; Defined at:
  5083 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  5084 ;; Parameters:    Size  Location     Type
  5085 ;;  f1              3   45[COMRAM] float 
  5086 ;;  f2              3   48[COMRAM] float 
  5087 ;; Auto vars:     Size  Location     Type
  5088 ;;  exp1            1   56[COMRAM] unsigned char 
  5089 ;;  exp2            1   55[COMRAM] unsigned char 
  5090 ;;  sign            1   54[COMRAM] unsigned char 
  5091 ;; Return value:  Size  Location     Type
  5092 ;;                  3   45[COMRAM] float 
  5093 ;; Registers used:
  5094 ;;		wreg, status,2, status,0, cstack
  5095 ;; Tracked objects:
  5096 ;;		On entry : 0/0
  5097 ;;		On exit  : 0/0
  5098 ;;		Unchanged: 0/0
  5099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5100 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5101 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5102 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5103 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5104 ;;Total ram usage:       12 bytes
  5105 ;; Hardware stack levels used:    1
  5106 ;; Hardware stack levels required when called:    1
  5107 ;; This function calls:
  5108 ;;		___ftpack
  5109 ;; This function is called by:
  5110 ;;		_sprintf
  5111 ;;		___ftsub
  5112 ;; This function uses a non-reentrant model
  5113 ;;
  5114                           
  5115                           	psect	text20
  5116  001F96                     __ptext20:
  5117                           	opt stack 0
  5118  001F96                     ___ftadd:
  5119                           	opt stack 26
  5120                           
  5121                           ;incstack = 0
  5122  001F96  C030  F034         	movff	___ftadd@f1+2,??___ftadd
  5123  001F9A  6A35               	clrf	(??___ftadd+1)& (0+255),c
  5124  001F9C  6A36               	clrf	(??___ftadd+2)& (0+255),c
  5125  001F9E  342F               	rlcf	___ftadd@f1+1,w,c
  5126  001FA0  3634               	rlcf	??___ftadd& (0+255),f,c
  5127  001FA2  E301               	bnc	u1761
  5128  001FA4  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  5129  001FA6                     u1761:
  5130  001FA6  5034               	movf	??___ftadd,w,c
  5131  001FA8  6E39               	movwf	___ftadd@exp1,c
  5132  001FAA  C033  F034         	movff	___ftadd@f2+2,??___ftadd
  5133  001FAE  6A35               	clrf	(??___ftadd+1)& (0+255),c
  5134  001FB0  6A36               	clrf	(??___ftadd+2)& (0+255),c
  5135  001FB2  3432               	rlcf	___ftadd@f2+1,w,c
  5136  001FB4  3634               	rlcf	??___ftadd& (0+255),f,c
  5137  001FB6  E301               	bnc	u1771
  5138  001FB8  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  5139  001FBA                     u1771:
  5140  001FBA  5034               	movf	??___ftadd,w,c
  5141  001FBC  6E38               	movwf	___ftadd@exp2,c
  5142  001FBE  5039               	movf	___ftadd@exp1,w,c
  5143  001FC0  B4D8               	btfsc	status,2,c
  5144  001FC2  D00B               	goto	u1800
  5145  001FC4  5038               	movf	___ftadd@exp2,w,c
  5146  001FC6  5C39               	subwf	___ftadd@exp1,w,c
  5147  001FC8  B0D8               	btfsc	status,0,c
  5148  001FCA  D00E               	goto	l594
  5149  001FCC  5039               	movf	___ftadd@exp1,w,c
  5150  001FCE  0800               	sublw	0
  5151  001FD0  2438               	addwf	___ftadd@exp2,w,c
  5152  001FD2  6E34               	movwf	??___ftadd& (0+255),c
  5153  001FD4  0E18               	movlw	24
  5154  001FD6  6434               	cpfsgt	??___ftadd,c
  5155  001FD8  D007               	goto	l594
  5156  001FDA                     u1800:
  5157  001FDA  C031  F02E         	movff	___ftadd@f2,?___ftadd
  5158  001FDE  C032  F02F         	movff	___ftadd@f2+1,?___ftadd+1
  5159  001FE2  C033  F030         	movff	___ftadd@f2+2,?___ftadd+2
  5160  001FE6  0012               	return	
  5161  001FE8                     l594:
  5162  001FE8  5038               	movf	___ftadd@exp2,w,c
  5163  001FEA  B4D8               	btfsc	status,2,c
  5164  001FEC  D00B               	goto	u1830
  5165  001FEE  5039               	movf	___ftadd@exp1,w,c
  5166  001FF0  5C38               	subwf	___ftadd@exp2,w,c
  5167  001FF2  B0D8               	btfsc	status,0,c
  5168  001FF4  D00E               	goto	l598
  5169  001FF6  5038               	movf	___ftadd@exp2,w,c
  5170  001FF8  0800               	sublw	0
  5171  001FFA  2439               	addwf	___ftadd@exp1,w,c
  5172  001FFC  6E34               	movwf	??___ftadd& (0+255),c
  5173  001FFE  0E18               	movlw	24
  5174  002000  6434               	cpfsgt	??___ftadd,c
  5175  002002  D007               	goto	l598
  5176  002004                     u1830:
  5177  002004  C02E  F02E         	movff	___ftadd@f1,?___ftadd
  5178  002008  C02F  F02F         	movff	___ftadd@f1+1,?___ftadd+1
  5179  00200C  C030  F030         	movff	___ftadd@f1+2,?___ftadd+2
  5180  002010  0012               	return	
  5181  002012                     l598:
  5182  002012  0E06               	movlw	6
  5183  002014  6E37               	movwf	___ftadd@sign,c
  5184  002016  BE30               	btfsc	___ftadd@f1+2,7,c
  5185  002018  8E37               	bsf	___ftadd@sign,7,c
  5186  00201A  BE33               	btfsc	___ftadd@f2+2,7,c
  5187  00201C  8C37               	bsf	___ftadd@sign,6,c
  5188  00201E  8E2F               	bsf	___ftadd@f1+1,7,c
  5189  002020  0EFF               	movlw	255
  5190  002022  162E               	andwf	___ftadd@f1,f,c
  5191  002024  0EFF               	movlw	255
  5192  002026  162F               	andwf	___ftadd@f1+1,f,c
  5193  002028  0E00               	movlw	0
  5194  00202A  1630               	andwf	___ftadd@f1+2,f,c
  5195  00202C  8E32               	bsf	___ftadd@f2+1,7,c
  5196  00202E  0EFF               	movlw	255
  5197  002030  1631               	andwf	___ftadd@f2,f,c
  5198  002032  0EFF               	movlw	255
  5199  002034  1632               	andwf	___ftadd@f2+1,f,c
  5200  002036  0E00               	movlw	0
  5201  002038  1633               	andwf	___ftadd@f2+2,f,c
  5202  00203A  5038               	movf	___ftadd@exp2,w,c
  5203  00203C  5C39               	subwf	___ftadd@exp1,w,c
  5204  00203E  B0D8               	btfsc	status,0,c
  5205  002040  D01B               	goto	l603
  5206  002042                     u1860:
  5207  002042  90D8               	bcf	status,0,c
  5208  002044  3631               	rlcf	___ftadd@f2,f,c
  5209  002046  3632               	rlcf	___ftadd@f2+1,f,c
  5210  002048  3633               	rlcf	___ftadd@f2+2,f,c
  5211  00204A  0638               	decf	___ftadd@exp2,f,c
  5212  00204C  5039               	movf	___ftadd@exp1,w,c
  5213  00204E  1838               	xorwf	___ftadd@exp2,w,c
  5214  002050  B4D8               	btfsc	status,2,c
  5215  002052  D00D               	goto	l608
  5216  002054  0637               	decf	___ftadd@sign,f,c
  5217  002056  C037  F034         	movff	___ftadd@sign,??___ftadd
  5218  00205A  0E07               	movlw	7
  5219  00205C  1634               	andwf	??___ftadd,f,c
  5220  00205E  B4D8               	btfsc	status,2,c
  5221  002060  D006               	goto	l608
  5222  002062  D7EF               	goto	u1860
  5223  002064  90D8               	bcf	status,0,c
  5224  002066  3230               	rrcf	___ftadd@f1+2,f,c
  5225  002068  322F               	rrcf	___ftadd@f1+1,f,c
  5226  00206A  322E               	rrcf	___ftadd@f1,f,c
  5227  00206C  2A39               	incf	___ftadd@exp1,f,c
  5228  00206E                     l608:
  5229  00206E  5038               	movf	___ftadd@exp2,w,c
  5230  002070  1839               	xorwf	___ftadd@exp1,w,c
  5231  002072  B4D8               	btfsc	status,2,c
  5232  002074  D01F               	goto	u1930
  5233  002076  D7F6               	goto	l609
  5234  002078                     l603:
  5235  002078  5039               	movf	___ftadd@exp1,w,c
  5236  00207A  5C38               	subwf	___ftadd@exp2,w,c
  5237  00207C  B0D8               	btfsc	status,0,c
  5238  00207E  D01A               	goto	u1930
  5239  002080                     u1900:
  5240  002080  90D8               	bcf	status,0,c
  5241  002082  362E               	rlcf	___ftadd@f1,f,c
  5242  002084  362F               	rlcf	___ftadd@f1+1,f,c
  5243  002086  3630               	rlcf	___ftadd@f1+2,f,c
  5244  002088  0639               	decf	___ftadd@exp1,f,c
  5245  00208A  5039               	movf	___ftadd@exp1,w,c
  5246  00208C  1838               	xorwf	___ftadd@exp2,w,c
  5247  00208E  B4D8               	btfsc	status,2,c
  5248  002090  D00D               	goto	l617
  5249  002092  0637               	decf	___ftadd@sign,f,c
  5250  002094  C037  F034         	movff	___ftadd@sign,??___ftadd
  5251  002098  0E07               	movlw	7
  5252  00209A  1634               	andwf	??___ftadd,f,c
  5253  00209C  B4D8               	btfsc	status,2,c
  5254  00209E  D006               	goto	l617
  5255  0020A0  D7EF               	goto	u1900
  5256  0020A2  90D8               	bcf	status,0,c
  5257  0020A4  3233               	rrcf	___ftadd@f2+2,f,c
  5258  0020A6  3232               	rrcf	___ftadd@f2+1,f,c
  5259  0020A8  3231               	rrcf	___ftadd@f2,f,c
  5260  0020AA  2A38               	incf	___ftadd@exp2,f,c
  5261  0020AC                     l617:
  5262  0020AC  5038               	movf	___ftadd@exp2,w,c
  5263  0020AE  1839               	xorwf	___ftadd@exp1,w,c
  5264  0020B0  A4D8               	btfss	status,2,c
  5265  0020B2  D7F7               	goto	l618
  5266  0020B4                     u1930:
  5267  0020B4  AE37               	btfss	___ftadd@sign,7,c
  5268  0020B6  D00C               	goto	l620
  5269  0020B8  0EFF               	movlw	255
  5270  0020BA  1A2E               	xorwf	___ftadd@f1,f,c
  5271  0020BC  0EFF               	movlw	255
  5272  0020BE  1A2F               	xorwf	___ftadd@f1+1,f,c
  5273  0020C0  0EFF               	movlw	255
  5274  0020C2  1A30               	xorwf	___ftadd@f1+2,f,c
  5275  0020C4  0E01               	movlw	1
  5276  0020C6  262E               	addwf	___ftadd@f1,f,c
  5277  0020C8  0E00               	movlw	0
  5278  0020CA  222F               	addwfc	___ftadd@f1+1,f,c
  5279  0020CC  0E00               	movlw	0
  5280  0020CE  2230               	addwfc	___ftadd@f1+2,f,c
  5281  0020D0                     l620:
  5282  0020D0  AC37               	btfss	___ftadd@sign,6,c
  5283  0020D2  D00C               	goto	l621
  5284  0020D4  0EFF               	movlw	255
  5285  0020D6  1A31               	xorwf	___ftadd@f2,f,c
  5286  0020D8  0EFF               	movlw	255
  5287  0020DA  1A32               	xorwf	___ftadd@f2+1,f,c
  5288  0020DC  0EFF               	movlw	255
  5289  0020DE  1A33               	xorwf	___ftadd@f2+2,f,c
  5290  0020E0  0E01               	movlw	1
  5291  0020E2  2631               	addwf	___ftadd@f2,f,c
  5292  0020E4  0E00               	movlw	0
  5293  0020E6  2232               	addwfc	___ftadd@f2+1,f,c
  5294  0020E8  0E00               	movlw	0
  5295  0020EA  2233               	addwfc	___ftadd@f2+2,f,c
  5296  0020EC                     l621:
  5297  0020EC  0E00               	movlw	0
  5298  0020EE  6E37               	movwf	___ftadd@sign,c
  5299  0020F0  502E               	movf	___ftadd@f1,w,c
  5300  0020F2  2631               	addwf	___ftadd@f2,f,c
  5301  0020F4  502F               	movf	___ftadd@f1+1,w,c
  5302  0020F6  2232               	addwfc	___ftadd@f2+1,f,c
  5303  0020F8  5030               	movf	___ftadd@f1+2,w,c
  5304  0020FA  2233               	addwfc	___ftadd@f2+2,f,c
  5305  0020FC  AE33               	btfss	___ftadd@f2+2,7,c
  5306  0020FE  D00E               	goto	l622
  5307  002100  0EFF               	movlw	255
  5308  002102  1A31               	xorwf	___ftadd@f2,f,c
  5309  002104  0EFF               	movlw	255
  5310  002106  1A32               	xorwf	___ftadd@f2+1,f,c
  5311  002108  0EFF               	movlw	255
  5312  00210A  1A33               	xorwf	___ftadd@f2+2,f,c
  5313  00210C  0E01               	movlw	1
  5314  00210E  2631               	addwf	___ftadd@f2,f,c
  5315  002110  0E00               	movlw	0
  5316  002112  2232               	addwfc	___ftadd@f2+1,f,c
  5317  002114  0E00               	movlw	0
  5318  002116  2233               	addwfc	___ftadd@f2+2,f,c
  5319  002118  0E01               	movlw	1
  5320  00211A  6E37               	movwf	___ftadd@sign,c
  5321  00211C                     l622:
  5322  00211C  C031  F001         	movff	___ftadd@f2,___ftpack@arg
  5323  002120  C032  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  5324  002124  C033  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  5325  002128  C039  F004         	movff	___ftadd@exp1,___ftpack@exp
  5326  00212C  C037  F005         	movff	___ftadd@sign,___ftpack@sign
  5327  002130  ECF8  F013         	call	___ftpack	;wreg free
  5328  002134  C001  F02E         	movff	?___ftpack,?___ftadd
  5329  002138  C002  F02F         	movff	?___ftpack+1,?___ftadd+1
  5330  00213C  C003  F030         	movff	?___ftpack+2,?___ftadd+2
  5331  002140  0012               	return	
  5332  002142                     __end_of___ftadd:
  5333                           	opt stack 0
  5334                           tblptru	equ	0xFF8
  5335                           tblptrh	equ	0xFF7
  5336                           tblptrl	equ	0xFF6
  5337                           tablat	equ	0xFF5
  5338                           prodh	equ	0xFF4
  5339                           prodl	equ	0xFF3
  5340                           intcon	equ	0xFF2
  5341                           postinc0	equ	0xFEE
  5342                           wreg	equ	0xFE8
  5343                           postdec1	equ	0xFE5
  5344                           fsr1l	equ	0xFE1
  5345                           indf2	equ	0xFDF
  5346                           postinc2	equ	0xFDE
  5347                           postdec2	equ	0xFDD
  5348                           fsr2h	equ	0xFDA
  5349                           fsr2l	equ	0xFD9
  5350                           status	equ	0xFD8
  5351                           
  5352 ;; *************** function ___ftneg *****************
  5353 ;; Defined at:
  5354 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
  5355 ;; Parameters:    Size  Location     Type
  5356 ;;  f1              3    0[COMRAM] float 
  5357 ;; Auto vars:     Size  Location     Type
  5358 ;;		None
  5359 ;; Return value:  Size  Location     Type
  5360 ;;                  3    0[COMRAM] float 
  5361 ;; Registers used:
  5362 ;;		wreg, status,2, status,0
  5363 ;; Tracked objects:
  5364 ;;		On entry : 0/0
  5365 ;;		On exit  : 0/0
  5366 ;;		Unchanged: 0/0
  5367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5368 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5369 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5370 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5371 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5372 ;;Total ram usage:        3 bytes
  5373 ;; Hardware stack levels used:    1
  5374 ;; This function calls:
  5375 ;;		Nothing
  5376 ;; This function is called by:
  5377 ;;		_sprintf
  5378 ;; This function uses a non-reentrant model
  5379 ;;
  5380                           
  5381                           	psect	text21
  5382  002F78                     __ptext21:
  5383                           	opt stack 0
  5384  002F78                     ___ftneg:
  5385                           	opt stack 28
  5386                           
  5387                           ;incstack = 0
  5388  002F78  5001               	movf	___ftneg@f1,w,c
  5389  002F7A  1002               	iorwf	___ftneg@f1+1,w,c
  5390  002F7C  1003               	iorwf	___ftneg@f1+2,w,c
  5391  002F7E  B4D8               	btfsc	status,2,c
  5392  002F80  D006               	goto	l670
  5393  002F82  0E00               	movlw	0
  5394  002F84  1A01               	xorwf	___ftneg@f1,f,c
  5395  002F86  0E00               	movlw	0
  5396  002F88  1A02               	xorwf	___ftneg@f1+1,f,c
  5397  002F8A  0E80               	movlw	128
  5398  002F8C  1A03               	xorwf	___ftneg@f1+2,f,c
  5399  002F8E                     l670:
  5400  002F8E  C001  F001         	movff	___ftneg@f1,?___ftneg
  5401  002F92  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  5402  002F96  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  5403  002F9A  0012               	return		;funcret
  5404  002F9C                     __end_of___ftneg:
  5405                           	opt stack 0
  5406                           tblptru	equ	0xFF8
  5407                           tblptrh	equ	0xFF7
  5408                           tblptrl	equ	0xFF6
  5409                           tablat	equ	0xFF5
  5410                           prodh	equ	0xFF4
  5411                           prodl	equ	0xFF3
  5412                           intcon	equ	0xFF2
  5413                           postinc0	equ	0xFEE
  5414                           wreg	equ	0xFE8
  5415                           postdec1	equ	0xFE5
  5416                           fsr1l	equ	0xFE1
  5417                           indf2	equ	0xFDF
  5418                           postinc2	equ	0xFDE
  5419                           postdec2	equ	0xFDD
  5420                           fsr2h	equ	0xFDA
  5421                           fsr2l	equ	0xFD9
  5422                           status	equ	0xFD8
  5423                           
  5424 ;; *************** function ___ftge *****************
  5425 ;; Defined at:
  5426 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
  5427 ;; Parameters:    Size  Location     Type
  5428 ;;  ff1             3    0[COMRAM] float 
  5429 ;;  ff2             3    3[COMRAM] float 
  5430 ;; Auto vars:     Size  Location     Type
  5431 ;;		None
  5432 ;; Return value:  Size  Location     Type
  5433 ;;		None               void
  5434 ;; Registers used:
  5435 ;;		wreg, status,2, status,0
  5436 ;; Tracked objects:
  5437 ;;		On entry : 0/0
  5438 ;;		On exit  : 0/0
  5439 ;;		Unchanged: 0/0
  5440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5441 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5442 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5443 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5444 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5445 ;;Total ram usage:        9 bytes
  5446 ;; Hardware stack levels used:    1
  5447 ;; This function calls:
  5448 ;;		Nothing
  5449 ;; This function is called by:
  5450 ;;		_sprintf
  5451 ;; This function uses a non-reentrant model
  5452 ;;
  5453                           
  5454                           	psect	text22
  5455  00289E                     __ptext22:
  5456                           	opt stack 0
  5457  00289E                     ___ftge:
  5458                           	opt stack 28
  5459                           
  5460                           ;incstack = 0
  5461  00289E  AE03               	btfss	___ftge@ff1+2,7,c
  5462  0028A0  D016               	goto	l652
  5463  0028A2  C001  F007         	movff	___ftge@ff1,??___ftge
  5464  0028A6  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  5465  0028AA  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  5466  0028AE  1E07               	comf	??___ftge,f,c
  5467  0028B0  1E08               	comf	??___ftge+1,f,c
  5468  0028B2  1E09               	comf	??___ftge+2,f,c
  5469  0028B4  2A07               	incf	??___ftge,f,c
  5470  0028B6  0E00               	movlw	0
  5471  0028B8  2208               	addwfc	??___ftge+1,f,c
  5472  0028BA  2209               	addwfc	??___ftge+2,f,c
  5473  0028BC  0E00               	movlw	0
  5474  0028BE  2407               	addwf	??___ftge,w,c
  5475  0028C0  6E01               	movwf	___ftge@ff1,c
  5476  0028C2  0E00               	movlw	0
  5477  0028C4  2008               	addwfc	??___ftge+1,w,c
  5478  0028C6  6E02               	movwf	___ftge@ff1+1,c
  5479  0028C8  0E80               	movlw	128
  5480  0028CA  2009               	addwfc	??___ftge+2,w,c
  5481  0028CC  6E03               	movwf	___ftge@ff1+2,c
  5482  0028CE                     l652:
  5483  0028CE  AE06               	btfss	___ftge@ff2+2,7,c
  5484  0028D0  D016               	goto	l653
  5485  0028D2  C004  F007         	movff	___ftge@ff2,??___ftge
  5486  0028D6  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  5487  0028DA  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  5488  0028DE  1E07               	comf	??___ftge,f,c
  5489  0028E0  1E08               	comf	??___ftge+1,f,c
  5490  0028E2  1E09               	comf	??___ftge+2,f,c
  5491  0028E4  2A07               	incf	??___ftge,f,c
  5492  0028E6  0E00               	movlw	0
  5493  0028E8  2208               	addwfc	??___ftge+1,f,c
  5494  0028EA  2209               	addwfc	??___ftge+2,f,c
  5495  0028EC  0E00               	movlw	0
  5496  0028EE  2407               	addwf	??___ftge,w,c
  5497  0028F0  6E04               	movwf	___ftge@ff2,c
  5498  0028F2  0E00               	movlw	0
  5499  0028F4  2008               	addwfc	??___ftge+1,w,c
  5500  0028F6  6E05               	movwf	___ftge@ff2+1,c
  5501  0028F8  0E80               	movlw	128
  5502  0028FA  2009               	addwfc	??___ftge+2,w,c
  5503  0028FC  6E06               	movwf	___ftge@ff2+2,c
  5504  0028FE                     l653:
  5505  0028FE  0E00               	movlw	0
  5506  002900  1A01               	xorwf	___ftge@ff1,f,c
  5507  002902  0E00               	movlw	0
  5508  002904  1A02               	xorwf	___ftge@ff1+1,f,c
  5509  002906  0E80               	movlw	128
  5510  002908  1A03               	xorwf	___ftge@ff1+2,f,c
  5511  00290A  0E00               	movlw	0
  5512  00290C  1A04               	xorwf	___ftge@ff2,f,c
  5513  00290E  0E00               	movlw	0
  5514  002910  1A05               	xorwf	___ftge@ff2+1,f,c
  5515  002912  0E80               	movlw	128
  5516  002914  1A06               	xorwf	___ftge@ff2+2,f,c
  5517  002916  5004               	movf	___ftge@ff2,w,c
  5518  002918  5C01               	subwf	___ftge@ff1,w,c
  5519  00291A  5005               	movf	___ftge@ff2+1,w,c
  5520  00291C  5802               	subwfb	___ftge@ff1+1,w,c
  5521  00291E  5006               	movf	___ftge@ff2+2,w,c
  5522  002920  5803               	subwfb	___ftge@ff1+2,w,c
  5523  002922  B0D8               	btfsc	status,0,c
  5524  002924  D002               	goto	l2134
  5525  002926  90D8               	bcf	status,0,c
  5526  002928  0012               	return	
  5527  00292A                     l2134:
  5528  00292A  80D8               	bsf	status,0,c
  5529  00292C  0012               	return	
  5530  00292E                     __end_of___ftge:
  5531                           	opt stack 0
  5532                           tblptru	equ	0xFF8
  5533                           tblptrh	equ	0xFF7
  5534                           tblptrl	equ	0xFF6
  5535                           tablat	equ	0xFF5
  5536                           prodh	equ	0xFF4
  5537                           prodl	equ	0xFF3
  5538                           intcon	equ	0xFF2
  5539                           postinc0	equ	0xFEE
  5540                           wreg	equ	0xFE8
  5541                           postdec1	equ	0xFE5
  5542                           fsr1l	equ	0xFE1
  5543                           indf2	equ	0xFDF
  5544                           postinc2	equ	0xFDE
  5545                           postdec2	equ	0xFDD
  5546                           fsr2h	equ	0xFDA
  5547                           fsr2l	equ	0xFD9
  5548                           status	equ	0xFD8
  5549                           
  5550 ;; *************** function _read_adc_voltage *****************
  5551 ;; Defined at:
  5552 ;;		line 40 in file "my_adc.c"
  5553 ;; Parameters:    Size  Location     Type
  5554 ;;  channel         1    wreg     unsigned char 
  5555 ;; Auto vars:     Size  Location     Type
  5556 ;;  channel         1   61[COMRAM] unsigned char 
  5557 ;;  temp            3   53[COMRAM] float 
  5558 ;;  voltage         3   56[COMRAM] float 
  5559 ;;  raw_value       2   59[COMRAM] int 
  5560 ;; Return value:  Size  Location     Type
  5561 ;;                  3   50[COMRAM] float 
  5562 ;; Registers used:
  5563 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5564 ;; Tracked objects:
  5565 ;;		On entry : 0/0
  5566 ;;		On exit  : 0/0
  5567 ;;		Unchanged: 0/0
  5568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5569 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5570 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5571 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5572 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5573 ;;Total ram usage:       12 bytes
  5574 ;; Hardware stack levels used:    1
  5575 ;; Hardware stack levels required when called:    2
  5576 ;; This function calls:
  5577 ;;		___awtoft
  5578 ;;		___ftdiv
  5579 ;;		___wmul
  5580 ;;		_read_adc_raw_no_lib
  5581 ;; This function is called by:
  5582 ;;		_processADCValues
  5583 ;; This function uses a non-reentrant model
  5584 ;;
  5585                           
  5586                           	psect	text23
  5587  00266A                     __ptext23:
  5588                           	opt stack 0
  5589  00266A                     _read_adc_voltage:
  5590                           	opt stack 27
  5591                           
  5592                           ;incstack = 0
  5593                           ;read_adc_voltage@channel stored from wreg
  5594  00266A  6E3E               	movwf	read_adc_voltage@channel,c
  5595                           
  5596                           ;my_adc.c: 41: int raw_value;
  5597                           ;my_adc.c: 42: float voltage;
  5598                           ;my_adc.c: 43: if(channel==1){
  5599  00266C  043E               	decf	read_adc_voltage@channel,w,c
  5600  00266E  A4D8               	btfss	status,2,c
  5601  002670  D032               	goto	l173
  5602                           
  5603                           ;my_adc.c: 47: float temp ;
  5604                           ;my_adc.c: 48: raw_value = read_adc_raw_no_lib(channel);
  5605  002672  503E               	movf	read_adc_voltage@channel,w,c
  5606  002674  ECDC  F016         	call	_read_adc_raw_no_lib
  5607  002678  C001  F03C         	movff	?_read_adc_raw_no_lib,read_adc_voltage@raw_value
  5608  00267C  C002  F03D         	movff	?_read_adc_raw_no_lib+1,read_adc_voltage@raw_value+1
  5609                           
  5610                           ;my_adc.c: 53: temp = (raw_value * ( 150 - (0)) /1023.0 + (0));
  5611  002680  C03C  F00F         	movff	read_adc_voltage@raw_value,___wmul@multiplier
  5612  002684  C03D  F010         	movff	read_adc_voltage@raw_value+1,___wmul@multiplier+1
  5613  002688  0E00               	movlw	0
  5614  00268A  6E12               	movwf	___wmul@multiplicand+1,c
  5615  00268C  0E96               	movlw	150
  5616  00268E  6E11               	movwf	___wmul@multiplicand,c
  5617  002690  EC72  F017         	call	___wmul	;wreg free
  5618  002694  C00F  F015         	movff	?___wmul,___awtoft@c
  5619  002698  C010  F016         	movff	?___wmul+1,___awtoft@c+1
  5620  00269C  EC15  F017         	call	___awtoft	;wreg free
  5621  0026A0  C015  F024         	movff	?___awtoft,___ftdiv@f1
  5622  0026A4  C016  F025         	movff	?___awtoft+1,___ftdiv@f1+1
  5623  0026A8  C017  F026         	movff	?___awtoft+2,___ftdiv@f1+2
  5624  0026AC  0EC0               	movlw	192
  5625  0026AE  6E27               	movwf	___ftdiv@f2,c
  5626  0026B0  0E7F               	movlw	127
  5627  0026B2  6E28               	movwf	___ftdiv@f2+1,c
  5628  0026B4  0E44               	movlw	68
  5629  0026B6  6E29               	movwf	___ftdiv@f2+2,c
  5630  0026B8  ECC2  F012         	call	___ftdiv	;wreg free
  5631  0026BC  C024  F036         	movff	?___ftdiv,read_adc_voltage@temp
  5632  0026C0  C025  F037         	movff	?___ftdiv+1,read_adc_voltage@temp+1
  5633  0026C4  C026  F038         	movff	?___ftdiv+2,read_adc_voltage@temp+2
  5634                           
  5635                           ;my_adc.c: 54: voltage=temp;
  5636  0026C8  C036  F039         	movff	read_adc_voltage@temp,read_adc_voltage@voltage
  5637  0026CC  C037  F03A         	movff	read_adc_voltage@temp+1,read_adc_voltage@voltage+1
  5638  0026D0  C038  F03B         	movff	read_adc_voltage@temp+2,read_adc_voltage@voltage+2
  5639                           
  5640                           ;my_adc.c: 56: }else{
  5641  0026D4  D02B               	goto	l174
  5642  0026D6                     l173:
  5643                           
  5644                           ;my_adc.c: 57: raw_value = read_adc_raw_no_lib(channel);
  5645  0026D6  503E               	movf	read_adc_voltage@channel,w,c
  5646  0026D8  ECDC  F016         	call	_read_adc_raw_no_lib
  5647  0026DC  C001  F03C         	movff	?_read_adc_raw_no_lib,read_adc_voltage@raw_value
  5648  0026E0  C002  F03D         	movff	?_read_adc_raw_no_lib+1,read_adc_voltage@raw_value+1
  5649                           
  5650                           ;my_adc.c: 58: voltage = (raw_value * 5) / 1023.0;
  5651  0026E4  C03C  F00F         	movff	read_adc_voltage@raw_value,___wmul@multiplier
  5652  0026E8  C03D  F010         	movff	read_adc_voltage@raw_value+1,___wmul@multiplier+1
  5653  0026EC  0E00               	movlw	0
  5654  0026EE  6E12               	movwf	___wmul@multiplicand+1,c
  5655  0026F0  0E05               	movlw	5
  5656  0026F2  6E11               	movwf	___wmul@multiplicand,c
  5657  0026F4  EC72  F017         	call	___wmul	;wreg free
  5658  0026F8  C00F  F015         	movff	?___wmul,___awtoft@c
  5659  0026FC  C010  F016         	movff	?___wmul+1,___awtoft@c+1
  5660  002700  EC15  F017         	call	___awtoft	;wreg free
  5661  002704  C015  F024         	movff	?___awtoft,___ftdiv@f1
  5662  002708  C016  F025         	movff	?___awtoft+1,___ftdiv@f1+1
  5663  00270C  C017  F026         	movff	?___awtoft+2,___ftdiv@f1+2
  5664  002710  0EC0               	movlw	192
  5665  002712  6E27               	movwf	___ftdiv@f2,c
  5666  002714  0E7F               	movlw	127
  5667  002716  6E28               	movwf	___ftdiv@f2+1,c
  5668  002718  0E44               	movlw	68
  5669  00271A  6E29               	movwf	___ftdiv@f2+2,c
  5670  00271C  ECC2  F012         	call	___ftdiv	;wreg free
  5671  002720  C024  F039         	movff	?___ftdiv,read_adc_voltage@voltage
  5672  002724  C025  F03A         	movff	?___ftdiv+1,read_adc_voltage@voltage+1
  5673  002728  C026  F03B         	movff	?___ftdiv+2,read_adc_voltage@voltage+2
  5674  00272C                     l174:
  5675                           
  5676                           ;my_adc.c: 59: }
  5677                           ;my_adc.c: 61: return voltage;
  5678  00272C  C039  F033         	movff	read_adc_voltage@voltage,?_read_adc_voltage
  5679  002730  C03A  F034         	movff	read_adc_voltage@voltage+1,?_read_adc_voltage+1
  5680  002734  C03B  F035         	movff	read_adc_voltage@voltage+2,?_read_adc_voltage+2
  5681  002738  0012               	return	
  5682  00273A                     __end_of_read_adc_voltage:
  5683                           	opt stack 0
  5684                           tblptru	equ	0xFF8
  5685                           tblptrh	equ	0xFF7
  5686                           tblptrl	equ	0xFF6
  5687                           tablat	equ	0xFF5
  5688                           prodh	equ	0xFF4
  5689                           prodl	equ	0xFF3
  5690                           intcon	equ	0xFF2
  5691                           postinc0	equ	0xFEE
  5692                           wreg	equ	0xFE8
  5693                           postdec1	equ	0xFE5
  5694                           fsr1l	equ	0xFE1
  5695                           indf2	equ	0xFDF
  5696                           postinc2	equ	0xFDE
  5697                           postdec2	equ	0xFDD
  5698                           fsr2h	equ	0xFDA
  5699                           fsr2l	equ	0xFD9
  5700                           status	equ	0xFD8
  5701                           
  5702 ;; *************** function _read_adc_raw_no_lib *****************
  5703 ;; Defined at:
  5704 ;;		line 24 in file "my_adc.c"
  5705 ;; Parameters:    Size  Location     Type
  5706 ;;  channel         1    wreg     unsigned char 
  5707 ;; Auto vars:     Size  Location     Type
  5708 ;;  channel         1    6[COMRAM] unsigned char 
  5709 ;;  raw_value       2    4[COMRAM] int 
  5710 ;; Return value:  Size  Location     Type
  5711 ;;                  2    0[COMRAM] int 
  5712 ;; Registers used:
  5713 ;;		wreg, status,2, status,0
  5714 ;; Tracked objects:
  5715 ;;		On entry : 0/0
  5716 ;;		On exit  : 0/0
  5717 ;;		Unchanged: 0/0
  5718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5719 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5720 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5721 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5722 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5723 ;;Total ram usage:        7 bytes
  5724 ;; Hardware stack levels used:    1
  5725 ;; This function calls:
  5726 ;;		Nothing
  5727 ;; This function is called by:
  5728 ;;		_read_adc_voltage
  5729 ;; This function uses a non-reentrant model
  5730 ;;
  5731                           
  5732                           	psect	text24
  5733  002DB8                     __ptext24:
  5734                           	opt stack 0
  5735  002DB8                     _read_adc_raw_no_lib:
  5736                           	opt stack 28
  5737                           
  5738                           ;incstack = 0
  5739                           ;read_adc_raw_no_lib@channel stored from wreg
  5740  002DB8  6E07               	movwf	read_adc_raw_no_lib@channel,c
  5741                           
  5742                           ;my_adc.c: 25: int raw_value;
  5743                           ;my_adc.c: 26: ADCON0bits.CHS = channel;
  5744  002DBA  C007  F003         	movff	read_adc_raw_no_lib@channel,??_read_adc_raw_no_lib
  5745  002DBE  4603               	rlncf	??_read_adc_raw_no_lib,f,c
  5746  002DC0  4603               	rlncf	??_read_adc_raw_no_lib,f,c
  5747  002DC2  50C2               	movf	4034,w,c	;volatile
  5748  002DC4  1803               	xorwf	??_read_adc_raw_no_lib,w,c
  5749  002DC6  0BC3               	andlw	-61
  5750  002DC8  1803               	xorwf	??_read_adc_raw_no_lib,w,c
  5751  002DCA  6EC2               	movwf	4034,c	;volatile
  5752                           
  5753                           ;my_adc.c: 29: ADCON0bits.GO = 1;
  5754  002DCC  82C2               	bsf	4034,1,c	;volatile
  5755  002DCE  B2C2               	btfsc	4034,1,c	;volatile
  5756  002DD0  D7FE               	goto	l168
  5757                           
  5758                           ;my_adc.c: 33: raw_value = ADRESH << 8 | ADRESL;
  5759  002DD2  50C3               	movf	4035,w,c	;volatile
  5760  002DD4  CFC4 F003          	movff	4036,??_read_adc_raw_no_lib	;volatile
  5761  002DD8  6A04               	clrf	(??_read_adc_raw_no_lib+1)& (0+255),c
  5762  002DDA  C003  F004         	movff	??_read_adc_raw_no_lib,??_read_adc_raw_no_lib+1
  5763  002DDE  6A03               	clrf	??_read_adc_raw_no_lib,c
  5764  002DE0  1003               	iorwf	??_read_adc_raw_no_lib,w,c
  5765  002DE2  6E05               	movwf	read_adc_raw_no_lib@raw_value,c
  5766  002DE4  5004               	movf	??_read_adc_raw_no_lib+1,w,c
  5767  002DE6  6E06               	movwf	read_adc_raw_no_lib@raw_value+1,c
  5768                           
  5769                           ;my_adc.c: 37: return raw_value;
  5770  002DE8  C005  F001         	movff	read_adc_raw_no_lib@raw_value,?_read_adc_raw_no_lib
  5771  002DEC  C006  F002         	movff	read_adc_raw_no_lib@raw_value+1,?_read_adc_raw_no_lib+1
  5772  002DF0  0012               	return	
  5773  002DF2                     __end_of_read_adc_raw_no_lib:
  5774                           	opt stack 0
  5775                           tblptru	equ	0xFF8
  5776                           tblptrh	equ	0xFF7
  5777                           tblptrl	equ	0xFF6
  5778                           tablat	equ	0xFF5
  5779                           prodh	equ	0xFF4
  5780                           prodl	equ	0xFF3
  5781                           intcon	equ	0xFF2
  5782                           postinc0	equ	0xFEE
  5783                           wreg	equ	0xFE8
  5784                           postdec1	equ	0xFE5
  5785                           fsr1l	equ	0xFE1
  5786                           indf2	equ	0xFDF
  5787                           postinc2	equ	0xFDE
  5788                           postdec2	equ	0xFDD
  5789                           fsr2h	equ	0xFDA
  5790                           fsr2l	equ	0xFD9
  5791                           status	equ	0xFD8
  5792                           
  5793 ;; *************** function ___wmul *****************
  5794 ;; Defined at:
  5795 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  5796 ;; Parameters:    Size  Location     Type
  5797 ;;  multiplier      2   14[COMRAM] unsigned int 
  5798 ;;  multiplicand    2   16[COMRAM] unsigned int 
  5799 ;; Auto vars:     Size  Location     Type
  5800 ;;  product         2   18[COMRAM] unsigned int 
  5801 ;; Return value:  Size  Location     Type
  5802 ;;                  2   14[COMRAM] unsigned int 
  5803 ;; Registers used:
  5804 ;;		wreg, status,2, status,0, prodl, prodh
  5805 ;; Tracked objects:
  5806 ;;		On entry : 0/0
  5807 ;;		On exit  : 0/0
  5808 ;;		Unchanged: 0/0
  5809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5810 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5811 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5813 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5814 ;;Total ram usage:        6 bytes
  5815 ;; Hardware stack levels used:    1
  5816 ;; This function calls:
  5817 ;;		Nothing
  5818 ;; This function is called by:
  5819 ;;		_read_adc_voltage
  5820 ;;		_fround
  5821 ;;		_scale
  5822 ;;		_sprintf
  5823 ;; This function uses a non-reentrant model
  5824 ;;
  5825                           
  5826                           	psect	text25
  5827  002EE4                     __ptext25:
  5828                           	opt stack 0
  5829  002EE4                     ___wmul:
  5830                           	opt stack 27
  5831                           
  5832                           ;incstack = 0
  5833  002EE4  500F               	movf	___wmul@multiplier,w,c
  5834  002EE6  0211               	mulwf	___wmul@multiplicand,c
  5835  002EE8  CFF3 F013          	movff	prodl,___wmul@product
  5836  002EEC  CFF4 F014          	movff	prodh,___wmul@product+1
  5837  002EF0  500F               	movf	___wmul@multiplier,w,c
  5838  002EF2  0212               	mulwf	___wmul@multiplicand+1,c
  5839  002EF4  50F3               	movf	prodl,w,c
  5840  002EF6  2614               	addwf	___wmul@product+1,f,c
  5841  002EF8  5010               	movf	___wmul@multiplier+1,w,c
  5842  002EFA  0211               	mulwf	___wmul@multiplicand,c
  5843  002EFC  50F3               	movf	prodl,w,c
  5844  002EFE  2614               	addwf	___wmul@product+1,f,c
  5845  002F00  C013  F00F         	movff	___wmul@product,?___wmul
  5846  002F04  C014  F010         	movff	___wmul@product+1,?___wmul+1
  5847  002F08  0012               	return	
  5848  002F0A                     __end_of___wmul:
  5849                           	opt stack 0
  5850                           tblptru	equ	0xFF8
  5851                           tblptrh	equ	0xFF7
  5852                           tblptrl	equ	0xFF6
  5853                           tablat	equ	0xFF5
  5854                           prodh	equ	0xFF4
  5855                           prodl	equ	0xFF3
  5856                           intcon	equ	0xFF2
  5857                           postinc0	equ	0xFEE
  5858                           wreg	equ	0xFE8
  5859                           postdec1	equ	0xFE5
  5860                           fsr1l	equ	0xFE1
  5861                           indf2	equ	0xFDF
  5862                           postinc2	equ	0xFDE
  5863                           postdec2	equ	0xFDD
  5864                           fsr2h	equ	0xFDA
  5865                           fsr2l	equ	0xFD9
  5866                           status	equ	0xFD8
  5867                           
  5868 ;; *************** function ___ftdiv *****************
  5869 ;; Defined at:
  5870 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
  5871 ;; Parameters:    Size  Location     Type
  5872 ;;  f1              3   35[COMRAM] float 
  5873 ;;  f2              3   38[COMRAM] float 
  5874 ;; Auto vars:     Size  Location     Type
  5875 ;;  f3              3   45[COMRAM] float 
  5876 ;;  sign            1   49[COMRAM] unsigned char 
  5877 ;;  exp             1   48[COMRAM] unsigned char 
  5878 ;;  cntr            1   44[COMRAM] unsigned char 
  5879 ;; Return value:  Size  Location     Type
  5880 ;;                  3   35[COMRAM] float 
  5881 ;; Registers used:
  5882 ;;		wreg, status,2, status,0, cstack
  5883 ;; Tracked objects:
  5884 ;;		On entry : 0/0
  5885 ;;		On exit  : 0/0
  5886 ;;		Unchanged: 0/0
  5887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5888 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5889 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5890 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5891 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5892 ;;Total ram usage:       15 bytes
  5893 ;; Hardware stack levels used:    1
  5894 ;; Hardware stack levels required when called:    1
  5895 ;; This function calls:
  5896 ;;		___ftpack
  5897 ;; This function is called by:
  5898 ;;		_processADCValues
  5899 ;;		_read_adc_voltage
  5900 ;; This function uses a non-reentrant model
  5901 ;;
  5902                           
  5903                           	psect	text26
  5904  002584                     __ptext26:
  5905                           	opt stack 0
  5906  002584                     ___ftdiv:
  5907                           	opt stack 27
  5908                           
  5909                           ;incstack = 0
  5910  002584  C026  F02A         	movff	___ftdiv@f1+2,??___ftdiv
  5911  002588  6A2B               	clrf	(??___ftdiv+1)& (0+255),c
  5912  00258A  6A2C               	clrf	(??___ftdiv+2)& (0+255),c
  5913  00258C  3425               	rlcf	___ftdiv@f1+1,w,c
  5914  00258E  362A               	rlcf	??___ftdiv& (0+255),f,c
  5915  002590  E301               	bnc	u2411
  5916  002592  802B               	bsf	(??___ftdiv+1)& (0+255),0,c
  5917  002594                     u2411:
  5918  002594  502A               	movf	??___ftdiv,w,c
  5919  002596  6E31               	movwf	___ftdiv@exp,c
  5920  002598  5031               	movf	___ftdiv@exp,w,c
  5921  00259A  A4D8               	btfss	status,2,c
  5922  00259C  D007               	goto	l627
  5923  00259E  0E00               	movlw	0
  5924  0025A0  6E24               	movwf	?___ftdiv,c
  5925  0025A2  0E00               	movlw	0
  5926  0025A4  6E25               	movwf	?___ftdiv+1,c
  5927  0025A6  0E00               	movlw	0
  5928  0025A8  6E26               	movwf	?___ftdiv+2,c
  5929  0025AA  0012               	return	
  5930  0025AC                     l627:
  5931  0025AC  C029  F02A         	movff	___ftdiv@f2+2,??___ftdiv
  5932  0025B0  6A2B               	clrf	(??___ftdiv+1)& (0+255),c
  5933  0025B2  6A2C               	clrf	(??___ftdiv+2)& (0+255),c
  5934  0025B4  3428               	rlcf	___ftdiv@f2+1,w,c
  5935  0025B6  362A               	rlcf	??___ftdiv& (0+255),f,c
  5936  0025B8  E301               	bnc	u2431
  5937  0025BA  802B               	bsf	(??___ftdiv+1)& (0+255),0,c
  5938  0025BC                     u2431:
  5939  0025BC  502A               	movf	??___ftdiv,w,c
  5940  0025BE  6E32               	movwf	___ftdiv@sign,c
  5941  0025C0  5032               	movf	___ftdiv@sign,w,c
  5942  0025C2  A4D8               	btfss	status,2,c
  5943  0025C4  D007               	goto	l629
  5944  0025C6  0E00               	movlw	0
  5945  0025C8  6E24               	movwf	?___ftdiv,c
  5946  0025CA  0E00               	movlw	0
  5947  0025CC  6E25               	movwf	?___ftdiv+1,c
  5948  0025CE  0E00               	movlw	0
  5949  0025D0  6E26               	movwf	?___ftdiv+2,c
  5950  0025D2  0012               	return	
  5951  0025D4                     l629:
  5952  0025D4  0E00               	movlw	0
  5953  0025D6  6E2E               	movwf	___ftdiv@f3,c
  5954  0025D8  0E00               	movlw	0
  5955  0025DA  6E2F               	movwf	___ftdiv@f3+1,c
  5956  0025DC  0E00               	movlw	0
  5957  0025DE  6E30               	movwf	___ftdiv@f3+2,c
  5958  0025E0  5032               	movf	___ftdiv@sign,w,c
  5959  0025E2  0F89               	addlw	137
  5960  0025E4  5E31               	subwf	___ftdiv@exp,f,c
  5961  0025E6  C026  F032         	movff	___ftdiv@f1+2,___ftdiv@sign
  5962  0025EA  5029               	movf	___ftdiv@f2+2,w,c
  5963  0025EC  1A32               	xorwf	___ftdiv@sign,f,c
  5964  0025EE  0E80               	movlw	128
  5965  0025F0  1632               	andwf	___ftdiv@sign,f,c
  5966  0025F2  8E25               	bsf	___ftdiv@f1+1,7,c
  5967  0025F4  0EFF               	movlw	255
  5968  0025F6  1624               	andwf	___ftdiv@f1,f,c
  5969  0025F8  0EFF               	movlw	255
  5970  0025FA  1625               	andwf	___ftdiv@f1+1,f,c
  5971  0025FC  0E00               	movlw	0
  5972  0025FE  1626               	andwf	___ftdiv@f1+2,f,c
  5973  002600  8E28               	bsf	___ftdiv@f2+1,7,c
  5974  002602  0EFF               	movlw	255
  5975  002604  1627               	andwf	___ftdiv@f2,f,c
  5976  002606  0EFF               	movlw	255
  5977  002608  1628               	andwf	___ftdiv@f2+1,f,c
  5978  00260A  0E00               	movlw	0
  5979  00260C  1629               	andwf	___ftdiv@f2+2,f,c
  5980  00260E  0E18               	movlw	24
  5981  002610  6E2D               	movwf	___ftdiv@cntr,c
  5982  002612  90D8               	bcf	status,0,c
  5983  002614  362E               	rlcf	___ftdiv@f3,f,c
  5984  002616  362F               	rlcf	___ftdiv@f3+1,f,c
  5985  002618  3630               	rlcf	___ftdiv@f3+2,f,c
  5986  00261A  5027               	movf	___ftdiv@f2,w,c
  5987  00261C  5C24               	subwf	___ftdiv@f1,w,c
  5988  00261E  5028               	movf	___ftdiv@f2+1,w,c
  5989  002620  5825               	subwfb	___ftdiv@f1+1,w,c
  5990  002622  5029               	movf	___ftdiv@f2+2,w,c
  5991  002624  5826               	subwfb	___ftdiv@f1+2,w,c
  5992  002626  A0D8               	btfss	status,0,c
  5993  002628  D007               	goto	l631
  5994  00262A  5027               	movf	___ftdiv@f2,w,c
  5995  00262C  5E24               	subwf	___ftdiv@f1,f,c
  5996  00262E  5028               	movf	___ftdiv@f2+1,w,c
  5997  002630  5A25               	subwfb	___ftdiv@f1+1,f,c
  5998  002632  5029               	movf	___ftdiv@f2+2,w,c
  5999  002634  5A26               	subwfb	___ftdiv@f1+2,f,c
  6000  002636  802E               	bsf	___ftdiv@f3,0,c
  6001  002638                     l631:
  6002  002638  90D8               	bcf	status,0,c
  6003  00263A  3624               	rlcf	___ftdiv@f1,f,c
  6004  00263C  3625               	rlcf	___ftdiv@f1+1,f,c
  6005  00263E  3626               	rlcf	___ftdiv@f1+2,f,c
  6006  002640  2E2D               	decfsz	___ftdiv@cntr,f,c
  6007  002642  D7E7               	goto	l630
  6008  002644  C02E  F001         	movff	___ftdiv@f3,___ftpack@arg
  6009  002648  C02F  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  6010  00264C  C030  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  6011  002650  C031  F004         	movff	___ftdiv@exp,___ftpack@exp
  6012  002654  C032  F005         	movff	___ftdiv@sign,___ftpack@sign
  6013  002658  ECF8  F013         	call	___ftpack	;wreg free
  6014  00265C  C001  F024         	movff	?___ftpack,?___ftdiv
  6015  002660  C002  F025         	movff	?___ftpack+1,?___ftdiv+1
  6016  002664  C003  F026         	movff	?___ftpack+2,?___ftdiv+2
  6017  002668  0012               	return	
  6018  00266A                     __end_of___ftdiv:
  6019                           	opt stack 0
  6020                           tblptru	equ	0xFF8
  6021                           tblptrh	equ	0xFF7
  6022                           tblptrl	equ	0xFF6
  6023                           tablat	equ	0xFF5
  6024                           prodh	equ	0xFF4
  6025                           prodl	equ	0xFF3
  6026                           intcon	equ	0xFF2
  6027                           postinc0	equ	0xFEE
  6028                           wreg	equ	0xFE8
  6029                           postdec1	equ	0xFE5
  6030                           fsr1l	equ	0xFE1
  6031                           indf2	equ	0xFDF
  6032                           postinc2	equ	0xFDE
  6033                           postdec2	equ	0xFDD
  6034                           fsr2h	equ	0xFDA
  6035                           fsr2l	equ	0xFD9
  6036                           status	equ	0xFD8
  6037                           
  6038 ;; *************** function ___awtoft *****************
  6039 ;; Defined at:
  6040 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
  6041 ;; Parameters:    Size  Location     Type
  6042 ;;  c               2   20[COMRAM] int 
  6043 ;; Auto vars:     Size  Location     Type
  6044 ;;  sign            1   23[COMRAM] unsigned char 
  6045 ;; Return value:  Size  Location     Type
  6046 ;;                  3   20[COMRAM] float 
  6047 ;; Registers used:
  6048 ;;		wreg, status,2, status,0, cstack
  6049 ;; Tracked objects:
  6050 ;;		On entry : 0/0
  6051 ;;		On exit  : 0/0
  6052 ;;		Unchanged: 0/0
  6053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6054 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6055 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6057 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6058 ;;Total ram usage:        4 bytes
  6059 ;; Hardware stack levels used:    1
  6060 ;; Hardware stack levels required when called:    1
  6061 ;; This function calls:
  6062 ;;		___ftpack
  6063 ;; This function is called by:
  6064 ;;		_read_adc_voltage
  6065 ;; This function uses a non-reentrant model
  6066 ;;
  6067                           
  6068                           	psect	text27
  6069  002E2A                     __ptext27:
  6070                           	opt stack 0
  6071  002E2A                     ___awtoft:
  6072                           	opt stack 27
  6073                           
  6074                           ;incstack = 0
  6075  002E2A  0E00               	movlw	0
  6076  002E2C  6E18               	movwf	___awtoft@sign,c
  6077  002E2E  AE16               	btfss	___awtoft@c+1,7,c
  6078  002E30  D006               	goto	l527
  6079  002E32  6C15               	negf	___awtoft@c,c
  6080  002E34  1E16               	comf	___awtoft@c+1,f,c
  6081  002E36  B0D8               	btfsc	status,0,c
  6082  002E38  2A16               	incf	___awtoft@c+1,f,c
  6083  002E3A  0E01               	movlw	1
  6084  002E3C  6E18               	movwf	___awtoft@sign,c
  6085  002E3E                     l527:
  6086  002E3E  C015  F001         	movff	___awtoft@c,___ftpack@arg
  6087  002E42  C016  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  6088  002E46  6A03               	clrf	___ftpack@arg+2,c
  6089  002E48  0E8E               	movlw	142
  6090  002E4A  6E04               	movwf	___ftpack@exp,c
  6091  002E4C  C018  F005         	movff	___awtoft@sign,___ftpack@sign
  6092  002E50  ECF8  F013         	call	___ftpack	;wreg free
  6093  002E54  C001  F015         	movff	?___ftpack,?___awtoft
  6094  002E58  C002  F016         	movff	?___ftpack+1,?___awtoft+1
  6095  002E5C  C003  F017         	movff	?___ftpack+2,?___awtoft+2
  6096  002E60  0012               	return	
  6097  002E62                     __end_of___awtoft:
  6098                           	opt stack 0
  6099                           tblptru	equ	0xFF8
  6100                           tblptrh	equ	0xFF7
  6101                           tblptrl	equ	0xFF6
  6102                           tablat	equ	0xFF5
  6103                           prodh	equ	0xFF4
  6104                           prodl	equ	0xFF3
  6105                           intcon	equ	0xFF2
  6106                           postinc0	equ	0xFEE
  6107                           wreg	equ	0xFE8
  6108                           postdec1	equ	0xFE5
  6109                           fsr1l	equ	0xFE1
  6110                           indf2	equ	0xFDF
  6111                           postinc2	equ	0xFDE
  6112                           postdec2	equ	0xFDD
  6113                           fsr2h	equ	0xFDA
  6114                           fsr2l	equ	0xFD9
  6115                           status	equ	0xFD8
  6116                           
  6117 ;; *************** function ___ftpack *****************
  6118 ;; Defined at:
  6119 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  6120 ;; Parameters:    Size  Location     Type
  6121 ;;  arg             3    0[COMRAM] unsigned um
  6122 ;;  exp             1    3[COMRAM] unsigned char 
  6123 ;;  sign            1    4[COMRAM] unsigned char 
  6124 ;; Auto vars:     Size  Location     Type
  6125 ;;		None
  6126 ;; Return value:  Size  Location     Type
  6127 ;;                  3    0[COMRAM] float 
  6128 ;; Registers used:
  6129 ;;		wreg, status,2, status,0
  6130 ;; Tracked objects:
  6131 ;;		On entry : 0/0
  6132 ;;		On exit  : 0/0
  6133 ;;		Unchanged: 0/0
  6134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6135 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6136 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6137 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6138 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6139 ;;Total ram usage:        8 bytes
  6140 ;; Hardware stack levels used:    1
  6141 ;; This function calls:
  6142 ;;		Nothing
  6143 ;; This function is called by:
  6144 ;;		___awtoft
  6145 ;;		___ftadd
  6146 ;;		___ftdiv
  6147 ;;		___ftmul
  6148 ;;		___lltoft
  6149 ;; This function uses a non-reentrant model
  6150 ;;
  6151                           
  6152                           	psect	text28
  6153  0027F0                     __ptext28:
  6154                           	opt stack 0
  6155  0027F0                     ___ftpack:
  6156                           	opt stack 26
  6157                           
  6158                           ;incstack = 0
  6159  0027F0  5004               	movf	___ftpack@exp,w,c
  6160  0027F2  B4D8               	btfsc	status,2,c
  6161  0027F4  D005               	goto	u1690
  6162  0027F6  5001               	movf	___ftpack@arg,w,c
  6163  0027F8  1002               	iorwf	___ftpack@arg+1,w,c
  6164  0027FA  1003               	iorwf	___ftpack@arg+2,w,c
  6165  0027FC  A4D8               	btfss	status,2,c
  6166  0027FE  D00C               	goto	l563
  6167  002800                     u1690:
  6168  002800  0E00               	movlw	0
  6169  002802  6E01               	movwf	?___ftpack,c
  6170  002804  0E00               	movlw	0
  6171  002806  6E02               	movwf	?___ftpack+1,c
  6172  002808  0E00               	movlw	0
  6173  00280A  6E03               	movwf	?___ftpack+2,c
  6174  00280C  0012               	return	
  6175  00280E  2A04               	incf	___ftpack@exp,f,c
  6176  002810  90D8               	bcf	status,0,c
  6177  002812  3203               	rrcf	___ftpack@arg+2,f,c
  6178  002814  3202               	rrcf	___ftpack@arg+1,f,c
  6179  002816  3201               	rrcf	___ftpack@arg,f,c
  6180  002818                     l563:
  6181  002818  0E00               	movlw	0
  6182  00281A  1401               	andwf	___ftpack@arg,w,c
  6183  00281C  6E06               	movwf	??___ftpack& (0+255),c
  6184  00281E  0E00               	movlw	0
  6185  002820  1402               	andwf	___ftpack@arg+1,w,c
  6186  002822  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6187  002824  0EFE               	movlw	254
  6188  002826  1403               	andwf	___ftpack@arg+2,w,c
  6189  002828  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6190  00282A  5006               	movf	??___ftpack,w,c
  6191  00282C  1007               	iorwf	??___ftpack+1,w,c
  6192  00282E  1008               	iorwf	??___ftpack+2,w,c
  6193  002830  B4D8               	btfsc	status,2,c
  6194  002832  D00C               	goto	l566
  6195  002834  D7EC               	goto	l564
  6196  002836  2A04               	incf	___ftpack@exp,f,c
  6197  002838  0E01               	movlw	1
  6198  00283A  2601               	addwf	___ftpack@arg,f,c
  6199  00283C  0E00               	movlw	0
  6200  00283E  2202               	addwfc	___ftpack@arg+1,f,c
  6201  002840  0E00               	movlw	0
  6202  002842  2203               	addwfc	___ftpack@arg+2,f,c
  6203  002844  90D8               	bcf	status,0,c
  6204  002846  3203               	rrcf	___ftpack@arg+2,f,c
  6205  002848  3202               	rrcf	___ftpack@arg+1,f,c
  6206  00284A  3201               	rrcf	___ftpack@arg,f,c
  6207  00284C                     l566:
  6208  00284C  0E00               	movlw	0
  6209  00284E  1401               	andwf	___ftpack@arg,w,c
  6210  002850  6E06               	movwf	??___ftpack& (0+255),c
  6211  002852  0E00               	movlw	0
  6212  002854  1402               	andwf	___ftpack@arg+1,w,c
  6213  002856  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6214  002858  0EFF               	movlw	255
  6215  00285A  1403               	andwf	___ftpack@arg+2,w,c
  6216  00285C  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6217  00285E  5006               	movf	??___ftpack,w,c
  6218  002860  1007               	iorwf	??___ftpack+1,w,c
  6219  002862  1008               	iorwf	??___ftpack+2,w,c
  6220  002864  B4D8               	btfsc	status,2,c
  6221  002866  D006               	goto	l569
  6222  002868  D7E6               	goto	l567
  6223  00286A  0604               	decf	___ftpack@exp,f,c
  6224  00286C  90D8               	bcf	status,0,c
  6225  00286E  3601               	rlcf	___ftpack@arg,f,c
  6226  002870  3602               	rlcf	___ftpack@arg+1,f,c
  6227  002872  3603               	rlcf	___ftpack@arg+2,f,c
  6228  002874                     l569:
  6229  002874  BE02               	btfsc	___ftpack@arg+1,7,c
  6230  002876  D003               	goto	u1730
  6231  002878  0E02               	movlw	2
  6232  00287A  6004               	cpfslt	___ftpack@exp,c
  6233  00287C  D7F6               	goto	l570
  6234  00287E                     u1730:
  6235  00287E  A004               	btfss	___ftpack@exp,0,c
  6236  002880  9E02               	bcf	___ftpack@arg+1,7,c
  6237  002882  90D8               	bcf	status,0,c
  6238  002884  3204               	rrcf	___ftpack@exp,f,c
  6239  002886  5004               	movf	___ftpack@exp,w,c
  6240  002888  1203               	iorwf	___ftpack@arg+2,f,c
  6241  00288A  5005               	movf	___ftpack@sign,w,c
  6242  00288C  A4D8               	btfss	status,2,c
  6243  00288E  8E03               	bsf	___ftpack@arg+2,7,c
  6244  002890  C001  F001         	movff	___ftpack@arg,?___ftpack
  6245  002894  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  6246  002898  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  6247  00289C  0012               	return	
  6248  00289E                     __end_of___ftpack:
  6249                           	opt stack 0
  6250                           tblptru	equ	0xFF8
  6251                           tblptrh	equ	0xFF7
  6252                           tblptrl	equ	0xFF6
  6253                           tablat	equ	0xFF5
  6254                           prodh	equ	0xFF4
  6255                           prodl	equ	0xFF3
  6256                           intcon	equ	0xFF2
  6257                           postinc0	equ	0xFEE
  6258                           wreg	equ	0xFE8
  6259                           postdec1	equ	0xFE5
  6260                           fsr1l	equ	0xFE1
  6261                           indf2	equ	0xFDF
  6262                           postinc2	equ	0xFDE
  6263                           postdec2	equ	0xFDD
  6264                           fsr2h	equ	0xFDA
  6265                           fsr2l	equ	0xFD9
  6266                           status	equ	0xFD8
  6267                           
  6268 ;; *************** function _lcd_init *****************
  6269 ;; Defined at:
  6270 ;;		line 56 in file "lcd_x8.c"
  6271 ;; Parameters:    Size  Location     Type
  6272 ;;		None
  6273 ;; Auto vars:     Size  Location     Type
  6274 ;;  i               1   10[COMRAM] unsigned char 
  6275 ;; Return value:  Size  Location     Type
  6276 ;;                  1    wreg      void 
  6277 ;; Registers used:
  6278 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6279 ;; Tracked objects:
  6280 ;;		On entry : 0/0
  6281 ;;		On exit  : 0/0
  6282 ;;		Unchanged: 0/0
  6283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6284 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6285 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6286 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6287 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6288 ;;Total ram usage:        1 bytes
  6289 ;; Hardware stack levels used:    1
  6290 ;; Hardware stack levels required when called:    3
  6291 ;; This function calls:
  6292 ;;		_delay_ms
  6293 ;;		_lcd_send_byte
  6294 ;;		_lcd_send_nibble
  6295 ;; This function is called by:
  6296 ;;		_main
  6297 ;; This function uses a non-reentrant model
  6298 ;;
  6299                           
  6300                           	psect	text29
  6301  002B0A                     __ptext29:
  6302                           	opt stack 0
  6303  002B0A                     _lcd_init:
  6304                           	opt stack 27
  6305                           
  6306                           ;lcd_x8.c: 58: unsigned char i;
  6307                           ;lcd_x8.c: 61: lcd.rs = 0;;
  6308                           
  6309                           ;incstack = 0
  6310  002B0A  9283               	bcf	3971,1,c
  6311                           
  6312                           ;lcd_x8.c: 63: lcd.enable = 0;;
  6313  002B0C  9683               	bcf	3971,3,c
  6314                           
  6315                           ;lcd_x8.c: 65: delay_ms(25);
  6316  002B0E  0E00               	movlw	0
  6317  002B10  6E02               	movwf	delay_ms@n+1,c
  6318  002B12  0E19               	movlw	25
  6319  002B14  6E01               	movwf	delay_ms@n,c
  6320  002B16  EC85  F017         	call	_delay_ms	;wreg free
  6321                           
  6322                           ;lcd_x8.c: 66: for (i = 1; i <= 3; ++i) {
  6323  002B1A  0E01               	movlw	1
  6324  002B1C  6E0B               	movwf	lcd_init@i,c
  6325  002B1E                     l3130:
  6326  002B1E  0E03               	movlw	3
  6327  002B20  640B               	cpfsgt	lcd_init@i,c
  6328  002B22  D001               	goto	l117
  6329  002B24  D00B               	goto	u3180
  6330  002B26                     l117:
  6331                           
  6332                           ;lcd_x8.c: 67: lcd_send_nibble(3);
  6333  002B26  0E03               	movlw	3
  6334  002B28  ECCE  F017         	call	_lcd_send_nibble
  6335                           
  6336                           ;lcd_x8.c: 69: delay_ms(6);
  6337  002B2C  0E00               	movlw	0
  6338  002B2E  6E02               	movwf	delay_ms@n+1,c
  6339  002B30  0E06               	movlw	6
  6340  002B32  6E01               	movwf	delay_ms@n,c
  6341  002B34  EC85  F017         	call	_delay_ms	;wreg free
  6342  002B38  2A0B               	incf	lcd_init@i,f,c
  6343  002B3A  D7F1               	goto	l3130
  6344  002B3C                     u3180:
  6345                           
  6346                           ;lcd_x8.c: 70: }
  6347                           ;lcd_x8.c: 72: lcd_send_nibble(2);
  6348  002B3C  0E02               	movlw	2
  6349  002B3E  ECCE  F017         	call	_lcd_send_nibble
  6350                           
  6351                           ;lcd_x8.c: 74: for (i = 0; i <= 3; ++i)
  6352  002B42  0E00               	movlw	0
  6353  002B44  6E0B               	movwf	lcd_init@i,c
  6354  002B46                     l3144:
  6355  002B46  0E03               	movlw	3
  6356  002B48  640B               	cpfsgt	lcd_init@i,c
  6357  002B4A  D001               	goto	l119
  6358  002B4C  0012               	return	
  6359  002B4E                     l119:
  6360                           
  6361                           ;lcd_x8.c: 75: lcd_send_byte(0, LCD_INIT_STRING[i]);
  6362  002B4E  500B               	movf	lcd_init@i,w,c
  6363  002B50  0D01               	mullw	1
  6364  002B52  0E6C               	movlw	low _LCD_INIT_STRING
  6365  002B54  24F3               	addwf	prodl,w,c
  6366  002B56  6ED9               	movwf	fsr2l,c
  6367  002B58  0E00               	movlw	high _LCD_INIT_STRING
  6368  002B5A  20F4               	addwfc	prodh,w,c
  6369  002B5C  6EDA               	movwf	fsr2h,c
  6370  002B5E  50DF               	movf	indf2,w,c
  6371  002B60  6E09               	movwf	lcd_send_byte@n,c
  6372  002B62  0E00               	movlw	0
  6373  002B64  EC3A  F016         	call	_lcd_send_byte
  6374  002B68  2A0B               	incf	lcd_init@i,f,c
  6375  002B6A  D7ED               	goto	l3144
  6376  002B6C                     __end_of_lcd_init:
  6377                           	opt stack 0
  6378                           tblptru	equ	0xFF8
  6379                           tblptrh	equ	0xFF7
  6380                           tblptrl	equ	0xFF6
  6381                           tablat	equ	0xFF5
  6382                           prodh	equ	0xFF4
  6383                           prodl	equ	0xFF3
  6384                           intcon	equ	0xFF2
  6385                           postinc0	equ	0xFEE
  6386                           wreg	equ	0xFE8
  6387                           postdec1	equ	0xFE5
  6388                           fsr1l	equ	0xFE1
  6389                           indf2	equ	0xFDF
  6390                           postinc2	equ	0xFDE
  6391                           postdec2	equ	0xFDD
  6392                           fsr2h	equ	0xFDA
  6393                           fsr2l	equ	0xFD9
  6394                           status	equ	0xFD8
  6395                           
  6396 ;; *************** function _init_adc_no_lib *****************
  6397 ;; Defined at:
  6398 ;;		line 3 in file "my_adc.c"
  6399 ;; Parameters:    Size  Location     Type
  6400 ;;		None
  6401 ;; Auto vars:     Size  Location     Type
  6402 ;;		None
  6403 ;; Return value:  Size  Location     Type
  6404 ;;                  1    wreg      void 
  6405 ;; Registers used:
  6406 ;;		wreg, status,2
  6407 ;; Tracked objects:
  6408 ;;		On entry : 0/0
  6409 ;;		On exit  : 0/0
  6410 ;;		Unchanged: 0/0
  6411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6415 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6416 ;;Total ram usage:        0 bytes
  6417 ;; Hardware stack levels used:    1
  6418 ;; This function calls:
  6419 ;;		Nothing
  6420 ;; This function is called by:
  6421 ;;		_main
  6422 ;; This function uses a non-reentrant model
  6423 ;;
  6424                           
  6425                           	psect	text30
  6426  003004                     __ptext30:
  6427                           	opt stack 0
  6428  003004                     _init_adc_no_lib:
  6429                           	opt stack 30
  6430                           
  6431                           ;my_adc.c: 6: ADCON0 = 0;
  6432                           
  6433                           ;incstack = 0
  6434  003004  0E00               	movlw	0
  6435  003006  6EC2               	movwf	4034,c	;volatile
  6436                           
  6437                           ;my_adc.c: 7: ADCON0bits.ADON = 1;
  6438  003008  80C2               	bsf	4034,0,c	;volatile
  6439                           
  6440                           ;my_adc.c: 10: ADCON2 = 0b10001001;
  6441  00300A  0E89               	movlw	137
  6442  00300C  6EC0               	movwf	4032,c	;volatile
  6443  00300E  0012               	return		;funcret
  6444  003010                     __end_of_init_adc_no_lib:
  6445                           	opt stack 0
  6446                           tblptru	equ	0xFF8
  6447                           tblptrh	equ	0xFF7
  6448                           tblptrl	equ	0xFF6
  6449                           tablat	equ	0xFF5
  6450                           prodh	equ	0xFF4
  6451                           prodl	equ	0xFF3
  6452                           intcon	equ	0xFF2
  6453                           postinc0	equ	0xFEE
  6454                           wreg	equ	0xFE8
  6455                           postdec1	equ	0xFE5
  6456                           fsr1l	equ	0xFE1
  6457                           indf2	equ	0xFDF
  6458                           postinc2	equ	0xFDE
  6459                           postdec2	equ	0xFDD
  6460                           fsr2h	equ	0xFDA
  6461                           fsr2l	equ	0xFD9
  6462                           status	equ	0xFD8
  6463                           
  6464 ;; *************** function _initPorts *****************
  6465 ;; Defined at:
  6466 ;;		line 111 in file "basic.c"
  6467 ;; Parameters:    Size  Location     Type
  6468 ;;		None
  6469 ;; Auto vars:     Size  Location     Type
  6470 ;;		None
  6471 ;; Return value:  Size  Location     Type
  6472 ;;                  1    wreg      void 
  6473 ;; Registers used:
  6474 ;;		wreg, status,2
  6475 ;; Tracked objects:
  6476 ;;		On entry : 0/0
  6477 ;;		On exit  : 0/0
  6478 ;;		Unchanged: 0/0
  6479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6483 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6484 ;;Total ram usage:        0 bytes
  6485 ;; Hardware stack levels used:    1
  6486 ;; This function calls:
  6487 ;;		Nothing
  6488 ;; This function is called by:
  6489 ;;		_main
  6490 ;; This function uses a non-reentrant model
  6491 ;;
  6492                           
  6493                           	psect	text31
  6494  002E90                     __ptext31:
  6495                           	opt stack 0
  6496  002E90                     _initPorts:
  6497                           	opt stack 30
  6498                           
  6499                           ;basic.c: 112: ADCON1 = 0x0C;
  6500                           
  6501                           ;incstack = 0
  6502  002E90  0E0C               	movlw	12
  6503  002E92  6EC1               	movwf	4033,c	;volatile
  6504                           
  6505                           ;basic.c: 113: LATA = LATB = LATC = LATD = LATE = 0;
  6506  002E94  0E00               	movlw	0
  6507  002E96  6E8D               	movwf	3981,c	;volatile
  6508  002E98  CF8D FF8C          	movff	3981,3980	;volatile
  6509  002E9C  CF8C FF8B          	movff	3980,3979	;volatile
  6510  002EA0  CF8B FF8A          	movff	3979,3978	;volatile
  6511  002EA4  CF8A FF89          	movff	3978,3977	;volatile
  6512                           
  6513                           ;basic.c: 114: TRISA = 0xFF;
  6514  002EA8  6892               	setf	3986,c	;volatile
  6515                           
  6516                           ;basic.c: 115: TRISB = 0xFF;
  6517  002EAA  6893               	setf	3987,c	;volatile
  6518                           
  6519                           ;basic.c: 116: TRISD = TRISE = 0;
  6520  002EAC  0E00               	movlw	0
  6521  002EAE  6E96               	movwf	3990,c	;volatile
  6522  002EB0  CF96 FF95          	movff	3990,3989	;volatile
  6523                           
  6524                           ;basic.c: 117: TRISC = 0x80;
  6525  002EB4  0E80               	movlw	128
  6526  002EB6  6E94               	movwf	3988,c	;volatile
  6527  002EB8  0012               	return		;funcret
  6528  002EBA                     __end_of_initPorts:
  6529                           	opt stack 0
  6530                           tblptru	equ	0xFF8
  6531                           tblptrh	equ	0xFF7
  6532                           tblptrl	equ	0xFF6
  6533                           tablat	equ	0xFF5
  6534                           prodh	equ	0xFF4
  6535                           prodl	equ	0xFF3
  6536                           intcon	equ	0xFF2
  6537                           postinc0	equ	0xFEE
  6538                           wreg	equ	0xFE8
  6539                           postdec1	equ	0xFE5
  6540                           fsr1l	equ	0xFE1
  6541                           indf2	equ	0xFDF
  6542                           postinc2	equ	0xFDE
  6543                           postdec2	equ	0xFDD
  6544                           fsr2h	equ	0xFDA
  6545                           fsr2l	equ	0xFD9
  6546                           status	equ	0xFD8
  6547                           
  6548 ;; *************** function _displayWelcomeMessage *****************
  6549 ;; Defined at:
  6550 ;;		line 120 in file "basic.c"
  6551 ;; Parameters:    Size  Location     Type
  6552 ;;		None
  6553 ;; Auto vars:     Size  Location     Type
  6554 ;;		None
  6555 ;; Return value:  Size  Location     Type
  6556 ;;                  1    wreg      void 
  6557 ;; Registers used:
  6558 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6559 ;; Tracked objects:
  6560 ;;		On entry : 0/0
  6561 ;;		On exit  : 0/0
  6562 ;;		Unchanged: 0/0
  6563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6564 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6565 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6567 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6568 ;;Total ram usage:        0 bytes
  6569 ;; Hardware stack levels used:    1
  6570 ;; Hardware stack levels required when called:    6
  6571 ;; This function calls:
  6572 ;;		_delay_ms
  6573 ;;		_lcd_gotoxy
  6574 ;;		_lcd_putc
  6575 ;;		_lcd_puts
  6576 ;;		_send_string_no_lib
  6577 ;; This function is called by:
  6578 ;;		_main
  6579 ;; This function uses a non-reentrant model
  6580 ;;
  6581                           
  6582                           	psect	text32
  6583  002D7C                     __ptext32:
  6584                           	opt stack 0
  6585  002D7C                     _displayWelcomeMessage:
  6586                           	opt stack 24
  6587                           
  6588                           ;basic.c: 121: lcd_putc('\f');
  6589                           
  6590                           ;incstack = 0
  6591  002D7C  0E0C               	movlw	12
  6592  002D7E  EC0F  F016         	call	_lcd_putc
  6593                           
  6594                           ;basic.c: 122: lcd_gotoxy(1, 1);
  6595  002D82  0E01               	movlw	1
  6596  002D84  6E0B               	movwf	lcd_gotoxy@y,c
  6597  002D86  0E01               	movlw	1
  6598  002D88  EC5E  F016         	call	_lcd_gotoxy
  6599                           
  6600                           ;basic.c: 123: lcd_puts("Mohammad Najjar , Mohammad Anwar ");
  6601  002D8C  0E77               	movlw	low STR_1
  6602  002D8E  6E0F               	movwf	lcd_puts@s,c
  6603  002D90  0E10               	movlw	high STR_1
  6604  002D92  6E10               	movwf	lcd_puts@s+1,c
  6605  002D94  ECE4  F015         	call	_lcd_puts	;wreg free
  6606                           
  6607                           ;basic.c: 124: delay_ms(20000);
  6608  002D98  0E4E               	movlw	78
  6609  002D9A  6E02               	movwf	delay_ms@n+1,c
  6610  002D9C  0E20               	movlw	32
  6611  002D9E  6E01               	movwf	delay_ms@n,c
  6612  002DA0  EC85  F017         	call	_delay_ms	;wreg free
  6613                           
  6614                           ;basic.c: 125: send_string_no_lib("Mohammad Najjar , Mohammad Anwar");
  6615  002DA4  0E99               	movlw	low STR_2
  6616  002DA6  6E02               	movwf	send_string_no_lib@p,c
  6617  002DA8  0E10               	movlw	high STR_2
  6618  002DAA  6E03               	movwf	send_string_no_lib@p+1,c
  6619  002DAC  EC5D  F017         	call	_send_string_no_lib	;wreg free
  6620                           
  6621                           ;basic.c: 126: lcd_putc('\f');
  6622  002DB0  0E0C               	movlw	12
  6623  002DB2  EC0F  F016         	call	_lcd_putc
  6624  002DB6  0012               	return		;funcret
  6625  002DB8                     __end_of_displayWelcomeMessage:
  6626                           	opt stack 0
  6627                           tblptru	equ	0xFF8
  6628                           tblptrh	equ	0xFF7
  6629                           tblptrl	equ	0xFF6
  6630                           tablat	equ	0xFF5
  6631                           prodh	equ	0xFF4
  6632                           prodl	equ	0xFF3
  6633                           intcon	equ	0xFF2
  6634                           postinc0	equ	0xFEE
  6635                           wreg	equ	0xFE8
  6636                           postdec1	equ	0xFE5
  6637                           fsr1l	equ	0xFE1
  6638                           indf2	equ	0xFDF
  6639                           postinc2	equ	0xFDE
  6640                           postdec2	equ	0xFDD
  6641                           fsr2h	equ	0xFDA
  6642                           fsr2l	equ	0xFD9
  6643                           status	equ	0xFD8
  6644                           
  6645 ;; *************** function _send_string_no_lib *****************
  6646 ;; Defined at:
  6647 ;;		line 46 in file "my_ser.c"
  6648 ;; Parameters:    Size  Location     Type
  6649 ;;  p               2    1[COMRAM] PTR unsigned char 
  6650 ;;		 -> STR_2(33), 
  6651 ;; Auto vars:     Size  Location     Type
  6652 ;;		None
  6653 ;; Return value:  Size  Location     Type
  6654 ;;                  1    wreg      void 
  6655 ;; Registers used:
  6656 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6657 ;; Tracked objects:
  6658 ;;		On entry : 0/0
  6659 ;;		On exit  : 0/0
  6660 ;;		Unchanged: 0/0
  6661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6662 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6663 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6664 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6665 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6666 ;;Total ram usage:        2 bytes
  6667 ;; Hardware stack levels used:    1
  6668 ;; Hardware stack levels required when called:    1
  6669 ;; This function calls:
  6670 ;;		_send_byte_no_lib
  6671 ;; This function is called by:
  6672 ;;		_displayWelcomeMessage
  6673 ;; This function uses a non-reentrant model
  6674 ;;
  6675                           
  6676                           	psect	text33
  6677  002EBA                     __ptext33:
  6678                           	opt stack 0
  6679  002EBA                     _send_string_no_lib:
  6680                           	opt stack 28
  6681                           
  6682                           ;my_ser.c: 47: while (*p) {
  6683                           
  6684                           ;incstack = 0
  6685  002EBA  D00A               	goto	l218
  6686  002EBC                     
  6687                           ;my_ser.c: 48: send_byte_no_lib(*p);
  6688  002EBC  C002  FFF6         	movff	send_string_no_lib@p,tblptrl
  6689  002EC0  C003  FFF7         	movff	send_string_no_lib@p+1,tblptrh
  6690  002EC4                     	if	0	;tblptru may be non-zero
  6691  002EC4                     	endif
  6692  002EC4                     	if	0	;tblptru may be non-zero
  6693  002EC4                     	endif
  6694  002EC4  0008               	tblrd		*
  6695  002EC6  50F5               	movf	tablat,w,c
  6696  002EC8  ECFA  F017         	call	_send_byte_no_lib
  6697                           
  6698                           ;my_ser.c: 49: p++;
  6699  002ECC  4A02               	infsnz	send_string_no_lib@p,f,c
  6700  002ECE  2A03               	incf	send_string_no_lib@p+1,f,c
  6701  002ED0                     l218:
  6702  002ED0  C002  FFF6         	movff	send_string_no_lib@p,tblptrl
  6703  002ED4  C003  FFF7         	movff	send_string_no_lib@p+1,tblptrh
  6704  002ED8                     	if	0	;tblptru may be non-zero
  6705  002ED8                     	endif
  6706  002ED8                     	if	0	;tblptru may be non-zero
  6707  002ED8                     	endif
  6708  002ED8  0008               	tblrd		*
  6709  002EDA  50F5               	movf	tablat,w,c
  6710  002EDC  0900               	iorlw	0
  6711  002EDE  B4D8               	btfsc	status,2,c
  6712  002EE0  0012               	return	
  6713  002EE2  D7EC               	goto	l219
  6714  002EE4                     __end_of_send_string_no_lib:
  6715                           	opt stack 0
  6716                           tblptru	equ	0xFF8
  6717                           tblptrh	equ	0xFF7
  6718                           tblptrl	equ	0xFF6
  6719                           tablat	equ	0xFF5
  6720                           prodh	equ	0xFF4
  6721                           prodl	equ	0xFF3
  6722                           intcon	equ	0xFF2
  6723                           postinc0	equ	0xFEE
  6724                           wreg	equ	0xFE8
  6725                           postdec1	equ	0xFE5
  6726                           fsr1l	equ	0xFE1
  6727                           indf2	equ	0xFDF
  6728                           postinc2	equ	0xFDE
  6729                           postdec2	equ	0xFDD
  6730                           fsr2h	equ	0xFDA
  6731                           fsr2l	equ	0xFD9
  6732                           status	equ	0xFD8
  6733                           
  6734 ;; *************** function _send_byte_no_lib *****************
  6735 ;; Defined at:
  6736 ;;		line 38 in file "my_ser.c"
  6737 ;; Parameters:    Size  Location     Type
  6738 ;;  c               1    wreg     unsigned char 
  6739 ;; Auto vars:     Size  Location     Type
  6740 ;;  c               1    0[COMRAM] unsigned char 
  6741 ;; Return value:  Size  Location     Type
  6742 ;;                  1    wreg      void 
  6743 ;; Registers used:
  6744 ;;		wreg
  6745 ;; Tracked objects:
  6746 ;;		On entry : 0/0
  6747 ;;		On exit  : 0/0
  6748 ;;		Unchanged: 0/0
  6749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6750 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6751 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6752 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6753 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6754 ;;Total ram usage:        1 bytes
  6755 ;; Hardware stack levels used:    1
  6756 ;; This function calls:
  6757 ;;		Nothing
  6758 ;; This function is called by:
  6759 ;;		_send_string_no_lib
  6760 ;; This function uses a non-reentrant model
  6761 ;;
  6762                           
  6763                           	psect	text34
  6764  002FF4                     __ptext34:
  6765                           	opt stack 0
  6766  002FF4                     _send_byte_no_lib:
  6767                           	opt stack 28
  6768                           
  6769                           ;incstack = 0
  6770                           ;send_byte_no_lib@c stored from wreg
  6771  002FF4  6E01               	movwf	send_byte_no_lib@c,c
  6772                           
  6773                           ;my_ser.c: 39: while (!TXSTAbits.TRMT)
  6774  002FF6  D001               	goto	l212
  6775  002FF8                     l213:
  6776  002FF8  0004               	clrwdt		;# 
  6777  002FFA                     l212:
  6778  002FFA  A2AC               	btfss	4012,1,c	;volatile
  6779  002FFC  D7FD               	goto	l213
  6780                           
  6781                           ;my_ser.c: 42: }
  6782                           ;my_ser.c: 43: TXREG = c;
  6783  002FFE  C001  FFAD         	movff	send_byte_no_lib@c,4013	;volatile
  6784  003002  0012               	return		;funcret
  6785  003004                     __end_of_send_byte_no_lib:
  6786                           	opt stack 0
  6787                           tblptru	equ	0xFF8
  6788                           tblptrh	equ	0xFF7
  6789                           tblptrl	equ	0xFF6
  6790                           tablat	equ	0xFF5
  6791                           prodh	equ	0xFF4
  6792                           prodl	equ	0xFF3
  6793                           intcon	equ	0xFF2
  6794                           postinc0	equ	0xFEE
  6795                           wreg	equ	0xFE8
  6796                           postdec1	equ	0xFE5
  6797                           fsr1l	equ	0xFE1
  6798                           indf2	equ	0xFDF
  6799                           postinc2	equ	0xFDE
  6800                           postdec2	equ	0xFDD
  6801                           fsr2h	equ	0xFDA
  6802                           fsr2l	equ	0xFD9
  6803                           status	equ	0xFD8
  6804                           
  6805 ;; *************** function _lcd_puts *****************
  6806 ;; Defined at:
  6807 ;;		line 120 in file "lcd_x8.c"
  6808 ;; Parameters:    Size  Location     Type
  6809 ;;  s               2   14[COMRAM] PTR unsigned char 
  6810 ;;		 -> displayBuffer(100), STR_1(34), 
  6811 ;; Auto vars:     Size  Location     Type
  6812 ;;		None
  6813 ;; Return value:  Size  Location     Type
  6814 ;;                  1    wreg      void 
  6815 ;; Registers used:
  6816 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6817 ;; Tracked objects:
  6818 ;;		On entry : 0/0
  6819 ;;		On exit  : 0/0
  6820 ;;		Unchanged: 0/0
  6821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6822 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6823 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6825 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6826 ;;Total ram usage:        2 bytes
  6827 ;; Hardware stack levels used:    1
  6828 ;; Hardware stack levels required when called:    5
  6829 ;; This function calls:
  6830 ;;		_lcd_putc
  6831 ;; This function is called by:
  6832 ;;		_displayWelcomeMessage
  6833 ;;		_processADCValues
  6834 ;; This function uses a non-reentrant model
  6835 ;;
  6836                           
  6837                           	psect	text35
  6838  002BC8                     __ptext35:
  6839                           	opt stack 0
  6840  002BC8                     _lcd_puts:
  6841                           	opt stack 24
  6842                           
  6843                           ;lcd_x8.c: 121: while (*s) {
  6844                           
  6845                           ;incstack = 0
  6846  002BC8  D015               	goto	l142
  6847  002BCA                     
  6848                           ;lcd_x8.c: 122: lcd_putc(*s);
  6849  002BCA  C00F  FFF6         	movff	lcd_puts@s,tblptrl
  6850  002BCE  C010  FFF7         	movff	lcd_puts@s+1,tblptrh
  6851  002BD2  0E00               	movlw	low (__smallconst shr (0+16))
  6852  002BD4  6EF8               	movwf	tblptru,c
  6853  002BD6  0E0F               	movlw	(high __ramtop+-1)
  6854  002BD8  64F7               	cpfsgt	tblptrh,c
  6855  002BDA  D003               	bra	u2677
  6856  002BDC  0008               	tblrd		*
  6857  002BDE  50F5               	movf	tablat,w,c
  6858  002BE0  D005               	bra	u2670
  6859  002BE2                     u2677:
  6860  002BE2  CFF6 FFE9          	movff	tblptrl,fsr0l
  6861  002BE6  CFF7 FFEA          	movff	tblptrh,fsr0h
  6862  002BEA  50EF               	movf	indf0,w,c
  6863  002BEC                     u2670:
  6864  002BEC  EC0F  F016         	call	_lcd_putc
  6865                           
  6866                           ;lcd_x8.c: 123: s++;
  6867  002BF0  4A0F               	infsnz	lcd_puts@s,f,c
  6868  002BF2  2A10               	incf	lcd_puts@s+1,f,c
  6869  002BF4                     l142:
  6870  002BF4  C00F  FFF6         	movff	lcd_puts@s,tblptrl
  6871  002BF8  C010  FFF7         	movff	lcd_puts@s+1,tblptrh
  6872  002BFC  0E00               	movlw	low (__smallconst shr (0+16))
  6873  002BFE  6EF8               	movwf	tblptru,c
  6874  002C00  0E0F               	movlw	(high __ramtop+-1)
  6875  002C02  64F7               	cpfsgt	tblptrh,c
  6876  002C04  D003               	bra	u2687
  6877  002C06  0008               	tblrd		*
  6878  002C08  50F5               	movf	tablat,w,c
  6879  002C0A  D005               	bra	u2680
  6880  002C0C                     u2687:
  6881  002C0C  CFF6 FFE9          	movff	tblptrl,fsr0l
  6882  002C10  CFF7 FFEA          	movff	tblptrh,fsr0h
  6883  002C14  50EF               	movf	indf0,w,c
  6884  002C16                     u2680:
  6885  002C16  0900               	iorlw	0
  6886  002C18  B4D8               	btfsc	status,2,c
  6887  002C1A  0012               	return	
  6888  002C1C  D7D6               	goto	l143
  6889  002C1E                     __end_of_lcd_puts:
  6890                           	opt stack 0
  6891                           tblptru	equ	0xFF8
  6892                           tblptrh	equ	0xFF7
  6893                           tblptrl	equ	0xFF6
  6894                           tablat	equ	0xFF5
  6895                           prodh	equ	0xFF4
  6896                           prodl	equ	0xFF3
  6897                           intcon	equ	0xFF2
  6898                           indf0	equ	0xFEF
  6899                           postinc0	equ	0xFEE
  6900                           fsr0h	equ	0xFEA
  6901                           fsr0l	equ	0xFE9
  6902                           wreg	equ	0xFE8
  6903                           postdec1	equ	0xFE5
  6904                           fsr1l	equ	0xFE1
  6905                           indf2	equ	0xFDF
  6906                           postinc2	equ	0xFDE
  6907                           postdec2	equ	0xFDD
  6908                           fsr2h	equ	0xFDA
  6909                           fsr2l	equ	0xFD9
  6910                           status	equ	0xFD8
  6911                           
  6912 ;; *************** function _lcd_putc *****************
  6913 ;; Defined at:
  6914 ;;		line 106 in file "lcd_x8.c"
  6915 ;; Parameters:    Size  Location     Type
  6916 ;;  c               1    wreg     unsigned char 
  6917 ;; Auto vars:     Size  Location     Type
  6918 ;;  c               1   13[COMRAM] unsigned char 
  6919 ;; Return value:  Size  Location     Type
  6920 ;;                  1    wreg      void 
  6921 ;; Registers used:
  6922 ;;		wreg, status,2, status,0, cstack
  6923 ;; Tracked objects:
  6924 ;;		On entry : 0/0
  6925 ;;		On exit  : 0/0
  6926 ;;		Unchanged: 0/0
  6927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6928 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6929 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6931 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6932 ;;Total ram usage:        1 bytes
  6933 ;; Hardware stack levels used:    1
  6934 ;; Hardware stack levels required when called:    4
  6935 ;; This function calls:
  6936 ;;		_delay_ms
  6937 ;;		_lcd_gotoxy
  6938 ;;		_lcd_send_byte
  6939 ;; This function is called by:
  6940 ;;		_displayWelcomeMessage
  6941 ;;		_processReceivedChar
  6942 ;;		_lcd_puts
  6943 ;; This function uses a non-reentrant model
  6944 ;;
  6945                           
  6946                           	psect	text36
  6947  002C1E                     __ptext36:
  6948                           	opt stack 0
  6949  002C1E                     _lcd_putc:
  6950                           	opt stack 25
  6951                           
  6952                           ;incstack = 0
  6953                           ;lcd_putc@c stored from wreg
  6954  002C1E  6E0E               	movwf	lcd_putc@c,c
  6955                           
  6956                           ;lcd_x8.c: 107: switch (c) {
  6957  002C20  D01E               	goto	l133
  6958  002C22  0E01               	movlw	1
  6959  002C24  6E09               	movwf	lcd_send_byte@n,c
  6960  002C26  0E00               	movlw	0
  6961  002C28  EC3A  F016         	call	_lcd_send_byte
  6962                           
  6963                           ;lcd_x8.c: 109: delay_ms(2);
  6964  002C2C  0E00               	movlw	0
  6965  002C2E  6E02               	movwf	delay_ms@n+1,c
  6966  002C30  0E02               	movlw	2
  6967  002C32  6E01               	movwf	delay_ms@n,c
  6968  002C34  EC85  F017         	call	_delay_ms	;wreg free
  6969                           
  6970                           ;lcd_x8.c: 110: break;
  6971  002C38  0012               	return	
  6972  002C3A  0E02               	movlw	2
  6973  002C3C  6E0B               	movwf	lcd_gotoxy@y,c
  6974  002C3E  0E01               	movlw	1
  6975  002C40  EC5E  F016         	call	_lcd_gotoxy
  6976                           
  6977                           ;lcd_x8.c: 112: break;
  6978  002C44  0012               	return	
  6979  002C46  0E10               	movlw	16
  6980  002C48  6E09               	movwf	lcd_send_byte@n,c
  6981  002C4A  0E00               	movlw	0
  6982  002C4C  EC3A  F016         	call	_lcd_send_byte
  6983                           
  6984                           ;lcd_x8.c: 114: break;
  6985  002C50  0012               	return	
  6986  002C52  C00E  F009         	movff	lcd_putc@c,lcd_send_byte@n
  6987  002C56  0E01               	movlw	1
  6988  002C58  EC3A  F016         	call	_lcd_send_byte
  6989                           
  6990                           ;lcd_x8.c: 117: }
  6991                           
  6992                           ;lcd_x8.c: 116: break;
  6993  002C5C  0012               	return	
  6994  002C5E                     l133:
  6995  002C5E  500E               	movf	lcd_putc@c,w,c
  6996                           
  6997                           ; Switch size 1, requested type "space"
  6998                           ; Number of cases is 3, Range of values is 8 to 12
  6999                           ; switch strategies available:
  7000                           ; Name         Instructions Cycles
  7001                           ; simple_byte           10     6 (average)
  7002                           ;	Chosen strategy is simple_byte
  7003  002C60  0A08               	xorlw	8	; case 8
  7004  002C62  B4D8               	btfsc	status,2,c
  7005  002C64  D7F0               	goto	l137
  7006  002C66  0A02               	xorlw	2	; case 10
  7007  002C68  B4D8               	btfsc	status,2,c
  7008  002C6A  D7E7               	goto	l136
  7009  002C6C  0A06               	xorlw	6	; case 12
  7010  002C6E  B4D8               	btfsc	status,2,c
  7011  002C70  D7D8               	goto	l134
  7012  002C72  D7EF               	goto	l138
  7013  002C74                     __end_of_lcd_putc:
  7014                           	opt stack 0
  7015                           tblptru	equ	0xFF8
  7016                           tblptrh	equ	0xFF7
  7017                           tblptrl	equ	0xFF6
  7018                           tablat	equ	0xFF5
  7019                           prodh	equ	0xFF4
  7020                           prodl	equ	0xFF3
  7021                           intcon	equ	0xFF2
  7022                           indf0	equ	0xFEF
  7023                           postinc0	equ	0xFEE
  7024                           fsr0h	equ	0xFEA
  7025                           fsr0l	equ	0xFE9
  7026                           wreg	equ	0xFE8
  7027                           postdec1	equ	0xFE5
  7028                           fsr1l	equ	0xFE1
  7029                           indf2	equ	0xFDF
  7030                           postinc2	equ	0xFDE
  7031                           postdec2	equ	0xFDD
  7032                           fsr2h	equ	0xFDA
  7033                           fsr2l	equ	0xFD9
  7034                           status	equ	0xFD8
  7035                           
  7036 ;; *************** function _lcd_gotoxy *****************
  7037 ;; Defined at:
  7038 ;;		line 89 in file "lcd_x8.c"
  7039 ;; Parameters:    Size  Location     Type
  7040 ;;  x               1    wreg     unsigned char 
  7041 ;;  y               1   10[COMRAM] unsigned char 
  7042 ;; Auto vars:     Size  Location     Type
  7043 ;;  x               1   11[COMRAM] unsigned char 
  7044 ;;  address         1   12[COMRAM] unsigned char 
  7045 ;; Return value:  Size  Location     Type
  7046 ;;                  1    wreg      void 
  7047 ;; Registers used:
  7048 ;;		wreg, status,2, status,0, cstack
  7049 ;; Tracked objects:
  7050 ;;		On entry : 0/0
  7051 ;;		On exit  : 0/0
  7052 ;;		Unchanged: 0/0
  7053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7054 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7055 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7057 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7058 ;;Total ram usage:        3 bytes
  7059 ;; Hardware stack levels used:    1
  7060 ;; Hardware stack levels required when called:    3
  7061 ;; This function calls:
  7062 ;;		_lcd_send_byte
  7063 ;; This function is called by:
  7064 ;;		_displayWelcomeMessage
  7065 ;;		_processReceivedChar
  7066 ;;		_lcd_putc
  7067 ;; This function uses a non-reentrant model
  7068 ;;
  7069                           
  7070                           	psect	text37
  7071  002CBC                     __ptext37:
  7072                           	opt stack 0
  7073  002CBC                     _lcd_gotoxy:
  7074                           	opt stack 25
  7075                           
  7076                           ;incstack = 0
  7077                           ;lcd_gotoxy@x stored from wreg
  7078  002CBC  6E0C               	movwf	lcd_gotoxy@x,c
  7079                           
  7080                           ;lcd_x8.c: 90: unsigned char address;
  7081                           ;lcd_x8.c: 92: switch (y) {
  7082  002CBE  D009               	goto	l124
  7083  002CC0  0E80               	movlw	128
  7084  002CC2  D005               	goto	L5
  7085  002CC4  0EC0               	movlw	192
  7086  002CC6  D003               	goto	L5
  7087  002CC8  0E90               	movlw	144
  7088  002CCA  D001               	goto	L5
  7089  002CCC  0ED0               	movlw	208
  7090  002CCE                     L5:
  7091  002CCE  6E0D               	movwf	lcd_gotoxy@address,c
  7092                           
  7093                           ;lcd_x8.c: 101: }
  7094                           
  7095                           ;lcd_x8.c: 100: break;
  7096  002CD0  D00D               	goto	l126
  7097  002CD2                     l124:
  7098  002CD2  500B               	movf	lcd_gotoxy@y,w,c
  7099                           
  7100                           ; Switch size 1, requested type "space"
  7101                           ; Number of cases is 4, Range of values is 1 to 4
  7102                           ; switch strategies available:
  7103                           ; Name         Instructions Cycles
  7104                           ; simple_byte           13     7 (average)
  7105                           ;	Chosen strategy is simple_byte
  7106  002CD4  0A01               	xorlw	1	; case 1
  7107  002CD6  B4D8               	btfsc	status,2,c
  7108  002CD8  D7F3               	goto	l125
  7109  002CDA  0A03               	xorlw	3	; case 2
  7110  002CDC  B4D8               	btfsc	status,2,c
  7111  002CDE  D7F2               	goto	l127
  7112  002CE0  0A01               	xorlw	1	; case 3
  7113  002CE2  B4D8               	btfsc	status,2,c
  7114  002CE4  D7F1               	goto	l128
  7115  002CE6  0A07               	xorlw	7	; case 4
  7116  002CE8  B4D8               	btfsc	status,2,c
  7117  002CEA  D7F0               	goto	l129
  7118  002CEC                     l126:
  7119                           
  7120                           ;lcd_x8.c: 102: address += x - 1;
  7121  002CEC  040C               	decf	lcd_gotoxy@x,w,c
  7122  002CEE  260D               	addwf	lcd_gotoxy@address,f,c
  7123                           
  7124                           ;lcd_x8.c: 103: lcd_send_byte(0, (unsigned char) (0x80 | address));
  7125  002CF0  500D               	movf	lcd_gotoxy@address,w,c
  7126  002CF2  0980               	iorlw	128
  7127  002CF4  6E09               	movwf	lcd_send_byte@n,c
  7128  002CF6  0E00               	movlw	0
  7129  002CF8  EC3A  F016         	call	_lcd_send_byte
  7130  002CFC  0012               	return		;funcret
  7131  002CFE                     __end_of_lcd_gotoxy:
  7132                           	opt stack 0
  7133                           tblptru	equ	0xFF8
  7134                           tblptrh	equ	0xFF7
  7135                           tblptrl	equ	0xFF6
  7136                           tablat	equ	0xFF5
  7137                           prodh	equ	0xFF4
  7138                           prodl	equ	0xFF3
  7139                           intcon	equ	0xFF2
  7140                           indf0	equ	0xFEF
  7141                           postinc0	equ	0xFEE
  7142                           fsr0h	equ	0xFEA
  7143                           fsr0l	equ	0xFE9
  7144                           wreg	equ	0xFE8
  7145                           postdec1	equ	0xFE5
  7146                           fsr1l	equ	0xFE1
  7147                           indf2	equ	0xFDF
  7148                           postinc2	equ	0xFDE
  7149                           postdec2	equ	0xFDD
  7150                           fsr2h	equ	0xFDA
  7151                           fsr2l	equ	0xFD9
  7152                           status	equ	0xFD8
  7153                           
  7154 ;; *************** function _lcd_send_byte *****************
  7155 ;; Defined at:
  7156 ;;		line 39 in file "lcd_x8.c"
  7157 ;; Parameters:    Size  Location     Type
  7158 ;;  cm_data         1    wreg     unsigned char 
  7159 ;;  n               1    8[COMRAM] unsigned char 
  7160 ;; Auto vars:     Size  Location     Type
  7161 ;;  cm_data         1    9[COMRAM] unsigned char 
  7162 ;; Return value:  Size  Location     Type
  7163 ;;                  1    wreg      void 
  7164 ;; Registers used:
  7165 ;;		wreg, status,2, status,0, cstack
  7166 ;; Tracked objects:
  7167 ;;		On entry : 0/0
  7168 ;;		On exit  : 0/0
  7169 ;;		Unchanged: 0/0
  7170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7171 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7172 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7174 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7175 ;;Total ram usage:        2 bytes
  7176 ;; Hardware stack levels used:    1
  7177 ;; Hardware stack levels required when called:    2
  7178 ;; This function calls:
  7179 ;;		_delay_cycles
  7180 ;;		_delay_ms
  7181 ;;		_lcd_send_nibble
  7182 ;; This function is called by:
  7183 ;;		_lcd_init
  7184 ;;		_lcd_gotoxy
  7185 ;;		_lcd_putc
  7186 ;;		_Lcd_Shift_Right
  7187 ;;		_Lcd_Shift_Left
  7188 ;; This function uses a non-reentrant model
  7189 ;;
  7190                           
  7191                           	psect	text38
  7192  002C74                     __ptext38:
  7193                           	opt stack 0
  7194  002C74                     _lcd_send_byte:
  7195                           	opt stack 26
  7196                           
  7197                           ;incstack = 0
  7198                           ;lcd_send_byte@cm_data stored from wreg
  7199  002C74  6E0A               	movwf	lcd_send_byte@cm_data,c
  7200                           
  7201                           ;lcd_x8.c: 43: lcd.rs = cm_data;;
  7202  002C76  B00A               	btfsc	lcd_send_byte@cm_data,0,c
  7203  002C78  D002               	bra	u1665
  7204  002C7A  9283               	bcf	3971,1,c
  7205  002C7C  D001               	bra	u1666
  7206  002C7E                     u1665:
  7207  002C7E  8283               	bsf	3971,1,c
  7208  002C80                     u1666:
  7209                           
  7210                           ;lcd_x8.c: 44: delay_cycles(1);
  7211  002C80  0E01               	movlw	1
  7212  002C82  EC31  F017         	call	_delay_cycles
  7213                           
  7214                           ;lcd_x8.c: 46: delay_cycles(1);
  7215  002C86  0E01               	movlw	1
  7216  002C88  EC31  F017         	call	_delay_cycles
  7217                           
  7218                           ;lcd_x8.c: 47: lcd.enable = 0;;
  7219  002C8C  9683               	bcf	3971,3,c
  7220                           
  7221                           ;lcd_x8.c: 48: lcd_send_nibble(n >> 4);
  7222  002C8E  3809               	swapf	lcd_send_byte@n,w,c
  7223  002C90  0B0F               	andlw	15
  7224  002C92  ECCE  F017         	call	_lcd_send_nibble
  7225                           
  7226                           ;lcd_x8.c: 49: lcd_send_nibble(n & 0x0f);
  7227  002C96  5009               	movf	lcd_send_byte@n,w,c
  7228  002C98  0B0F               	andlw	15
  7229  002C9A  ECCE  F017         	call	_lcd_send_nibble
  7230                           
  7231                           ;lcd_x8.c: 50: if (cm_data) _delaywdt((unsigned long)((200)*(4000000UL/4000000.0)));
  7232  002C9E  500A               	movf	lcd_send_byte@cm_data,w,c
  7233  002CA0  B4D8               	btfsc	status,2,c
  7234  002CA2  D005               	goto	l112
  7235  002CA4  0E32               	movlw	50
  7236  002CA6                     u3237:
  7237  002CA6  0004               	clrwdt	
  7238  002CA8  2EE8               	decfsz	wreg,f,c
  7239  002CAA  D7FD               	bra	u3237
  7240  002CAC  0012               	return	
  7241  002CAE                     l112:
  7242                           
  7243                           ;lcd_x8.c: 51: else
  7244                           ;lcd_x8.c: 52: delay_ms(2);
  7245  002CAE  0E00               	movlw	0
  7246  002CB0  6E02               	movwf	delay_ms@n+1,c
  7247  002CB2  0E02               	movlw	2
  7248  002CB4  6E01               	movwf	delay_ms@n,c
  7249  002CB6  EC85  F017         	call	_delay_ms	;wreg free
  7250  002CBA  0012               	return	
  7251  002CBC                     __end_of_lcd_send_byte:
  7252                           	opt stack 0
  7253                           tblptru	equ	0xFF8
  7254                           tblptrh	equ	0xFF7
  7255                           tblptrl	equ	0xFF6
  7256                           tablat	equ	0xFF5
  7257                           prodh	equ	0xFF4
  7258                           prodl	equ	0xFF3
  7259                           intcon	equ	0xFF2
  7260                           indf0	equ	0xFEF
  7261                           postinc0	equ	0xFEE
  7262                           fsr0h	equ	0xFEA
  7263                           fsr0l	equ	0xFE9
  7264                           wreg	equ	0xFE8
  7265                           postdec1	equ	0xFE5
  7266                           fsr1l	equ	0xFE1
  7267                           indf2	equ	0xFDF
  7268                           postinc2	equ	0xFDE
  7269                           postdec2	equ	0xFDD
  7270                           fsr2h	equ	0xFDA
  7271                           fsr2l	equ	0xFD9
  7272                           status	equ	0xFD8
  7273                           
  7274 ;; *************** function _lcd_send_nibble *****************
  7275 ;; Defined at:
  7276 ;;		line 29 in file "lcd_x8.c"
  7277 ;; Parameters:    Size  Location     Type
  7278 ;;  n               1    wreg     unsigned char 
  7279 ;; Auto vars:     Size  Location     Type
  7280 ;;  n               1    7[COMRAM] unsigned char 
  7281 ;; Return value:  Size  Location     Type
  7282 ;;                  1    wreg      void 
  7283 ;; Registers used:
  7284 ;;		wreg, status,2, status,0, cstack
  7285 ;; Tracked objects:
  7286 ;;		On entry : 0/0
  7287 ;;		On exit  : 0/0
  7288 ;;		Unchanged: 0/0
  7289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7291 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7292 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7293 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7294 ;;Total ram usage:        2 bytes
  7295 ;; Hardware stack levels used:    1
  7296 ;; Hardware stack levels required when called:    1
  7297 ;; This function calls:
  7298 ;;		_delay_cycles
  7299 ;; This function is called by:
  7300 ;;		_lcd_send_byte
  7301 ;;		_lcd_init
  7302 ;; This function uses a non-reentrant model
  7303 ;;
  7304                           
  7305                           	psect	text39
  7306  002F9C                     __ptext39:
  7307                           	opt stack 0
  7308  002F9C                     _lcd_send_nibble:
  7309                           	opt stack 26
  7310                           
  7311                           ;incstack = 0
  7312                           ;lcd_send_nibble@n stored from wreg
  7313  002F9C  6E08               	movwf	lcd_send_nibble@n,c
  7314                           
  7315                           ;lcd_x8.c: 31: lcd.data = n;
  7316  002F9E  C008  F007         	movff	lcd_send_nibble@n,??_lcd_send_nibble
  7317  002FA2  3A07               	swapf	??_lcd_send_nibble,f,c
  7318  002FA4  5083               	movf	3971,w,c
  7319  002FA6  1807               	xorwf	??_lcd_send_nibble,w,c
  7320  002FA8  0B0F               	andlw	-241
  7321  002FAA  1807               	xorwf	??_lcd_send_nibble,w,c
  7322  002FAC  6E83               	movwf	3971,c
  7323                           
  7324                           ;lcd_x8.c: 33: delay_cycles(1);
  7325  002FAE  0E01               	movlw	1
  7326  002FB0  EC31  F017         	call	_delay_cycles
  7327                           
  7328                           ;lcd_x8.c: 34: lcd.enable = 1;;
  7329  002FB4  8683               	bsf	3971,3,c
  7330                           
  7331                           ;lcd_x8.c: 35: _delaywdt((unsigned long)((2)*(4000000UL/4000000.0)));
  7332  002FB6  0004               	clrwdt	
  7333  002FB8  F000               	nop		;2 cycle nop
  7334                           
  7335                           ;lcd_x8.c: 36: lcd.enable = 0;;
  7336  002FBA  9683               	bcf	3971,3,c
  7337  002FBC  0012               	return		;funcret
  7338  002FBE                     __end_of_lcd_send_nibble:
  7339                           	opt stack 0
  7340                           tblptru	equ	0xFF8
  7341                           tblptrh	equ	0xFF7
  7342                           tblptrl	equ	0xFF6
  7343                           tablat	equ	0xFF5
  7344                           prodh	equ	0xFF4
  7345                           prodl	equ	0xFF3
  7346                           intcon	equ	0xFF2
  7347                           indf0	equ	0xFEF
  7348                           postinc0	equ	0xFEE
  7349                           fsr0h	equ	0xFEA
  7350                           fsr0l	equ	0xFE9
  7351                           wreg	equ	0xFE8
  7352                           postdec1	equ	0xFE5
  7353                           fsr1l	equ	0xFE1
  7354                           indf2	equ	0xFDF
  7355                           postinc2	equ	0xFDE
  7356                           postdec2	equ	0xFDD
  7357                           fsr2h	equ	0xFDA
  7358                           fsr2l	equ	0xFD9
  7359                           status	equ	0xFD8
  7360                           
  7361 ;; *************** function _delay_cycles *****************
  7362 ;; Defined at:
  7363 ;;		line 20 in file "lcd_x8.c"
  7364 ;; Parameters:    Size  Location     Type
  7365 ;;  n               1    wreg     unsigned char 
  7366 ;; Auto vars:     Size  Location     Type
  7367 ;;  n               1    3[COMRAM] unsigned char 
  7368 ;;  x               2    4[COMRAM] int 
  7369 ;; Return value:  Size  Location     Type
  7370 ;;                  1    wreg      void 
  7371 ;; Registers used:
  7372 ;;		wreg, status,2, status,0
  7373 ;; Tracked objects:
  7374 ;;		On entry : 0/0
  7375 ;;		On exit  : 0/0
  7376 ;;		Unchanged: 0/0
  7377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7378 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7379 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7380 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7381 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7382 ;;Total ram usage:        6 bytes
  7383 ;; Hardware stack levels used:    1
  7384 ;; This function calls:
  7385 ;;		Nothing
  7386 ;; This function is called by:
  7387 ;;		_lcd_send_nibble
  7388 ;;		_lcd_send_byte
  7389 ;; This function uses a non-reentrant model
  7390 ;;
  7391                           
  7392                           	psect	text40
  7393  002E62                     __ptext40:
  7394                           	opt stack 0
  7395  002E62                     _delay_cycles:
  7396                           	opt stack 26
  7397                           
  7398                           ;incstack = 0
  7399                           ;delay_cycles@n stored from wreg
  7400  002E62  6E04               	movwf	delay_cycles@n,c
  7401                           
  7402                           ;lcd_x8.c: 21: int x;
  7403                           ;lcd_x8.c: 22: for (x = 0; x <= n; x++) {
  7404  002E64  0E00               	movlw	0
  7405  002E66  6E06               	movwf	delay_cycles@x+1,c
  7406  002E68  0E00               	movlw	0
  7407  002E6A  6E05               	movwf	delay_cycles@x,c
  7408  002E6C  D003               	goto	l103
  7409  002E6E                     l104:
  7410  002E6E  0004               	clrwdt		;# 
  7411  002E70  4A05               	infsnz	delay_cycles@x,f,c
  7412  002E72  2A06               	incf	delay_cycles@x+1,f,c
  7413  002E74                     l103:
  7414  002E74  5004               	movf	delay_cycles@n,w,c
  7415  002E76  6E01               	movwf	??_delay_cycles& (0+255),c
  7416  002E78  6A02               	clrf	(??_delay_cycles+1)& (0+255),c
  7417  002E7A  5005               	movf	delay_cycles@x,w,c
  7418  002E7C  5C01               	subwf	??_delay_cycles,w,c
  7419  002E7E  5002               	movf	??_delay_cycles+1,w,c
  7420  002E80  0A80               	xorlw	128
  7421  002E82  6E03               	movwf	(??_delay_cycles+2)& (0+255),c
  7422  002E84  5006               	movf	delay_cycles@x+1,w,c
  7423  002E86  0A80               	xorlw	128
  7424  002E88  5803               	subwfb	(??_delay_cycles+2)& (0+255),w,c
  7425  002E8A  A0D8               	btfss	status,0,c
  7426  002E8C  0012               	return	
  7427  002E8E  D7EF               	goto	l104
  7428  002E90                     __end_of_delay_cycles:
  7429                           	opt stack 0
  7430                           tblptru	equ	0xFF8
  7431                           tblptrh	equ	0xFF7
  7432                           tblptrl	equ	0xFF6
  7433                           tablat	equ	0xFF5
  7434                           prodh	equ	0xFF4
  7435                           prodl	equ	0xFF3
  7436                           intcon	equ	0xFF2
  7437                           indf0	equ	0xFEF
  7438                           postinc0	equ	0xFEE
  7439                           fsr0h	equ	0xFEA
  7440                           fsr0l	equ	0xFE9
  7441                           wreg	equ	0xFE8
  7442                           postdec1	equ	0xFE5
  7443                           fsr1l	equ	0xFE1
  7444                           indf2	equ	0xFDF
  7445                           postinc2	equ	0xFDE
  7446                           postdec2	equ	0xFDD
  7447                           fsr2h	equ	0xFDA
  7448                           fsr2l	equ	0xFD9
  7449                           status	equ	0xFD8
  7450                           
  7451 ;; *************** function _delay_ms *****************
  7452 ;; Defined at:
  7453 ;;		line 104 in file "basic.c"
  7454 ;; Parameters:    Size  Location     Type
  7455 ;;  n               2    0[COMRAM] unsigned int 
  7456 ;; Auto vars:     Size  Location     Type
  7457 ;;  i               2    2[COMRAM] int 
  7458 ;; Return value:  Size  Location     Type
  7459 ;;                  1    wreg      void 
  7460 ;; Registers used:
  7461 ;;		wreg, status,2, status,0
  7462 ;; Tracked objects:
  7463 ;;		On entry : 0/0
  7464 ;;		On exit  : 0/0
  7465 ;;		Unchanged: 0/0
  7466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7467 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7468 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7469 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7470 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7471 ;;Total ram usage:        4 bytes
  7472 ;; Hardware stack levels used:    1
  7473 ;; This function calls:
  7474 ;;		Nothing
  7475 ;; This function is called by:
  7476 ;;		_displayWelcomeMessage
  7477 ;;		_lcd_send_byte
  7478 ;;		_lcd_init
  7479 ;;		_lcd_putc
  7480 ;; This function uses a non-reentrant model
  7481 ;;
  7482                           
  7483                           	psect	text41
  7484  002F0A                     __ptext41:
  7485                           	opt stack 0
  7486  002F0A                     _delay_ms:
  7487                           	opt stack 27
  7488                           
  7489                           ;basic.c: 105: int i;
  7490                           ;basic.c: 106: for (i = 0; i < n; i++) {
  7491                           
  7492                           ;incstack = 0
  7493  002F0A  0E00               	movlw	0
  7494  002F0C  6E04               	movwf	delay_ms@i+1,c
  7495  002F0E  0E00               	movlw	0
  7496  002F10  6E03               	movwf	delay_ms@i,c
  7497  002F12  D007               	goto	l75
  7498  002F14                     
  7499                           ;basic.c: 107: _delaywdt((unsigned long)((1)*(4000000UL/4000.0)));
  7500  002F14  0EC8               	movlw	200
  7501  002F16                     u3247:
  7502  002F16  0004               	clrwdt	
  7503  002F18  0004               	clrwdt	
  7504  002F1A  2EE8               	decfsz	wreg,f,c
  7505  002F1C  D7FC               	bra	u3247
  7506  002F1E  4A03               	infsnz	delay_ms@i,f,c
  7507  002F20  2A04               	incf	delay_ms@i+1,f,c
  7508  002F22                     l75:
  7509  002F22  5001               	movf	delay_ms@n,w,c
  7510  002F24  5C03               	subwf	delay_ms@i,w,c
  7511  002F26  5002               	movf	delay_ms@n+1,w,c
  7512  002F28  5804               	subwfb	delay_ms@i+1,w,c
  7513  002F2A  B0D8               	btfsc	status,0,c
  7514  002F2C  0012               	return	
  7515  002F2E  D7F2               	goto	l76
  7516  002F30                     __end_of_delay_ms:
  7517                           	opt stack 0
  7518                           tblptru	equ	0xFF8
  7519                           tblptrh	equ	0xFF7
  7520                           tblptrl	equ	0xFF6
  7521                           tablat	equ	0xFF5
  7522                           prodh	equ	0xFF4
  7523                           prodl	equ	0xFF3
  7524                           intcon	equ	0xFF2
  7525                           indf0	equ	0xFEF
  7526                           postinc0	equ	0xFEE
  7527                           fsr0h	equ	0xFEA
  7528                           fsr0l	equ	0xFE9
  7529                           wreg	equ	0xFE8
  7530                           postdec1	equ	0xFE5
  7531                           fsr1l	equ	0xFE1
  7532                           indf2	equ	0xFDF
  7533                           postinc2	equ	0xFDE
  7534                           postdec2	equ	0xFDD
  7535                           fsr2h	equ	0xFDA
  7536                           fsr2l	equ	0xFD9
  7537                           status	equ	0xFD8
  7538                           tblptru	equ	0xFF8
  7539                           tblptrh	equ	0xFF7
  7540                           tblptrl	equ	0xFF6
  7541                           tablat	equ	0xFF5
  7542                           prodh	equ	0xFF4
  7543                           prodl	equ	0xFF3
  7544                           intcon	equ	0xFF2
  7545                           indf0	equ	0xFEF
  7546                           postinc0	equ	0xFEE
  7547                           fsr0h	equ	0xFEA
  7548                           fsr0l	equ	0xFE9
  7549                           wreg	equ	0xFE8
  7550                           postdec1	equ	0xFE5
  7551                           fsr1l	equ	0xFE1
  7552                           indf2	equ	0xFDF
  7553                           postinc2	equ	0xFDE
  7554                           postdec2	equ	0xFDD
  7555                           fsr2h	equ	0xFDA
  7556                           fsr2l	equ	0xFD9
  7557                           status	equ	0xFD8
  7558                           
  7559                           	psect	rparam
  7560  0000                     tblptru	equ	0xFF8
  7561                           tblptrh	equ	0xFF7
  7562                           tblptrl	equ	0xFF6
  7563                           tablat	equ	0xFF5
  7564                           prodh	equ	0xFF4
  7565                           prodl	equ	0xFF3
  7566                           intcon	equ	0xFF2
  7567                           indf0	equ	0xFEF
  7568                           postinc0	equ	0xFEE
  7569                           fsr0h	equ	0xFEA
  7570                           fsr0l	equ	0xFE9
  7571                           wreg	equ	0xFE8
  7572                           postdec1	equ	0xFE5
  7573                           fsr1l	equ	0xFE1
  7574                           indf2	equ	0xFDF
  7575                           postinc2	equ	0xFDE
  7576                           postdec2	equ	0xFDD
  7577                           fsr2h	equ	0xFDA
  7578                           fsr2l	equ	0xFD9
  7579                           status	equ	0xFD8


Data Sizes:
    Strings     86
    Constant    118
    Data        6
    BSS         101
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    107     114
    BANK0           128      0     100
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_4(CODE[11]), STR_3(CODE[8]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 100
		 -> displayBuffer(BANK0[100]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    send_string_no_lib@p	PTR unsigned char  size(2) Largest target is 33
		 -> STR_2(CODE[33]), 

    lcd_puts@s	PTR unsigned char  size(2) Largest target is 100
		 -> displayBuffer(BANK0[100]), STR_1(CODE[34]), 


Critical Paths under _main in COMRAM

    _main->_processADCValues
    _processReceivedChar->_lcd_putc
    _processADCValues->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    _read_adc_voltage->___ftdiv
    ___wmul->___awdiv
    ___ftdiv->___ftmul
    ___awtoft->___wmul
    _lcd_init->_lcd_send_byte
    _displayWelcomeMessage->_lcd_puts
    _send_string_no_lib->_send_byte_no_lib
    _lcd_puts->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_send_byte
    _lcd_send_byte->_lcd_send_nibble
    _lcd_send_nibble->_delay_cycles

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   87643
              _displayWelcomeMessage
                          _initPorts
                    _init_adc_no_lib
                           _lcd_init
                   _processADCValues
                _processReceivedChar
                        _setupSerial
 ---------------------------------------------------------------------------------
 (1) _setupSerial                                          1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _processReceivedChar                                  0     0      0    4563
                  _is_byte_available
                         _lcd_gotoxy
                           _lcd_putc
                   _read_byte_no_lib
 ---------------------------------------------------------------------------------
 (2) _read_byte_no_lib                                     1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _is_byte_available                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _processADCValues                                     6     6      0   72916
                                            101 COMRAM     6     6      0
                            ___ftdiv
                            ___ftmul
                           _lcd_puts
                   _read_adc_voltage
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             44    37      7   51439
                                             63 COMRAM    38    31      7
                            ___awdiv
                            ___ftadd
                            ___ftdiv (ARG)
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                                7     4      3   12363
                                             35 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _fround                                              10     7      3   12165
                                             35 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    5237
                                             20 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    1664
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1820
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     455
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          12     6      6     598
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2650
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     615
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     466
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     480
                                             42 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    4120
                                             57 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    3775
                                             45 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     121
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     592
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (2) _read_adc_voltage                                    12     9      3    9518
                                             50 COMRAM    12     9      3
                           ___awtoft
                            ___ftdiv
                             ___wmul
                _read_adc_raw_no_lib
 ---------------------------------------------------------------------------------
 (3) _read_adc_raw_no_lib                                  7     5      2      45
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    3199
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             15     9      6    3367
                                             35 COMRAM    15     9      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    2748
                                             20 COMRAM     4     1      3
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2505
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0    1768
                                             10 COMRAM     1     1      0
                           _delay_ms
                      _lcd_send_byte
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (1) _init_adc_no_lib                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initPorts                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _displayWelcomeMessage                                0     0      0    8396
                           _delay_ms
                         _lcd_gotoxy
                           _lcd_putc
                           _lcd_puts
                 _send_string_no_lib
 ---------------------------------------------------------------------------------
 (2) _send_string_no_lib                                   2     0      2     136
                                              1 COMRAM     2     0      2
                   _send_byte_no_lib
 ---------------------------------------------------------------------------------
 (3) _send_byte_no_lib                                     1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _lcd_puts                                             2     0      2    3286
                                             14 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (2) _lcd_putc                                             1     1      0    3089
                                             13 COMRAM     1     1      0
                           _delay_ms
                         _lcd_gotoxy
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (3) _lcd_gotoxy                                           3     2      1    1459
                                             10 COMRAM     3     2      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (3) _lcd_send_byte                                        2     1      1    1160
                                              8 COMRAM     2     1      1
                       _delay_cycles
                           _delay_ms
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (4) _lcd_send_nibble                                      2     2      0      68
                                              6 COMRAM     2     2      0
                       _delay_cycles
 ---------------------------------------------------------------------------------
 (5) _delay_cycles                                         6     6      0      46
                                              0 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             4     2      2     426
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _displayWelcomeMessage
     _delay_ms
     _lcd_gotoxy
       _lcd_send_byte
         _delay_cycles
         _delay_ms
         _lcd_send_nibble
           _delay_cycles
     _lcd_putc
       _delay_ms
       _lcd_gotoxy
         _lcd_send_byte
           _delay_cycles
           _delay_ms
           _lcd_send_nibble
             _delay_cycles
       _lcd_send_byte
         _delay_cycles
         _delay_ms
         _lcd_send_nibble
           _delay_cycles
     _lcd_puts
       _lcd_putc
         _delay_ms
         _lcd_gotoxy
           _lcd_send_byte
             _delay_cycles
             _delay_ms
             _lcd_send_nibble
               _delay_cycles
         _lcd_send_byte
           _delay_cycles
           _delay_ms
           _lcd_send_nibble
             _delay_cycles
     _send_string_no_lib
       _send_byte_no_lib
   _initPorts
   _init_adc_no_lib
   _lcd_init
     _delay_ms
     _lcd_send_byte
       _delay_cycles
       _delay_ms
       _lcd_send_nibble
         _delay_cycles
     _lcd_send_nibble
       _delay_cycles
   _processADCValues
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _lcd_puts
       _lcd_putc
         _delay_ms
         _lcd_gotoxy
           _lcd_send_byte
             _delay_cycles
             _delay_ms
             _lcd_send_nibble
               _delay_cycles
         _lcd_send_byte
           _delay_cycles
           _delay_ms
           _lcd_send_nibble
             _delay_cycles
     _read_adc_voltage
       ___awtoft
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _read_adc_raw_no_lib
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _processReceivedChar
     _is_byte_available
     _lcd_gotoxy
       _lcd_send_byte
         _delay_cycles
         _delay_ms
         _lcd_send_nibble
           _delay_cycles
     _lcd_putc
       _delay_ms
       _lcd_gotoxy
         _lcd_send_byte
           _delay_cycles
           _delay_ms
           _lcd_send_nibble
             _delay_cycles
       _lcd_send_byte
         _delay_cycles
         _delay_ms
         _lcd_send_nibble
           _delay_cycles
     _read_byte_no_lib
   _setupSerial

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      64       5       78.1%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     6B      72       1       89.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      D6      34        0.0%
DATA                 0      0      D6       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Jun 04 18:54:56 2024

             ?_read_adc_voltage 0033              ??_read_adc_voltage 0036                              l75 2F22  
                            l76 2F14                              l69 2F48                  ?_lcd_send_byte 0009  
                  ___awdiv@sign 000C             ___wmul@multiplicand 0011                     __CFG_BORV$3 000000  
                  __CFG_CP0$OFF 000000                    __CFG_CP1$OFF 000000                    __CFG_CP2$OFF 000000  
                  __CFG_CP3$OFF 000000                     __CFG_OSC$XT 000000                    ___ftadd@exp1 0039  
                  ___ftadd@exp2 0038                     __CFG_LVP$ON 000000                    ___ftadd@sign 0037  
                   __CFG_WDT$ON 000000                             l103 2E74                             l104 2E6E  
                           l112 2CAE                             l201 2FE8                             l124 2CD2  
                           l212 2FFA                             l204 2FF0                             l125 2CC0  
                           l133 2C5E                             l213 2FF8                             l117 2B26  
                           l301 163C                             l126 2CEC                             l134 2C22  
                           l142 2BF4                             l310 17D4                             l302 15AA  
                           l127 2CC4                             l143 2BCA                             l119 2B4E  
                           l311 16F6                             l128 2CC8                             l136 2C3A  
                           l240 1E8A                             l320 1874                             l304 165C  
                           l129 2CCC                             l137 2C46                             l313 17F4  
                           l305 1646                             l138 2C52                             l218 2ED0  
                           l250 1B20                             l322 1896                             l314 17DE  
                           l219 2EBC                             l243 1F56                             l251 1C70  
                           l323 189E                             l307 1680                             l500 2952  
                           l324 18C2                             l316 1816                             l308 1684  
                           l260 111E                             l173 26D6                             l253 1D20  
                           l325 18CA                             l317 1832                             l309 16A6  
                           l174 272C                             l502 2970                             l246 1B44  
                           l270 11F4                             l262 11E8                             l503 2968  
                           l247 1A70                             l319 1852                             l271 121A  
                           l263 11D2                             l168 2DCE                             l520 2A8C  
                           l512 2A48                             l280 1386                             l264 119C  
                           l521 2A9A                             l513 2A54                             l329 1914  
                           l273 17FE                             l281 13C4                             l257 10DA  
                           l506 2990                             l282 1480                             l274 122E  
                           l258 10F2                             l603 2078                             l531 2292  
                           l507 299A                             l515 2A6A                             l291 14E4  
                           l275 126E                             l267 11F8                             l620 20D0  
                           l508 29A8                             l516 2A62                             l621 20EC  
                           l533 22B0                             l285 142C                             l277 12FE  
                           l630 2612                             l622 211C                             l534 22F2  
                           l278 1362                             l527 2E3E                             l631 2638  
                           l543 2384                             l535 2322                             l519 2A82  
                           l295 1550                             l608 206E                             l544 2378  
                           l617 20AC                             l609 2064                             l721 29E0  
                           l537 2360                             l641 2238                             l297 157C  
                           l570 286A                             l618 20A2                             l722 29D4  
                           l538 2350                             l642 2228                             l298 1566  
                           l563 2818                             l627 25AC                             l731 2AC2  
                           l635 216E                             l564 280E                             l652 28CE  
                           l732 2AB6                             l629 25D4                             l653 28FE  
                           l725 2A14                             l637 219A                             l661 23EC  
                           l566 284C                             l670 2F8E                             l726 2A22  
                           l742 2B7E                             l638 21D4                             l662 241E  
                           l567 2836                             l735 2AEA                             l743 2B72  
                           l647 225C                             l639 21FC                             l663 242E  
                           l680 24BC                             l736 2AF8                             l648 2250  
                           l569 2874                             l665 2446                             l594 1FE8  
                           l682 2532                             l666 2456                             l691 2572  
                           l683 2522                             l499 2942                             l659 23C4  
                           l676 2D14                             l598 2012                             l695 2FD4  
                           l688 2556                             l689 254A                    __CFG_CPB$OFF 000000  
                  __CFG_CPD$OFF 000000                             _lcd 000F83                    ___awmod@sign 0006  
                           prod 000FF3       read_adc_voltage@raw_value 003C                             wreg 000FE8  
                   lcd_gotoxy@x 000C                     lcd_gotoxy@y 000B                    ___ftdiv@cntr 002D  
                  ___ftdiv@sign 0032                            l3002 1566                            l2134 292A  
                          l3006 1576                            l3130 2B1E                            l3026 1646  
                          l3116 1910                            l3144 2B46                            l2962 1408  
                          l2954 13C4                            l2982 14E8                            STR_1 1077  
                          STR_2 1099                            STR_3 10C5                            STR_4 10BA  
                          u2120 2A6E                            u3000 167A                            u2060 2974  
                          _LATA 000F89                            _LATB 000F8A                            _LATC 000F8B  
                          u2400 238A                            _LATD 000F8C                            _LATE 000F8D  
                          u2330 2262                            u3130 18D2                            u2411 2594  
                          u2251 2152                            u3140 18F0                            u2431 25BC  
                          u2271 217E                            u1800 1FDA                            u3160 192E  
                          u1560 2FE4                            u2521 24A0                            u1730 287E  
                          u2610 29E4                            u3180 2B3C                            u1900 2080  
                          u2540 24DA                            u3237 2CA6                            u1830 2004  
                          u3247 2F16                            u2640 2AC6                            u1665 2C7E  
                          u1761 1FA6                            u2545 24D2                            u1666 2C80  
                          u1690 2800                            u1930 20B4                            u2810 12A6  
                          u1771 1FBA                            u1860 2042                            u2580 255C  
                          u2740 117A                            u2670 2BEC                            u2815 129C  
                          u2680 2C16                            u2930 1520                            u2850 1396  
                          u1971 23AC                            u2860 13D4                            u2677 2BE2  
                          u2687 2C0C                            u1991 23D4                            u2960 158A  
                          u2890 1408                            u2990 166A                ?_lcd_send_nibble 0001  
                          _main 2F30                    ___ftpack@arg 0001                _send_byte_no_lib 2FF4  
                  ___ftpack@exp 0004                            fsr0h 000FEA                            indf0 000FEF  
                          fsr2h 000FDA                            fsr0l 000FE9                            indf2 000FDF  
                          fsr1l 000FE1                            fsr2l 000FD9                            prodh 000FF4  
                          prodl 000FF3                            start 0000                   __CFG_IESO$OFF 000000  
                  _sprintf$1117 004D                   __CFG_MCLRE$ON 000000                    ___ftmul@cntr 0022  
                  ___param_bank 000000                    ___ftmul@sign 0023          ?_displayWelcomeMessage 0001  
                  ___fttol@exp1 0039           _processADCValues$1113 0066                    ___fttol@lval 0035  
          __end_of_delay_cycles 2E90                           ?_main 0001                 __end_of___awdiv 29B2  
               __end_of___ftadd 2142                 __end_of___awmod 2AA4                 __end_of___ftdiv 266A  
               __end_of___ftneg 2F9C                 __end_of___lldiv 2A34                 __end_of___ftmul 2490  
               ___awdiv@divisor 0009                 __end_of___llmod 2B0A                 __end_of___ftsub 2D3E  
               __end_of___fttol 2584                 ___awdiv@counter 000B                           _RCREG 000FAE  
                         _RCSTA 000FAB                           _SPBRG 000FAF         read_adc_voltage@channel 003E  
                         _TRISA 000F92                           _TRISB 000F93                           _TRISC 000F94  
                         _TRISD 000F95                           _TRISE 000F96                           _TXREG 000FAD  
                         _TXSTA 000FAC                   __CFG_PWRT$OFF 000000                   __CFG_WRT0$OFF 000000  
                 __CFG_WRT1$OFF 000000                   __CFG_WRT2$OFF 000000                   __CFG_WRT3$OFF 000000  
                  ___lltoft@exp 0011                  __CFG_EBTR0$OFF 000000                  __CFG_FCMEN$OFF 000000  
                __CFG_EBTR1$OFF 000000                  __CFG_EBTR2$OFF 000000                  __CFG_EBTR3$OFF 000000  
                 __CFG_WRTB$OFF 000000                   __CFG_WRTC$OFF 000000                   __CFG_WRTD$OFF 000000  
                __CFG_EBTRB$OFF 000000                   ___awtoft@sign 0018                 __end_of_dpowers 1029  
                         _scale 193C                 __end_of_isdigit 2FDC                 _init_adc_no_lib 3004  
                 ___ftpack@sign 0005                           tablat 000FF5                           status 000FD8  
       read_adc_voltage@voltage 0039                 __end_of_sprintf 193C                  __CFG_PBADEN$ON 000000  
              _processADCValues 273A                 __initialization 2DF2                    __end_of_main 2F54  
               ??_lcd_send_byte 000A                          ??_main 006C                   ___fttol@sign1 0034  
                 __activetblptr 000002            __size_of__tdiv_to_l_ 0132                          _ADCON0 000FC2  
                        _ADCON1 000FC1                          _ADCON2 000FC0                ___llmod@dividend 0001  
                        ?_scale 0024                          _ADRESH 000FC4                          _ADRESL 000FC3  
              ___awdiv@dividend 0007                __end_of___awtoft 2E62                __end_of___ftpack 289E  
              __end_of___lltoft 2BC8                          _INTCON 000FF2                          _SPBRGH 000FB0  
              __end_of_delay_ms 2F30                  __CFG_XINST$OFF 000000                __end_of__powers_ 1050  
              __end_of_lcd_init 2B6C                __end_of_lcd_putc 2C74                __end_of_lcd_puts 2C1E  
                        ___ftge 289E                          ___wmul 2EE4                       ??___awdiv 000B  
                     ??___ftadd 0034                  __CFG_STVREN$ON 000000                       ??___awmod 0005  
                     ??___ftdiv 002A                       ??___ftneg 0004                       ??___lldiv 0009  
                     ??___ftmul 001B                       ??___llmod 0009                       ??___ftsub 0040  
                     ??___fttol 002F                          _fround 1D44                          clear_0 2E18  
              ___awdiv@quotient 000D                 ___awmod@divisor 0003                 ___awmod@counter 0005  
         ___ftmul@f3_as_product 001F         __end_of_init_adc_no_lib 3010                    __pdataCOMRAM 006C  
                     ??_isdigit 0001                    __mediumconst 0000             send_string_no_lib@p 0002  
                        tblptrh 000FF7                          tblptrl 000FF6                          tblptru 000FF8  
            _send_string_no_lib 2EBA                    ?_setupSerial 0001                       ??_sprintf 0047  
                    __accesstop 0080         __end_of__initialization 2E20             ?_send_string_no_lib 0002  
                    ___ftadd@f1 002E                      ___ftadd@f2 0031                      ___ftge@ff1 0001  
                    ___ftge@ff2 0004               ?_read_byte_no_lib 0001                   ___rparam_used 000001  
                    ___ftdiv@f1 0024                      ___ftdiv@f2 0027                      ___ftdiv@f3 002E  
                    ___ftneg@f1 0001                      ___awtoft@c 0015              ??_read_byte_no_lib 0001  
                    ___ftmul@f1 0015                      ___ftmul@f2 0018                      ___ftsub@f1 003A  
                    ___ftsub@f2 003D                      ___fttol@f1 002B                  __pcstackCOMRAM 0001  
         __size_of_delay_cycles 002E                      ___lltoft@c 0009    __size_of_processReceivedChar 003E  
                 __end_of_scale 1D44            ??_send_string_no_lib 0004        __end_of_send_byte_no_lib 3004  
                    __div_to_l_ 2274       __size_of_read_adc_voltage 00D0               lcd_gotoxy@address 000D  
               __div_to_l_@exp1 000C                 __div_to_l_@cntr 000B                         ??_scale 0027  
               __div_to_l_@quot 0007                    sprintf@width 0058                      __pbssBANK0 0080  
   __end_of_read_adc_raw_no_lib 2DF2                    _delay_cycles 2E62                _lastReceivedChar 0072  
            __size_of_initPorts 002A         ??_displayWelcomeMessage 0011                   __div_to_l_@f1 0001  
                 __div_to_l_@f2 0004               read_byte_no_lib@c 0001                  lcd_send_byte@n 0009  
                       ?___ftge 0001                         ?___wmul 000F                lcd_send_nibble@n 0008  
                       ?_fround 0024                       ?___awtoft 0015                       ?___ftpack 0001  
                     ?___lltoft 0009                ?_init_adc_no_lib 0001        __end_of_processADCValues 27F0  
       processADCValues@voltage 0069                       ?_delay_ms 0001                      _lcd_gotoxy 2CBC  
                     ?_lcd_init 0001                       ?_lcd_putc 0001                       ?_lcd_puts 000F  
             _is_byte_available 2FDC               __end_of__npowers_ 1077                         __Hparam 0000  
                    _scale$1116 0027                         __Lparam 0000        __size_of_lcd_send_nibble 0022  
            ?_is_byte_available 0001                 __size_of___ftge 0090                         ___awdiv 292E  
                       ___ftadd 1F96                         ___awmod 2A34                         ___ftdiv 2584  
                       ___ftneg 2F78                         ___lldiv 29B2                 __size_of___wmul 0026  
                       ___ftmul 239C                         ___llmod 2AA4                         ___ftsub 2CFE  
                       ___fttol 2490                    __psmallconst 1000                         __pcinit 2DF2  
                    ??___awtoft 0018                      ??___ftpack 0006                 __size_of_fround 0252  
                       __ramtop 1000             ??_is_byte_available 0001                      ??___lltoft 000D  
                       __ptext0 2F30                         __ptext1 2F54                         __ptext2 2D3E  
                       __ptext3 3010                         __ptext4 2FDC                         __ptext5 273A  
                       __ptext6 10CE                         __ptext7 193C                         __ptext8 2FBE  
                       __ptext9 1D44                     ?__div_to_l_ 0001               __end_of_initPorts 2EBA  
                       _dpowers 1001                         _isdigit 2FBE                ___awmod@dividend 0001  
                    ??_delay_ms 0003                         _sprintf 10CE                      ??_lcd_init 000B  
                    ??_lcd_putc 000E                      ??_lcd_puts 0011            end_of_initialization 2E20  
          __size_of_setupSerial 0024                   __Lmediumconst 0000       __end_of_is_byte_available 2FF4  
          lcd_send_byte@cm_data 000A                 ___lldiv@divisor 0005                 ___lldiv@counter 000D  
                     _RCSTAbits 000FAB                         postdec1 000FE5                         postdec2 000FDD  
                       postinc0 000FEE                         postinc2 000FDE                  __tdiv_to_l_@f1 0001  
                __tdiv_to_l_@f2 0004           __end_of_lcd_send_byte 2CBC                setupSerial@dummy 0001  
                 ??__tdiv_to_l_ 0007                _read_adc_voltage 266A                     ?_lcd_gotoxy 000B  
               _LCD_INIT_STRING 006C             _processReceivedChar 2D3E                    _columnForLCD 0070  
          read_adc_voltage@temp 0036                     ___ftdiv@exp 0031                       _TXSTAbits 000FAC  
           __size_of__div_to_l_ 0128                     ___ftmul@exp 001E               send_byte_no_lib@c 0001  
          ?_processReceivedChar 0001                  __end_of___ftge 292E                  __end_of___wmul 2F0A  
                   _BAUDCONbits 000FB8                   __pidataCOMRAM 3018                   delay_cycles@n 0004  
                 delay_cycles@x 0005               ??_lcd_send_nibble 0007       __size_of_read_byte_no_lib 0008  
                __end_of_fround 1F96               ?_send_byte_no_lib 0001             start_initialization 2DF2  
            ??_send_byte_no_lib 0001             __end_of__tdiv_to_l_ 2274      __size_of_is_byte_available 0018  
               ___llmod@divisor 0005                 ___llmod@counter 0009  __size_of_displayWelcomeMessage 003C  
 __end_of_displayWelcomeMessage 2DB8           ??_processReceivedChar 000F                        ??___ftge 0007  
           __size_of_lcd_gotoxy 0042                        ??___wmul 0013    read_adc_raw_no_lib@raw_value 0005  
              __CFG_LPT1OSC$OFF 000000                        ??_fround 0027                   sprintf@tmpval 005A  
   __size_of_send_string_no_lib 002A                      fround@prec 002D               __size_of___awtoft 0038  
             __size_of___ftpack 00AE               __size_of___lltoft 005C                     __pbssCOMRAM 0072  
             ?_processADCValues 0001              ??_processADCValues 0066               __size_of_delay_ms 0026  
             __size_of_lcd_init 0062                     sprintf@flag 0056               __size_of_lcd_putc 0056  
             __size_of_lcd_puts 0056                     sprintf@fval 0060                     sprintf@prec 0063  
             __CFG_CCP2MX$PORTC 000000    __size_of_read_adc_raw_no_lib 003A                        ?___awdiv 0007  
                      ?___ftadd 002E                        ?___awmod 0001                        ?___ftdiv 0024  
                      ?___ftneg 0001                        ?___lldiv 0001                        ?___ftmul 0015  
                      ?___llmod 0001                        ?___ftsub 003A                       __npowers_ 1050  
                      ?___fttol 002B                     __tdiv_to_l_ 2142                    ??__div_to_l_ 0007  
                   __smallconst 1000                        ?_isdigit 0001                       _initPorts 2E90  
                      ?_sprintf 0040                  __size_of_scale 0408        __size_of_init_adc_no_lib 000C  
                ___wmul@product 0013                       delay_ms@i 0003                       delay_ms@n 0001  
                      _PIR1bits 000F9E              __end_of__div_to_l_ 239C        __end_of_read_adc_voltage 273A  
              __CFG_WDTPS$32768 000000      read_adc_raw_no_lib@channel 0007                _read_byte_no_lib 3010  
                    _ADCON0bits 000FC2               ___wmul@multiplier 000F                       lcd_init@i 000B  
                     lcd_putc@c 000E                       lcd_puts@s 000F                    ??_lcd_gotoxy 000C  
                    ?_initPorts 0001                   ??_setupSerial 0001                       copy_data0 2E06  
               _lcd_send_nibble 2F9C                        __Hrparam 0000                        __Lrparam 0000  
            __CFG_BOREN$SBORDIS 000000              __end_of_lcd_gotoxy 2CFE                __size_of___awdiv 0084  
              __size_of___ftadd 01AC                __size_of___awmod 0070                __size_of___ftdiv 00E6  
              __size_of___ftneg 0024                __size_of___lldiv 0082                __size_of___ftmul 00F4  
              __size_of___llmod 0066                __size_of___ftsub 0040                __size_of___fttol 00F4  
                      ___awtoft 2E2A                        ___ftpack 27F0                     _fround$1114 002A  
                   _fround$1115 0027                        ___lltoft 2B6C                     _isdigit$768 0002  
                    sprintf@exp 005E                      sprintf@val 0052                __size_of_isdigit 001E  
                      _delay_ms 2F0A                        __ptext10 239C                        __ptext11 2A34  
                      __ptext20 1F96                        __ptext12 292E                        __ptext21 2F78  
                      __ptext13 2142                        __ptext30 3004                        __ptext22 289E  
                      __ptext14 2274                        __ptext31 2E90                        __ptext23 266A  
                      __ptext15 2B6C                        __ptext40 2E62                        __ptext32 2D7C  
                      __ptext24 2DB8                        __ptext16 2AA4                        __ptext41 2F0A  
                      __ptext33 2EBA                        __ptext25 2EE4                        __ptext17 29B2  
                      __ptext34 2FF4                        __ptext26 2584                        __ptext18 2490  
                      __ptext35 2BC8                        __ptext27 2E2A                        __ptext19 2CFE  
                      __ptext36 2C1E                        __ptext28 27F0                        __ptext37 2CBC  
                      __ptext29 2B0A                        __ptext38 2C74                        __ptext39 2F9C  
                      __powers_ 1029                        _lcd_init 2B0A                        _lcd_putc 2C1E  
                      _lcd_puts 2BC8                __size_of_sprintf 086E          __size_of_lcd_send_byte 0048  
                 ?_delay_cycles 0001                   __size_of_main 0024       __size_of_send_byte_no_lib 0010  
           __end_of_setupSerial 2F78               ??_init_adc_no_lib 0001                        isdigit@c 0003  
                   ??_initPorts 0001             _read_adc_raw_no_lib 2DB8                        scale@scl 002A  
                     sprintf@ap 0050         __end_of_lcd_send_nibble 2FBE                __tdiv_to_l_@exp1 000F  
                     sprintf@sp 0040                __tdiv_to_l_@cntr 000E                  ??_delay_cycles 0001  
              __tdiv_to_l_@quot 000A                ___lldiv@dividend 0001     __end_of_processReceivedChar 2D7C  
     __size_of_processADCValues 00B6            ?_read_adc_raw_no_lib 0001           _displayWelcomeMessage 2D7C  
    __end_of_send_string_no_lib 2EE4                   _lcd_send_byte 2C74                    ?__tdiv_to_l_ 0001  
                      sprintf@c 0065                        sprintf@f 0042                ___lldiv@quotient 0009  
                 _displayBuffer 0080                     _setupSerial 2F54        __end_of_read_byte_no_lib 3018  
         ??_read_adc_raw_no_lib 0003  
